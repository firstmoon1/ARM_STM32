
003_register_led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000714  08000714  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000714  08000714  00010714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000718  08000718  00010718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800071c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          0000001c  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000030  20000030  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000b75  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000002f2  00000000  00000000  00020bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000e8  00000000  00000000  00020eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00020f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000006d4  00000000  00000000  00021048  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000004da  00000000  00000000  0002171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00021bf6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000228  00000000  00000000  00021c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00021e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006fc 	.word	0x080006fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080006fc 	.word	0x080006fc

080001c8 <rcc_config>:
extern uint32_t SystemCoreClock;
uint32_t system_clock;



void rcc_config(){  // refereans manuelde sayfa 161
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	// 8 000 000 -> 168 000 000

	RCC->CR &= ~(1<<0); // HSI OFF
 80001cc:	4a28      	ldr	r2, [pc, #160]	; (8000270 <rcc_config+0xa8>)
 80001ce:	4b28      	ldr	r3, [pc, #160]	; (8000270 <rcc_config+0xa8>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f023 0301 	bic.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
	RCC->CR |= (1<<16); // HSE ON
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <rcc_config+0xa8>)
 80001da:	4b25      	ldr	r3, [pc, #148]	; (8000270 <rcc_config+0xa8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001e2:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1<<17)) ); // HSE FLAG SECURITY
 80001e4:	bf00      	nop
 80001e6:	4b22      	ldr	r3, [pc, #136]	; (8000270 <rcc_config+0xa8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <rcc_config+0x1e>
	RCC->CR |= (1<<19);  // SECURITY
 80001f2:	4a1f      	ldr	r2, [pc, #124]	; (8000270 <rcc_config+0xa8>)
 80001f4:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <rcc_config+0xa8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001fc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x00000000; // 32 BIT ALL ZEROS NOW
 80001fe:	4b1c      	ldr	r3, [pc, #112]	; (8000270 <rcc_config+0xa8>)
 8000200:	2200      	movs	r2, #0
 8000202:	605a      	str	r2, [r3, #4]
	RCC->PLLCFGR |= (1<<22);  //  1 : HSE oscillator clock selected as PLL and PLLI2S clock entry
 8000204:	4a1a      	ldr	r2, [pc, #104]	; (8000270 <rcc_config+0xa8>)
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <rcc_config+0xa8>)
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |=(4<<0); // PLL M  4
 8000210:	4a17      	ldr	r2, [pc, #92]	; (8000270 <rcc_config+0xa8>)
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <rcc_config+0xa8>)
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (000000000<<6); // PLL N 168
 800021c:	4a14      	ldr	r2, [pc, #80]	; (8000270 <rcc_config+0xa8>)
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <rcc_config+0xa8>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	6053      	str	r3, [r2, #4]

	RCC->CR |= ( 1 << 24 );  // PLL ON
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <rcc_config+0xa8>)
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <rcc_config+0xa8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800022e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & ( 1 << 25 ))); // wait PLL active
 8000230:	bf00      	nop
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <rcc_config+0xa8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <rcc_config+0x6a>

	RCC->CFGR &= ~(1 << 0); // PLL selected as system clock ,page 167
 800023e:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <rcc_config+0xa8>)
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <rcc_config+0xa8>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f023 0301 	bic.w	r3, r3, #1
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= ( 1<< 1); // PLL selected as system clock
 800024a:	4a09      	ldr	r2, [pc, #36]	; (8000270 <rcc_config+0xa8>)
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <rcc_config+0xa8>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	f043 0302 	orr.w	r3, r3, #2
 8000254:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & (1 << 1)));  //select system clock is pll clock ,
 8000256:	bf00      	nop
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <rcc_config+0xa8>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <rcc_config+0x90>

}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40023800 	.word	0x40023800

08000274 <gpio_config>:

void gpio_config(){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 1 << 3;  //GPIOD clock enable  , 3 bir sola kaydýrma iþlemi yaptýk 1 = high degerini
 8000278:	4a20      	ldr	r2, [pc, #128]	; (80002fc <gpio_config+0x88>)
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <gpio_config+0x88>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

	// pin ayarý
	GPIOD->MODER |= (1<<24);  //24'ü 1 yaptýk  , PD12 , 01: General purpose output mode , page 281 , default olarak hepsi input gelir yani 00 olarak
 8000284:	4a1e      	ldr	r2, [pc, #120]	; (8000300 <gpio_config+0x8c>)
 8000286:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <gpio_config+0x8c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<25); //25'i 0 yaptýk  , 0 to 31 , toplam 32 bit var ,her iki bit 1 yeri temsil eder mesela PD12  24 ve 25 inci yeri kapsýyor
 8000290:	4a1b      	ldr	r2, [pc, #108]	; (8000300 <gpio_config+0x8c>)
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <gpio_config+0x8c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800029a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<26);  //PD13
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <gpio_config+0x8c>)
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <gpio_config+0x8c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<27);
 80002a8:	4a15      	ldr	r2, [pc, #84]	; (8000300 <gpio_config+0x8c>)
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <gpio_config+0x8c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002b2:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<28);  //PD14
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <gpio_config+0x8c>)
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <gpio_config+0x8c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<29);
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <gpio_config+0x8c>)
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <gpio_config+0x8c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002ca:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1<<30);  //PD15
 80002cc:	4a0c      	ldr	r2, [pc, #48]	; (8000300 <gpio_config+0x8c>)
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <gpio_config+0x8c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1<<31);
 80002d8:	4a09      	ldr	r2, [pc, #36]	; (8000300 <gpio_config+0x8c>)
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <gpio_config+0x8c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002e2:	6013      	str	r3, [r2, #0]

	// speed ayarý
	GPIOD->OSPEEDR |= 0xFF000000; // 11 : very high speed yapalým ,32 bit hesap makinesinden yaz 1111 1111 0000 0000 0000 0000 0000 0000 aslýnda
 80002e4:	4a06      	ldr	r2, [pc, #24]	; (8000300 <gpio_config+0x8c>)
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <gpio_config+0x8c>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80002ee:	6093      	str	r3, [r2, #8]
	//GPIOD->OSPEEDR |= (0xFF <<2 4); // bunuda yapabilirsin mesela  yukardakine alternatif ama hoca denemedi

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020c00 	.word	0x40020c00

08000304 <main>:


int main(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0

	// refereans manuelde sayfa 267 de ise gpio giris kýsmý,gpio register ise  281

	rcc_config();
 800030a:	f7ff ff5d 	bl	80001c8 <rcc_config>
	SystemCoreClockUpdate(); // 168 MHz cevirdik
 800030e:	f000 f8d9 	bl	80004c4 <SystemCoreClockUpdate>

	gpio_config(); // bir þeyi unuttuk burda biz GPIOD yi actif etmedik  , page 180 de RCC den GPIOD yi aktif et
 8000312:	f7ff ffaf 	bl	8000274 <gpio_config>


  while (1){

	  GPIOD->ODR |= 1 << 12; // 12.pin set yani 1 yani high
 8000316:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <main+0x9c>)
 8000318:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <main+0x9c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000320:	6153      	str	r3, [r2, #20]
	  GPIOD->ODR |= 1 << 13; // 13.pin set
 8000322:	4a1f      	ldr	r2, [pc, #124]	; (80003a0 <main+0x9c>)
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <main+0x9c>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800032c:	6153      	str	r3, [r2, #20]
	  GPIOD->ODR |= 1 << 14; // 14.pin set
 800032e:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <main+0x9c>)
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <main+0x9c>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000338:	6153      	str	r3, [r2, #20]
	  GPIOD->ODR |= 1 << 15; // 15.pin set
 800033a:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <main+0x9c>)
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <main+0x9c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000344:	6153      	str	r3, [r2, #20]


	  for(int i=0;i<1680000;i++){
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e01a      	b.n	8000382 <main+0x7e>

		  GPIOD->ODR &= ~(1 << 12); // 12.pin reset yani 0 yani low
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <main+0x9c>)
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <main+0x9c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000356:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1 << 13); // 13.pin reset
 8000358:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <main+0x9c>)
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <main+0x9c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000362:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1 << 14); // 14.pin reset
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <main+0x9c>)
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <main+0x9c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800036e:	6153      	str	r3, [r2, #20]
		  GPIOD->ODR &= ~(1 << 15); // 15.pin reset
 8000370:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <main+0x9c>)
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <main+0x9c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800037a:	6153      	str	r3, [r2, #20]
	  for(int i=0;i<1680000;i++){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <main+0xa0>)
 8000386:	4293      	cmp	r3, r2
 8000388:	dde0      	ble.n	800034c <main+0x48>
	  }

	  for(int i=0;i<1680000;i++);
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	e002      	b.n	8000396 <main+0x92>
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	4a02      	ldr	r2, [pc, #8]	; (80003a4 <main+0xa0>)
 800039a:	4293      	cmp	r3, r2
 800039c:	ddf8      	ble.n	8000390 <main+0x8c>
	  GPIOD->ODR |= 1 << 12; // 12.pin set yani 1 yani high
 800039e:	e7ba      	b.n	8000316 <main+0x12>
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	0019a27f 	.word	0x0019a27f

080003a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003ae:	e003      	b.n	80003b8 <LoopCopyDataInit>

080003b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003b6:	3104      	adds	r1, #4

080003b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c0:	d3f6      	bcc.n	80003b0 <CopyDataInit>
  ldr  r2, =_sbss
 80003c2:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003c4:	e002      	b.n	80003cc <LoopFillZerobss>

080003c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003c8:	f842 3b04 	str.w	r3, [r2], #4

080003cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d0:	d3f9      	bcc.n	80003c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003d2:	f000 f841 	bl	8000458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003d6:	f000 f96d 	bl	80006b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003da:	f7ff ff93 	bl	8000304 <main>
  bx  lr    
 80003de:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003e4:	0800071c 	.word	0x0800071c
  ldr  r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003ec:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80003f0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80003f4:	20000030 	.word	0x20000030

080003f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>

080003fa <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800040c:	e7fe      	b.n	800040c <HardFault_Handler+0x4>

0800040e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000412:	e7fe      	b.n	8000412 <MemManage_Handler+0x4>

08000414 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000418:	e7fe      	b.n	8000418 <BusFault_Handler+0x4>

0800041a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800041e:	e7fe      	b.n	800041e <UsageFault_Handler+0x4>

08000420 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <SystemInit+0x60>)
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <SystemInit+0x60>)
 8000460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <SystemInit+0x64>)
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <SystemInit+0x64>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <SystemInit+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <SystemInit+0x64>)
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <SystemInit+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800048c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SystemInit+0x64>)
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <SystemInit+0x68>)
 8000492:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000494:	4a09      	ldr	r2, [pc, #36]	; (80004bc <SystemInit+0x64>)
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <SystemInit+0x64>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <SystemInit+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80004a6:	f000 f889 	bl	80005bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004aa:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <SystemInit+0x60>)
 80004ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b0:	609a      	str	r2, [r3, #8]
#endif
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	40023800 	.word	0x40023800
 80004c0:	24003010 	.word	0x24003010

080004c4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	2302      	movs	r3, #2
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	2302      	movs	r3, #2
 80004dc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d007      	beq.n	80004fe <SystemCoreClockUpdate+0x3a>
 80004ee:	2b08      	cmp	r3, #8
 80004f0:	d009      	beq.n	8000506 <SystemCoreClockUpdate+0x42>
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13d      	bne.n	8000572 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004f6:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 80004f8:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <SystemCoreClockUpdate+0xec>)
 80004fa:	601a      	str	r2, [r3, #0]
      break;
 80004fc:	e03d      	b.n	800057a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004fe:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <SystemCoreClockUpdate+0xf0>)
 8000502:	601a      	str	r2, [r3, #0]
      break;
 8000504:	e039      	b.n	800057a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	0d9b      	lsrs	r3, r3, #22
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800051a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00c      	beq.n	800053c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000522:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <SystemCoreClockUpdate+0xf0>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 800052c:	6852      	ldr	r2, [r2, #4]
 800052e:	0992      	lsrs	r2, r2, #6
 8000530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e00b      	b.n	8000554 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800053c:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <SystemCoreClockUpdate+0xec>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	fbb2 f3f3 	udiv	r3, r2, r3
 8000544:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 8000546:	6852      	ldr	r2, [r2, #4]
 8000548:	0992      	lsrs	r2, r2, #6
 800054a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	0c1b      	lsrs	r3, r3, #16
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	3301      	adds	r3, #1
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 800056e:	6013      	str	r3, [r2, #0]
      break;
 8000570:	e003      	b.n	800057a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <SystemCoreClockUpdate+0xec>)
 8000576:	601a      	str	r2, [r3, #0]
      break;
 8000578:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <SystemCoreClockUpdate+0xe4>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	091b      	lsrs	r3, r3, #4
 8000580:	f003 030f 	and.w	r3, r3, #15
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <SystemCoreClockUpdate+0xf4>)
 8000586:	5cd3      	ldrb	r3, [r2, r3]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	fa22 f303 	lsr.w	r3, r2, r3
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemCoreClockUpdate+0xe8>)
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	371c      	adds	r7, #28
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	20000000 	.word	0x20000000
 80005b0:	00f42400 	.word	0x00f42400
 80005b4:	007a1200 	.word	0x007a1200
 80005b8:	20000004 	.word	0x20000004

080005bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005ca:	4a36      	ldr	r2, [pc, #216]	; (80006a4 <SetSysClock+0xe8>)
 80005cc:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <SetSysClock+0xe8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <SetSysClock+0xe8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3301      	adds	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d103      	bne.n	80005f4 <SetSysClock+0x38>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005f2:	d1f0      	bne.n	80005d6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <SetSysClock+0xe8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	e001      	b.n	800060a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d142      	bne.n	8000696 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <SetSysClock+0xe8>)
 8000612:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SetSysClock+0xe8>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <SetSysClock+0xec>)
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SetSysClock+0xec>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000628:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <SetSysClock+0xe8>)
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SetSysClock+0xe8>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <SetSysClock+0xe8>)
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SetSysClock+0xe8>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <SetSysClock+0xe8>)
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SetSysClock+0xe8>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000646:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <SetSysClock+0xe8>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <SetSysClock+0xf0>)
 800064c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800064e:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <SetSysClock+0xe8>)
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <SetSysClock+0xe8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000658:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800065a:	bf00      	nop
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <SetSysClock+0xe8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0f9      	beq.n	800065c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <SetSysClock+0xf4>)
 800066a:	f240 7205 	movw	r2, #1797	; 0x705
 800066e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <SetSysClock+0xe8>)
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <SetSysClock+0xe8>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f023 0303 	bic.w	r3, r3, #3
 800067a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <SetSysClock+0xe8>)
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <SetSysClock+0xe8>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000688:	bf00      	nop
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <SetSysClock+0xe8>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f003 030c 	and.w	r3, r3, #12
 8000692:	2b08      	cmp	r3, #8
 8000694:	d1f9      	bne.n	800068a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000
 80006ac:	07405408 	.word	0x07405408
 80006b0:	40023c00 	.word	0x40023c00

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	4e0d      	ldr	r6, [pc, #52]	; (80006ec <__libc_init_array+0x38>)
 80006b8:	4c0d      	ldr	r4, [pc, #52]	; (80006f0 <__libc_init_array+0x3c>)
 80006ba:	1ba4      	subs	r4, r4, r6
 80006bc:	10a4      	asrs	r4, r4, #2
 80006be:	2500      	movs	r5, #0
 80006c0:	42a5      	cmp	r5, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	4e0b      	ldr	r6, [pc, #44]	; (80006f4 <__libc_init_array+0x40>)
 80006c6:	4c0c      	ldr	r4, [pc, #48]	; (80006f8 <__libc_init_array+0x44>)
 80006c8:	f000 f818 	bl	80006fc <_init>
 80006cc:	1ba4      	subs	r4, r4, r6
 80006ce:	10a4      	asrs	r4, r4, #2
 80006d0:	2500      	movs	r5, #0
 80006d2:	42a5      	cmp	r5, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006dc:	4798      	blx	r3
 80006de:	3501      	adds	r5, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e6:	4798      	blx	r3
 80006e8:	3501      	adds	r5, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	08000714 	.word	0x08000714
 80006f0:	08000714 	.word	0x08000714
 80006f4:	08000714 	.word	0x08000714
 80006f8:	08000718 	.word	0x08000718

080006fc <_init>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr

08000708 <_fini>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr
