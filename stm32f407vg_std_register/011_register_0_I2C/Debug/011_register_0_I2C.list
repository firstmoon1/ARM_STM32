
011_register_0_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800074c  0800074c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000754  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000d36  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000332  00000000  00000000  00020d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000108  00000000  00000000  000210a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  000211a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000768  00000000  00000000  00021278  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000055e  00000000  00000000  000219e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00021f3e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002bc  00000000  00000000  00021fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00022278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000734 	.word	0x08000734

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000734 	.word	0x08000734

080001c8 <RCC_Config>:

int i = 0;
uint8_t m_address = 0x4E, TCS_W_ADDRESS = 0xD0;

void RCC_Config()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000;					// HSEON and HSEONRDY enable
 80001cc:	4a24      	ldr	r2, [pc, #144]	; (8000260 <RCC_Config+0x98>)
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <RCC_Config+0x98>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));			// HSEON Ready Flag wait
 80001d8:	bf00      	nop
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <RCC_Config+0x98>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <RCC_Config+0x12>
	RCC->CR |= 0x00080000;					// CSS Enable
 80001e6:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <RCC_Config+0x98>)
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <RCC_Config+0x98>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f0:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000;					// PLL ON
 80001f2:	4a1b      	ldr	r2, [pc, #108]	; (8000260 <RCC_Config+0x98>)
 80001f4:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <RCC_Config+0x98>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001fc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;				// PLL e HSE seçtik
 80001fe:	4a18      	ldr	r2, [pc, #96]	; (8000260 <RCC_Config+0x98>)
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <RCC_Config+0x98>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000208:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;				// PLL M = 4
 800020a:	4a15      	ldr	r2, [pc, #84]	; (8000260 <RCC_Config+0x98>)
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <RCC_Config+0x98>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;				// Pll N = 168
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <RCC_Config+0x98>)
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <RCC_Config+0x98>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000220:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;				// PLL p = 2
 8000222:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <RCC_Config+0x98>)
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <RCC_Config+0x98>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;				// AHB Prescaler = 1
 800022a:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <RCC_Config+0x98>)
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <RCC_Config+0x98>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;				// APB2 Prescaler = 2
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <RCC_Config+0x98>)
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <RCC_Config+0x98>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800023c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;				// APB1 Prescaler = 4
 800023e:	4a08      	ldr	r2, [pc, #32]	; (8000260 <RCC_Config+0x98>)
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <RCC_Config+0x98>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00800000;					// CSS Flag clear
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <RCC_Config+0x98>)
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <RCC_Config+0x98>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000254:	60d3      	str	r3, [r2, #12]
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40023800 	.word	0x40023800

08000264 <GPIO_Config>:

// I2C, pb10 =SCL ,pb11 = SDA

void GPIO_Config(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

RCC->AHB1ENR  |= 3<<0;// GPIOA,GPIOB aktif ettik.
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <GPIO_Config+0x40>)
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <GPIO_Config+0x40>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026e:	f043 0303 	orr.w	r3, r3, #3
 8000272:	6313      	str	r3, [r2, #48]	; 0x30

GPIOB->AFR[1] |=(4 << 8) | (4 << 12); // PB10 and PB11 AF4 (I2C)
 8000274:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <GPIO_Config+0x44>)
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <GPIO_Config+0x44>)
 8000278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800027a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800027e:	6253      	str	r3, [r2, #36]	; 0x24
GPIOB->MODER |= (2<<20) | (2<<22) ; //PB10 and PB11 AF = alternate function
 8000280:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <GPIO_Config+0x44>)
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <GPIO_Config+0x44>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f443 0320 	orr.w	r3, r3, #10485760	; 0xa00000
 800028a:	6013      	str	r3, [r2, #0]
GPIOB->OTYPER |= (1<<11) | (1<<12); // OPEN DRAIN yaptýk pb10 pb11
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <GPIO_Config+0x44>)
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <GPIO_Config+0x44>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000296:	6053      	str	r3, [r2, #4]

}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020400 	.word	0x40020400

080002ac <I2C_Config>:

void I2C_Config(){
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0

RCC->APB1ENR |= 1<<22; // I2C clock enabled.
 80002b0:	4a15      	ldr	r2, [pc, #84]	; (8000308 <I2C_Config+0x5c>)
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <I2C_Config+0x5c>)
 80002b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ba:	6413      	str	r3, [r2, #64]	; 0x40
I2C2->CR2 |= 0x0008; // I2C clock 8MHz
 80002bc:	4a13      	ldr	r2, [pc, #76]	; (800030c <I2C_Config+0x60>)
 80002be:	4b13      	ldr	r3, [pc, #76]	; (800030c <I2C_Config+0x60>)
 80002c0:	889b      	ldrh	r3, [r3, #4]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	f043 0308 	orr.w	r3, r3, #8
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	8093      	strh	r3, [r2, #4]
I2C2->CCR |= 0x0028; // I2C 100 kHz
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <I2C_Config+0x60>)
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <I2C_Config+0x60>)
 80002d0:	8b9b      	ldrh	r3, [r3, #28]
 80002d2:	b29b      	uxth	r3, r3
 80002d4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80002d8:	b29b      	uxth	r3, r3
 80002da:	8393      	strh	r3, [r2, #28]
I2C2->TRISE |= 0x09;
 80002dc:	4a0b      	ldr	r2, [pc, #44]	; (800030c <I2C_Config+0x60>)
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <I2C_Config+0x60>)
 80002e0:	8c1b      	ldrh	r3, [r3, #32]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	f043 0309 	orr.w	r3, r3, #9
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	8413      	strh	r3, [r2, #32]
I2C2->CR1 |= 0x0001; // I2C ENABLED
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <I2C_Config+0x60>)
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <I2C_Config+0x60>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	8013      	strh	r3, [r2, #0]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40005800 	.word	0x40005800

08000310 <I2C_Write>:

void I2C_Write(uint8_t address,uint8_t data){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	460a      	mov	r2, r1
 800031a:	71fb      	strb	r3, [r7, #7]
 800031c:	4613      	mov	r3, r2
 800031e:	71bb      	strb	r3, [r7, #6]

I2C2->CR1 |= 1<<8; //send start bit
 8000320:	4a26      	ldr	r2, [pc, #152]	; (80003bc <I2C_Write+0xac>)
 8000322:	4b26      	ldr	r3, [pc, #152]	; (80003bc <I2C_Write+0xac>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	b29b      	uxth	r3, r3
 8000328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032c:	b29b      	uxth	r3, r3
 800032e:	8013      	strh	r3, [r2, #0]
while(!(I2C2->SR1 & 0x0001)); // WAIT FOR START
 8000330:	bf00      	nop
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <I2C_Write+0xac>)
 8000334:	8a9b      	ldrh	r3, [r3, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f8      	beq.n	8000332 <I2C_Write+0x22>
I2C2->DR =0x4E; // slave address
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <I2C_Write+0xac>)
 8000342:	224e      	movs	r2, #78	; 0x4e
 8000344:	821a      	strh	r2, [r3, #16]
while(!(I2C2->SR1 & 0x0002)); // wait send address
 8000346:	bf00      	nop
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <I2C_Write+0xac>)
 800034a:	8a9b      	ldrh	r3, [r3, #20]
 800034c:	b29b      	uxth	r3, r3
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f8      	beq.n	8000348 <I2C_Write+0x38>
while(!(I2C2->SR2 & 0x0001)); // wait MASTER
 8000356:	bf00      	nop
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <I2C_Write+0xac>)
 800035a:	8b1b      	ldrh	r3, [r3, #24]
 800035c:	b29b      	uxth	r3, r3
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f8      	beq.n	8000358 <I2C_Write+0x48>
//I2C2->DR =address;  // Cipin adresi
while(!(I2C2->SR1 & 0x0080));  // TxE Data Register'in bosalmasini bekle(Txe)
 8000366:	bf00      	nop
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <I2C_Write+0xac>)
 800036a:	8a9b      	ldrh	r3, [r3, #20]
 800036c:	b29b      	uxth	r3, r3
 800036e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f8      	beq.n	8000368 <I2C_Write+0x58>
I2C2->DR =data; //Veriyi Yaz
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <I2C_Write+0xac>)
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	b292      	uxth	r2, r2
 800037c:	821a      	strh	r2, [r3, #16]
while(!(I2C2->SR1 & 0x0080));  // TxE Data Register'in bosalmasini bekle(Txe)
 800037e:	bf00      	nop
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <I2C_Write+0xac>)
 8000382:	8a9b      	ldrh	r3, [r3, #20]
 8000384:	b29b      	uxth	r3, r3
 8000386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <I2C_Write+0x70>
while(!(I2C2->SR1 & 0x0004)); // wait BTF successful,Verinin gönderimini bekle (BTF)
 800038e:	bf00      	nop
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <I2C_Write+0xac>)
 8000392:	8a9b      	ldrh	r3, [r3, #20]
 8000394:	b29b      	uxth	r3, r3
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f8      	beq.n	8000390 <I2C_Write+0x80>
I2C2->CR1 |=1<<9; // send stop bit
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <I2C_Write+0xac>)
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <I2C_Write+0xac>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	8013      	strh	r3, [r2, #0]

}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40005800 	.word	0x40005800

080003c0 <delay>:
     return ((char)I2C2 -> DR);            // okunan byte ile geri dön
}


void delay(uint32_t time)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	while(time--);
 80003c8:	bf00      	nop
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d1fa      	bne.n	80003ca <delay+0xa>
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <main>:


int main(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

	RCC_Config();
 80003e4:	f7ff fef0 	bl	80001c8 <RCC_Config>
	GPIO_Config();
 80003e8:	f7ff ff3c 	bl	8000264 <GPIO_Config>
	I2C_Config();
 80003ec:	f7ff ff5e 	bl	80002ac <I2C_Config>

	while (1){

	  if(GPIOA->IDR & 0x00000001)
 80003f0:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <main+0xe8>)
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d007      	beq.n	800040c <main+0x2c>
	  {
		  i++;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <main+0xec>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a32      	ldr	r2, [pc, #200]	; (80004cc <main+0xec>)
 8000404:	6013      	str	r3, [r2, #0]
		  delay(6300000);
 8000406:	4832      	ldr	r0, [pc, #200]	; (80004d0 <main+0xf0>)
 8000408:	f7ff ffda 	bl	80003c0 <delay>
	  }

	  switch(i)
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <main+0xec>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b08      	cmp	r3, #8
 8000412:	d854      	bhi.n	80004be <main+0xde>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <main+0x3c>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	08000441 	.word	0x08000441
 8000420:	0800044f 	.word	0x0800044f
 8000424:	0800045d 	.word	0x0800045d
 8000428:	0800046b 	.word	0x0800046b
 800042c:	08000479 	.word	0x08000479
 8000430:	08000487 	.word	0x08000487
 8000434:	08000495 	.word	0x08000495
 8000438:	080004a3 	.word	0x080004a3
 800043c:	080004b1 	.word	0x080004b1
	  {
	  case 0:
		  I2C_Write(m_address, 0x00);
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <main+0xf4>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ff62 	bl	8000310 <I2C_Write>
		  break;
 800044c:	e03b      	b.n	80004c6 <main+0xe6>
	  case 1:
		  I2C_Write(m_address, 0x01);
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <main+0xf4>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2101      	movs	r1, #1
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5b 	bl	8000310 <I2C_Write>
		  break;
 800045a:	e034      	b.n	80004c6 <main+0xe6>
	  case 2:
		  I2C_Write(m_address, 0x02);
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <main+0xf4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2102      	movs	r1, #2
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff ff54 	bl	8000310 <I2C_Write>
		  break;
 8000468:	e02d      	b.n	80004c6 <main+0xe6>
	  case 3:
		  I2C_Write(m_address, 0x04);
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <main+0xf4>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2104      	movs	r1, #4
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff4d 	bl	8000310 <I2C_Write>
		  break;
 8000476:	e026      	b.n	80004c6 <main+0xe6>
	  case 4:
		  I2C_Write(m_address, 0x08);
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <main+0xf4>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2108      	movs	r1, #8
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff46 	bl	8000310 <I2C_Write>
		  break;
 8000484:	e01f      	b.n	80004c6 <main+0xe6>
	  case 5:
		  I2C_Write(m_address, 0x10);
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <main+0xf4>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2110      	movs	r1, #16
 800048c:	4618      	mov	r0, r3
 800048e:	f7ff ff3f 	bl	8000310 <I2C_Write>
		  break;
 8000492:	e018      	b.n	80004c6 <main+0xe6>
	  case 6:
		  I2C_Write(m_address, 0x20);
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <main+0xf4>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2120      	movs	r1, #32
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff38 	bl	8000310 <I2C_Write>
		  break;
 80004a0:	e011      	b.n	80004c6 <main+0xe6>
	  case 7:
		  I2C_Write(m_address, 0x40);
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <main+0xf4>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff31 	bl	8000310 <I2C_Write>
		  break;
 80004ae:	e00a      	b.n	80004c6 <main+0xe6>
	  case 8:
		  I2C_Write(m_address, 0x80);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <main+0xf4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff2a 	bl	8000310 <I2C_Write>
		  break;
 80004bc:	e003      	b.n	80004c6 <main+0xe6>
	  default:
		  i=0;
 80004be:	4b03      	ldr	r3, [pc, #12]	; (80004cc <main+0xec>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
		  break;
 80004c4:	bf00      	nop
	  if(GPIOA->IDR & 0x00000001)
 80004c6:	e793      	b.n	80003f0 <main+0x10>
 80004c8:	40020000 	.word	0x40020000
 80004cc:	20000020 	.word	0x20000020
 80004d0:	00602160 	.word	0x00602160
 80004d4:	20000000 	.word	0x20000000

080004d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004de:	e003      	b.n	80004e8 <LoopCopyDataInit>

080004e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004e6:	3104      	adds	r1, #4

080004e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004f0:	d3f6      	bcc.n	80004e0 <CopyDataInit>
  ldr  r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004f4:	e002      	b.n	80004fc <LoopFillZerobss>

080004f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004f8:	f842 3b04 	str.w	r3, [r2], #4

080004fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000500:	d3f9      	bcc.n	80004f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000502:	f000 f841 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f000 f8f1 	bl	80006ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050a:	f7ff ff69 	bl	80003e0 <main>
  bx  lr    
 800050e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000514:	08000754 	.word	0x08000754
  ldr  r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800051c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000520:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000524:	20000024 	.word	0x20000024

08000528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>

0800052a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800053c:	e7fe      	b.n	800053c <HardFault_Handler+0x4>

0800053e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000542:	e7fe      	b.n	8000542 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000548:	e7fe      	b.n	8000548 <BusFault_Handler+0x4>

0800054a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800054e:	e7fe      	b.n	800054e <UsageFault_Handler+0x4>

08000550 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <SystemInit+0x60>)
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <SystemInit+0x60>)
 8000590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <SystemInit+0x64>)
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <SystemInit+0x64>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <SystemInit+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <SystemInit+0x64>)
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <SystemInit+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <SystemInit+0x64>)
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <SystemInit+0x68>)
 80005c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <SystemInit+0x64>)
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <SystemInit+0x64>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <SystemInit+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80005d6:	f000 f80d 	bl	80005f4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <SystemInit+0x60>)
 80005dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005e0:	609a      	str	r2, [r3, #8]
#endif
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	40023800 	.word	0x40023800
 80005f0:	24003010 	.word	0x24003010

080005f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000602:	4a36      	ldr	r2, [pc, #216]	; (80006dc <SetSysClock+0xe8>)
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <SetSysClock+0xe8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800060c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800060e:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SetSysClock+0xe8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d103      	bne.n	800062c <SetSysClock+0x38>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800062a:	d1f0      	bne.n	800060e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <SetSysClock+0xe8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000638:	2301      	movs	r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	e001      	b.n	8000642 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d142      	bne.n	80006ce <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000648:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SetSysClock+0xe8>)
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <SetSysClock+0xe8>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <SetSysClock+0xec>)
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SetSysClock+0xec>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000660:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <SetSysClock+0xe8>)
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SetSysClock+0xe8>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <SetSysClock+0xe8>)
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SetSysClock+0xe8>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000672:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000674:	4a19      	ldr	r2, [pc, #100]	; (80006dc <SetSysClock+0xe8>)
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SetSysClock+0xe8>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800067e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SetSysClock+0xe8>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <SetSysClock+0xf0>)
 8000684:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <SetSysClock+0xe8>)
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SetSysClock+0xe8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000690:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000692:	bf00      	nop
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SetSysClock+0xe8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <SetSysClock+0xf4>)
 80006a2:	f240 7205 	movw	r2, #1797	; 0x705
 80006a6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <SetSysClock+0xe8>)
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <SetSysClock+0xe8>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <SetSysClock+0xe8>)
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <SetSysClock+0xe8>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006c0:	bf00      	nop
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SetSysClock+0xe8>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f003 030c 	and.w	r3, r3, #12
 80006ca:	2b08      	cmp	r3, #8
 80006cc:	d1f9      	bne.n	80006c2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000
 80006e4:	07405419 	.word	0x07405419
 80006e8:	40023c00 	.word	0x40023c00

080006ec <__libc_init_array>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	4e0d      	ldr	r6, [pc, #52]	; (8000724 <__libc_init_array+0x38>)
 80006f0:	4c0d      	ldr	r4, [pc, #52]	; (8000728 <__libc_init_array+0x3c>)
 80006f2:	1ba4      	subs	r4, r4, r6
 80006f4:	10a4      	asrs	r4, r4, #2
 80006f6:	2500      	movs	r5, #0
 80006f8:	42a5      	cmp	r5, r4
 80006fa:	d109      	bne.n	8000710 <__libc_init_array+0x24>
 80006fc:	4e0b      	ldr	r6, [pc, #44]	; (800072c <__libc_init_array+0x40>)
 80006fe:	4c0c      	ldr	r4, [pc, #48]	; (8000730 <__libc_init_array+0x44>)
 8000700:	f000 f818 	bl	8000734 <_init>
 8000704:	1ba4      	subs	r4, r4, r6
 8000706:	10a4      	asrs	r4, r4, #2
 8000708:	2500      	movs	r5, #0
 800070a:	42a5      	cmp	r5, r4
 800070c:	d105      	bne.n	800071a <__libc_init_array+0x2e>
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000714:	4798      	blx	r3
 8000716:	3501      	adds	r5, #1
 8000718:	e7ee      	b.n	80006f8 <__libc_init_array+0xc>
 800071a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800071e:	4798      	blx	r3
 8000720:	3501      	adds	r5, #1
 8000722:	e7f2      	b.n	800070a <__libc_init_array+0x1e>
 8000724:	0800074c 	.word	0x0800074c
 8000728:	0800074c 	.word	0x0800074c
 800072c:	0800074c 	.word	0x0800074c
 8000730:	08000750 	.word	0x08000750

08000734 <_init>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	bf00      	nop
 8000738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073a:	bc08      	pop	{r3}
 800073c:	469e      	mov	lr, r3
 800073e:	4770      	bx	lr

08000740 <_fini>:
 8000740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000742:	bf00      	nop
 8000744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000746:	bc08      	pop	{r3}
 8000748:	469e      	mov	lr, r3
 800074a:	4770      	bx	lr
