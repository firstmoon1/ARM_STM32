
005_register_external_interrupt_multi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000510  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000698  080006a0  000106a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000698  08000698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800069c  0800069c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000106a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000106a0  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000106a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001220  00000000  00000000  000106d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000003c6  00000000  00000000  000118f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000118  00000000  00000000  00011cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e0  00000000  00000000  00011dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000766  00000000  00000000  00011eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000ac0  00000000  00000000  00012616  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000130d6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000304  00000000  00000000  00013154  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00013458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000680 	.word	0x08000680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000680 	.word	0x08000680

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <delay>:

#include "stm32f4xx.h"

void delay(uint32_t tt){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	while(tt--);
 8000258:	bf00      	nop
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	607a      	str	r2, [r7, #4]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1fa      	bne.n	800025a <delay+0xa>
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <gpio_config>:

void gpio_config(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

	RCC->AHB1ENR = 0x00000009; // GPÝOD,GPÝOA yý active ettik
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <gpio_config+0x30>)
 8000276:	2209      	movs	r2, #9
 8000278:	631a      	str	r2, [r3, #48]	; 0x30
	// led config
	GPIOD->MODER = 0x55000000; // genreal purpose output mode
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <gpio_config+0x34>)
 800027c:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 8000280:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000; // output push pull
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <gpio_config+0x34>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0x00000000; // LOW SPEED
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <gpio_config+0x34>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <gpio_config+0x34>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
	// buton config e gerek yok default olarak hepsi input,push pull, pull down low speed de ,GPIOA config yapmadýk yani ,ama yapmak istersende haberin olsun ,GPIOA->MODER yapýnca sapýtýyor digerlerinde sýkýntý yok
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <exti_config>:


void exti_config(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

	RCC->APB2ENR = 0x00004000;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <exti_config+0x58>)
 80002ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002b2:	645a      	str	r2, [r3, #68]	; 0x44

	NVIC_EnableIRQ(EXTI0_IRQn); //PA0 pin,The function enables a device-specific interrupt in the NVIC interrupt controller.
 80002b4:	2006      	movs	r0, #6
 80002b6:	f7ff ff87 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn); //PA1 pin
 80002ba:	2007      	movs	r0, #7
 80002bc:	f7ff ff84 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn); //PA2 pin
 80002c0:	2008      	movs	r0, #8
 80002c2:	f7ff ff81 	bl	80001c8 <NVIC_EnableIRQ>

	SYSCFG->EXTICR[0] = 0x00000000; // EXTI0, active ettik ,page 291 ,SYSCFG external interrupt configuration register 1
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <exti_config+0x5c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
	SYSCFG->EXTICR[1] = 0x00000000; // EXTI1, active ettik
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <exti_config+0x5c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
	SYSCFG->EXTICR[2] = 0x00000000; // EXTI2, active ettik
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <exti_config+0x5c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(EXTI0_IRQn,0);
 80002d8:	2100      	movs	r1, #0
 80002da:	2006      	movs	r0, #6
 80002dc:	f7ff ff8e 	bl	80001fc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn,4);
 80002e0:	2104      	movs	r1, #4
 80002e2:	2007      	movs	r0, #7
 80002e4:	f7ff ff8a 	bl	80001fc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn,3);
 80002e8:	2103      	movs	r1, #3
 80002ea:	2008      	movs	r0, #8
 80002ec:	f7ff ff86 	bl	80001fc <NVIC_SetPriority>

	EXTI->IMR  = 0x00000007; //interrupt olarak gösterdik,page 384
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <exti_config+0x60>)
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
	EXTI->RTSR = 0x00000007; // rising trigger enabled
 80002f6:	4b04      	ldr	r3, [pc, #16]	; (8000308 <exti_config+0x60>)
 80002f8:	2207      	movs	r2, #7
 80002fa:	609a      	str	r2, [r3, #8]

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40023800 	.word	0x40023800
 8000304:	40013800 	.word	0x40013800
 8000308:	40013c00 	.word	0x40013c00

0800030c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

	if(EXTI->PR & (1<<0)){ //ben böyle yaptým: 0x00000001, 1: selected trigger request occurred PR0 için
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <EXTI0_IRQHandler+0x4c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d017      	beq.n	800034e <EXTI0_IRQHandler+0x42>
		int i=0;
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
		do{
			GPIOD->ODR = 0x00001000; //PD12 ON, PAGE 283
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <EXTI0_IRQHandler+0x50>)
 8000324:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000328:	615a      	str	r2, [r3, #20]
			delay(1680000);
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <EXTI0_IRQHandler+0x54>)
 800032c:	f7ff ff90 	bl	8000250 <delay>
			GPIOD->ODR = 0x00000000; //  PD ALL OFF
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <EXTI0_IRQHandler+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
			delay(1680000);
 8000336:	480a      	ldr	r0, [pc, #40]	; (8000360 <EXTI0_IRQHandler+0x54>)
 8000338:	f7ff ff8a 	bl	8000250 <delay>
			i++;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	3301      	adds	r3, #1
 8000340:	607b      	str	r3, [r7, #4]

		}while(i<5);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2b04      	cmp	r3, #4
 8000346:	ddec      	ble.n	8000322 <EXTI0_IRQHandler+0x16>
		EXTI->PR = (1<<0);
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI0_IRQHandler+0x4c>)
 800034a:	2201      	movs	r2, #1
 800034c:	615a      	str	r2, [r3, #20]

	}

}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40013c00 	.word	0x40013c00
 800035c:	40020c00 	.word	0x40020c00
 8000360:	0019a280 	.word	0x0019a280

08000364 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<1) ){ // ben böyle yaptým: 0x00000002 , hoca farklý yaptý ,1: selected trigger request occurred PR0 için
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <EXTI1_IRQHandler+0x4c>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	2b00      	cmp	r3, #0
 8000374:	d017      	beq.n	80003a6 <EXTI1_IRQHandler+0x42>
		int i=0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
		do{
			GPIOD->ODR = 0x00002000; //PD13 ON, PAGE 283
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <EXTI1_IRQHandler+0x50>)
 800037c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000380:	615a      	str	r2, [r3, #20]
			delay(1680000);
 8000382:	480d      	ldr	r0, [pc, #52]	; (80003b8 <EXTI1_IRQHandler+0x54>)
 8000384:	f7ff ff64 	bl	8000250 <delay>
			GPIOD->ODR = 0x00000000; // PD ALL OFF
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI1_IRQHandler+0x50>)
 800038a:	2200      	movs	r2, #0
 800038c:	615a      	str	r2, [r3, #20]
			delay(1680000);
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <EXTI1_IRQHandler+0x54>)
 8000390:	f7ff ff5e 	bl	8000250 <delay>
			i++;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3301      	adds	r3, #1
 8000398:	607b      	str	r3, [r7, #4]

		}while(i<5);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2b04      	cmp	r3, #4
 800039e:	ddec      	ble.n	800037a <EXTI1_IRQHandler+0x16>
		EXTI->PR = (1<<1);
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI1_IRQHandler+0x4c>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	615a      	str	r2, [r3, #20]

	}
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40013c00 	.word	0x40013c00
 80003b4:	40020c00 	.word	0x40020c00
 80003b8:	0019a280 	.word	0x0019a280

080003bc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<2)){ //ben böyle yaptým: 0x00000004, 1: selected trigger request occurred PR0 için
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <EXTI2_IRQHandler+0x4c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d017      	beq.n	80003fe <EXTI2_IRQHandler+0x42>
		int i=0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
		do{
			GPIOD->ODR = 0x00004000; //PD12 ON, PAGE 283
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <EXTI2_IRQHandler+0x50>)
 80003d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003d8:	615a      	str	r2, [r3, #20]
			delay(1680000);
 80003da:	480d      	ldr	r0, [pc, #52]	; (8000410 <EXTI2_IRQHandler+0x54>)
 80003dc:	f7ff ff38 	bl	8000250 <delay>
			GPIOD->ODR = 0x00000000; //  PD ALL OFF
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <EXTI2_IRQHandler+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
			delay(1680000);
 80003e6:	480a      	ldr	r0, [pc, #40]	; (8000410 <EXTI2_IRQHandler+0x54>)
 80003e8:	f7ff ff32 	bl	8000250 <delay>
			i++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3301      	adds	r3, #1
 80003f0:	607b      	str	r3, [r7, #4]

		}while(i<5);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b04      	cmp	r3, #4
 80003f6:	ddec      	ble.n	80003d2 <EXTI2_IRQHandler+0x16>
		EXTI->PR = (1<<2);
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <EXTI2_IRQHandler+0x4c>)
 80003fa:	2204      	movs	r2, #4
 80003fc:	615a      	str	r2, [r3, #20]

	}
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40013c00 	.word	0x40013c00
 800040c:	40020c00 	.word	0x40020c00
 8000410:	0019a280 	.word	0x0019a280

08000414 <main>:


int main(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

	gpio_config();
 8000418:	f7ff ff2a 	bl	8000270 <gpio_config>
	exti_config();
 800041c:	f7ff ff44 	bl	80002a8 <exti_config>

  while (1){
 8000420:	e7fe      	b.n	8000420 <main+0xc>
	...

08000424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800042a:	e003      	b.n	8000434 <LoopCopyDataInit>

0800042c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800042e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000432:	3104      	adds	r1, #4

08000434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800043a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800043c:	d3f6      	bcc.n	800042c <CopyDataInit>
  ldr  r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000440:	e002      	b.n	8000448 <LoopFillZerobss>

08000442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000444:	f842 3b04 	str.w	r3, [r2], #4

08000448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800044a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800044c:	d3f9      	bcc.n	8000442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800044e:	f000 f841 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 f8f1 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000456:	f7ff ffdd 	bl	8000414 <main>
  bx  lr    
 800045a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800045c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000460:	080006a0 	.word	0x080006a0
  ldr  r0, =_sdata
 8000464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000468:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800046c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000470:	2000001c 	.word	0x2000001c

08000474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC_IRQHandler>

08000476 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000488:	e7fe      	b.n	8000488 <HardFault_Handler+0x4>

0800048a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800048e:	e7fe      	b.n	800048e <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000494:	e7fe      	b.n	8000494 <BusFault_Handler+0x4>

08000496 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800049a:	e7fe      	b.n	800049a <UsageFault_Handler+0x4>

0800049c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <SystemInit+0x60>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <SystemInit+0x60>)
 80004dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e8:	4a13      	ldr	r2, [pc, #76]	; (8000538 <SystemInit+0x64>)
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <SystemInit+0x64>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <SystemInit+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <SystemInit+0x64>)
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <SystemInit+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <SystemInit+0x64>)
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <SystemInit+0x68>)
 800050e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <SystemInit+0x64>)
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <SystemInit+0x64>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SystemInit+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000522:	f000 f80d 	bl	8000540 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000526:	4b03      	ldr	r3, [pc, #12]	; (8000534 <SystemInit+0x60>)
 8000528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800052c:	609a      	str	r2, [r3, #8]
#endif
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00
 8000538:	40023800 	.word	0x40023800
 800053c:	24003010 	.word	0x24003010

08000540 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800054e:	4a36      	ldr	r2, [pc, #216]	; (8000628 <SetSysClock+0xe8>)
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <SetSysClock+0xe8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000558:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <SetSysClock+0xe8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <SetSysClock+0x38>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000576:	d1f0      	bne.n	800055a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SetSysClock+0xe8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000584:	2301      	movs	r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	e001      	b.n	800058e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d142      	bne.n	800061a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000594:	4a24      	ldr	r2, [pc, #144]	; (8000628 <SetSysClock+0xe8>)
 8000596:	4b24      	ldr	r3, [pc, #144]	; (8000628 <SetSysClock+0xe8>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <SetSysClock+0xec>)
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <SetSysClock+0xec>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005ac:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <SetSysClock+0xe8>)
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <SetSysClock+0xe8>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <SetSysClock+0xe8>)
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <SetSysClock+0xe8>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005be:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <SetSysClock+0xe8>)
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <SetSysClock+0xe8>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005ca:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <SetSysClock+0xe8>)
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <SetSysClock+0xf0>)
 80005d0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <SetSysClock+0xe8>)
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <SetSysClock+0xe8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005dc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005de:	bf00      	nop
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <SetSysClock+0xe8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f9      	beq.n	80005e0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <SetSysClock+0xf4>)
 80005ee:	f240 7205 	movw	r2, #1797	; 0x705
 80005f2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <SetSysClock+0xe8>)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <SetSysClock+0xe8>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f023 0303 	bic.w	r3, r3, #3
 80005fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <SetSysClock+0xe8>)
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <SetSysClock+0xe8>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800060c:	bf00      	nop
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <SetSysClock+0xe8>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	f003 030c 	and.w	r3, r3, #12
 8000616:	2b08      	cmp	r3, #8
 8000618:	d1f9      	bne.n	800060e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000
 8000630:	07405408 	.word	0x07405408
 8000634:	40023c00 	.word	0x40023c00

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4e0d      	ldr	r6, [pc, #52]	; (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	; (8000674 <__libc_init_array+0x3c>)
 800063e:	1ba4      	subs	r4, r4, r6
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2500      	movs	r5, #0
 8000644:	42a5      	cmp	r5, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4e0b      	ldr	r6, [pc, #44]	; (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	; (800067c <__libc_init_array+0x44>)
 800064c:	f000 f818 	bl	8000680 <_init>
 8000650:	1ba4      	subs	r4, r4, r6
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2500      	movs	r5, #0
 8000656:	42a5      	cmp	r5, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000660:	4798      	blx	r3
 8000662:	3501      	adds	r5, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800066a:	4798      	blx	r3
 800066c:	3501      	adds	r5, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08000698 	.word	0x08000698
 8000674:	08000698 	.word	0x08000698
 8000678:	08000698 	.word	0x08000698
 800067c:	0800069c 	.word	0x0800069c

08000680 <_init>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr

0800068c <_fini>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr
