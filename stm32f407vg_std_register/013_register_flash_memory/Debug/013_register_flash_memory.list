
013_register_flash_memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000654  08000654  00010654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010658  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010658  2**0
                  CONTENTS, READONLY
 10 .debug_info   00000b74  00000000  00000000  00010688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000031f  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000108  00000000  00000000  00011520  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00011628  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000713  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000004e3  00000000  00000000  00011e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000122ee  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000002b4  00000000  00000000  0001236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00012620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000638 	.word	0x08000638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000638 	.word	0x08000638

080001c8 <RCC_Config>:
#include "stm32f4xx.h"


uint32_t data; // flash dan cekilecek veri data ya aktarýlacak.

void RCC_Config(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	RCC->CR |= 0x00030000;										// HSEON and HSEONRDY enable
 80001cc:	4a27      	ldr	r2, [pc, #156]	; (800026c <RCC_Config+0xa4>)
 80001ce:	4b27      	ldr	r3, [pc, #156]	; (800026c <RCC_Config+0xa4>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80001d6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));								// HSEON Ready Flag wait
 80001d8:	bf00      	nop
 80001da:	4b24      	ldr	r3, [pc, #144]	; (800026c <RCC_Config+0xa4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <RCC_Config+0x12>
	RCC->CR |= 0x00080000;										// CSS Enable
 80001e6:	4a21      	ldr	r2, [pc, #132]	; (800026c <RCC_Config+0xa4>)
 80001e8:	4b20      	ldr	r3, [pc, #128]	; (800026c <RCC_Config+0xa4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f0:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000;										// PLL ON
 80001f2:	4a1e      	ldr	r2, [pc, #120]	; (800026c <RCC_Config+0xa4>)
 80001f4:	4b1d      	ldr	r3, [pc, #116]	; (800026c <RCC_Config+0xa4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001fc:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;									// PLL e HSE seçtik
 80001fe:	4a1b      	ldr	r2, [pc, #108]	; (800026c <RCC_Config+0xa4>)
 8000200:	4b1a      	ldr	r3, [pc, #104]	; (800026c <RCC_Config+0xa4>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000208:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;									// PLL M = 4
 800020a:	4a18      	ldr	r2, [pc, #96]	; (800026c <RCC_Config+0xa4>)
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <RCC_Config+0xa4>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;									// Pll N = 168
 8000216:	4a15      	ldr	r2, [pc, #84]	; (800026c <RCC_Config+0xa4>)
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <RCC_Config+0xa4>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000220:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;									// PLL p = 2
 8000222:	4a12      	ldr	r2, [pc, #72]	; (800026c <RCC_Config+0xa4>)
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <RCC_Config+0xa4>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;									// AHB Prescaler = 1
 800022a:	4a10      	ldr	r2, [pc, #64]	; (800026c <RCC_Config+0xa4>)
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <RCC_Config+0xa4>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;									// APB2 Prescaler = 2
 8000232:	4a0e      	ldr	r2, [pc, #56]	; (800026c <RCC_Config+0xa4>)
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <RCC_Config+0xa4>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800023c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;									// APB1 Prescaler = 4
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <RCC_Config+0xa4>)
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <RCC_Config+0xa4>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00080000;										// HSERDY Flag clear
 800024a:	4a08      	ldr	r2, [pc, #32]	; (800026c <RCC_Config+0xa4>)
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <RCC_Config+0xa4>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000254:	60d3      	str	r3, [r2, #12]
	RCC->CIR |= 0x00800000;										// CSS Flag clear
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <RCC_Config+0xa4>)
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <RCC_Config+0xa4>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000260:	60d3      	str	r3, [r2, #12]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	40023800 	.word	0x40023800

08000270 <FLASH_UnLocker>:


void FLASH_UnLocker(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

	FLASH->KEYR = 0x45670123;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <FLASH_UnLocker+0x1c>)
 8000276:	4a06      	ldr	r2, [pc, #24]	; (8000290 <FLASH_UnLocker+0x20>)
 8000278:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <FLASH_UnLocker+0x1c>)
 800027c:	4a05      	ldr	r2, [pc, #20]	; (8000294 <FLASH_UnLocker+0x24>)
 800027e:	605a      	str	r2, [r3, #4]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023c00 	.word	0x40023c00
 8000290:	45670123 	.word	0x45670123
 8000294:	cdef89ab 	.word	0xcdef89ab

08000298 <FLASH_Erase>:


void FLASH_Erase(){
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

	while((FLASH->SR & 0x00010000) != 0); // binary :0x0001000 hex : 0x10
 800029c:	bf00      	nop
 800029e:	4b13      	ldr	r3, [pc, #76]	; (80002ec <FLASH_Erase+0x54>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f9      	bne.n	800029e <FLASH_Erase+0x6>
	FLASH->CR != 1<< 1; // SER set,1 yaptýk
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <FLASH_Erase+0x54>)
 80002ac:	691b      	ldr	r3, [r3, #16]
	FLASH->CR != 11 << 3; // sector 11
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <FLASH_Erase+0x54>)
 80002b0:	691b      	ldr	r3, [r3, #16]
	FLASH->CR != 1 << 16;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <FLASH_Erase+0x54>)
 80002b4:	691b      	ldr	r3, [r3, #16]

	while((FLASH->SR & 0x00010000) != 0);
 80002b6:	bf00      	nop
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <FLASH_Erase+0x54>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f9      	bne.n	80002b8 <FLASH_Erase+0x20>

	if((FLASH->SR & 0x00000001) != 0){ // end of operaion writing/erasing iþlemi yapýldýgýnda 1 olur
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <FLASH_Erase+0x54>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <FLASH_Erase+0x3c>
		FLASH->SR !=0x00000001; // end of operation bitini temizleme iþlemi o biti 1 yaparak gercekleþtirilir.
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <FLASH_Erase+0x54>)
 80002d2:	68db      	ldr	r3, [r3, #12]
	}else{
		//silme islemi gercekleþmedi,oled ekrana felan belki bir þey yazdýrýrsýn burdan
	}
	FLASH->CR &= ~1 <<1; // SER reset,0 yaptýk
 80002d4:	4a05      	ldr	r2, [pc, #20]	; (80002ec <FLASH_Erase+0x54>)
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <FLASH_Erase+0x54>)
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	f023 0303 	bic.w	r3, r3, #3
 80002de:	6113      	str	r3, [r2, #16]

}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40023c00 	.word	0x40023c00

080002f0 <FLASH_Write>:


void FLASH_Write(uint32_t address,uint32_t data){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]

	while((FLASH->SR & 0x00010000) != 0); // busy mi degilmi diye kontrol ediyor
 80002fa:	bf00      	nop
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <FLASH_Write+0x6c>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f9      	bne.n	80002fc <FLASH_Write+0xc>
	FLASH->CR != 1 << 0; // PG set,1 yaptýk,flash program activated
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <FLASH_Write+0x6c>)
 800030a:	691b      	ldr	r3, [r3, #16]
	FLASH->CR != 2 << 8; // Psize 32bit yaptýk, 8bit sola ötele ve 2 yaz dedik ,binary:0010 demek 4 bitlik yerde
 800030c:	4b13      	ldr	r3, [pc, #76]	; (800035c <FLASH_Write+0x6c>)
 800030e:	691b      	ldr	r3, [r3, #16]
	while((FLASH->SR & 0x00010000) != 0);
 8000310:	bf00      	nop
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <FLASH_Write+0x6c>)
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800031a:	2b00      	cmp	r3, #0
 800031c:	d1f9      	bne.n	8000312 <FLASH_Write+0x22>


	*(__IO uint32_t*)address=data; //  (__IO uint32_t*) adress i 32bit e cevirdik,istersen yazma dedi,
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	601a      	str	r2, [r3, #0]


while((FLASH->SR & 0x00010000) != 0);
 8000324:	bf00      	nop
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <FLASH_Write+0x6c>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f9      	bne.n	8000326 <FLASH_Write+0x36>

	if((FLASH->SR & 0x00000001) != 0){ // end of operaion writing/erasing iþlemi yapýldýgýnda 1 olur
 8000332:	4b0a      	ldr	r3, [pc, #40]	; (800035c <FLASH_Write+0x6c>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <FLASH_Write+0x52>
		FLASH->SR !=0x00000001; // end of operation bitini temizleme iþlemi o biti 1 yaparak gercekleþtirilir.
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <FLASH_Write+0x6c>)
 8000340:	68db      	ldr	r3, [r3, #12]
	}else{
		//silme islemi gercekleþmedi,oled ekrana felan belki bir þey yazdýrýrsýn burdan
	}
	FLASH->CR &= (~1 << 0); // PG reset,0 yaptýk
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <FLASH_Write+0x6c>)
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <FLASH_Write+0x6c>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	f023 0301 	bic.w	r3, r3, #1
 800034c:	6113      	str	r3, [r2, #16]

}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023c00 	.word	0x40023c00

08000360 <FLASH_Read>:


uint32_t FLASH_Read(uint32_t address){
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	uint32_t myFlashData;
	myFlashData = *(uint32_t*)address; // yada direk *address yaz ,garanti olsun diye böyle yaptý
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	60fb      	str	r3, [r7, #12]
	return myFlashData;;
 800036e:	68fb      	ldr	r3, [r7, #12]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <FLASH_Locker>:


void FLASH_Locker(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	while((FLASH->SR & 0x00010000) != 0);
 8000380:	bf00      	nop
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <FLASH_Locker+0x20>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800038a:	2b00      	cmp	r3, #0
 800038c:	d1f9      	bne.n	8000382 <FLASH_Locker+0x6>
	FLASH->CR != 1 <<31; // lockladýk flash lý
 800038e:	4b03      	ldr	r3, [pc, #12]	; (800039c <FLASH_Locker+0x20>)
 8000390:	691b      	ldr	r3, [r3, #16]
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40023c00 	.word	0x40023c00

080003a0 <main>:

int main(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

	RCC_Config();
 80003a4:	f7ff ff10 	bl	80001c8 <RCC_Config>
	FLASH_UnLocker();
 80003a8:	f7ff ff62 	bl	8000270 <FLASH_UnLocker>
	FLASH_Erase();
 80003ac:	f7ff ff74 	bl	8000298 <FLASH_Erase>
	FLASH_Write(0x080E0000,0xCC);
 80003b0:	21cc      	movs	r1, #204	; 0xcc
 80003b2:	4808      	ldr	r0, [pc, #32]	; (80003d4 <main+0x34>)
 80003b4:	f7ff ff9c 	bl	80002f0 <FLASH_Write>
	FLASH_Locker();
 80003b8:	f7ff ffe0 	bl	800037c <FLASH_Locker>
	FLASH_UnLocker();
 80003bc:	f7ff ff58 	bl	8000270 <FLASH_UnLocker>
	data=FLASH_Read(0x080E0000);
 80003c0:	4804      	ldr	r0, [pc, #16]	; (80003d4 <main+0x34>)
 80003c2:	f7ff ffcd 	bl	8000360 <FLASH_Read>
 80003c6:	4602      	mov	r2, r0
 80003c8:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <main+0x38>)
 80003ca:	601a      	str	r2, [r3, #0]
	FLASH_Locker();
 80003cc:	f7ff ffd6 	bl	800037c <FLASH_Locker>

	while(1){
 80003d0:	e7fe      	b.n	80003d0 <main+0x30>
 80003d2:	bf00      	nop
 80003d4:	080e0000 	.word	0x080e0000
 80003d8:	2000001c 	.word	0x2000001c

080003dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000414 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003e2:	e003      	b.n	80003ec <LoopCopyDataInit>

080003e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ea:	3104      	adds	r1, #4

080003ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003ec:	480b      	ldr	r0, [pc, #44]	; (800041c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003f4:	d3f6      	bcc.n	80003e4 <CopyDataInit>
  ldr  r2, =_sbss
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003f8:	e002      	b.n	8000400 <LoopFillZerobss>

080003fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003fc:	f842 3b04 	str.w	r3, [r2], #4

08000400 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000402:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000404:	d3f9      	bcc.n	80003fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000406:	f000 f841 	bl	800048c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040a:	f000 f8f1 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800040e:	f7ff ffc7 	bl	80003a0 <main>
  bx  lr    
 8000412:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000414:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000418:	08000658 	.word	0x08000658
  ldr  r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000420:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000428:	20000020 	.word	0x20000020

0800042c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>

0800042e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000440:	e7fe      	b.n	8000440 <HardFault_Handler+0x4>

08000442 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000446:	e7fe      	b.n	8000446 <MemManage_Handler+0x4>

08000448 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800044c:	e7fe      	b.n	800044c <BusFault_Handler+0x4>

0800044e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000452:	e7fe      	b.n	8000452 <UsageFault_Handler+0x4>

08000454 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000490:	4a16      	ldr	r2, [pc, #88]	; (80004ec <SystemInit+0x60>)
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <SystemInit+0x60>)
 8000494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800049c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <SystemInit+0x64>)
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <SystemInit+0x64>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <SystemInit+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004b2:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <SystemInit+0x64>)
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <SystemInit+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <SystemInit+0x64>)
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <SystemInit+0x68>)
 80004c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c8:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <SystemInit+0x64>)
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <SystemInit+0x64>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <SystemInit+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80004da:	f000 f80d 	bl	80004f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <SystemInit+0x60>)
 80004e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004e4:	609a      	str	r2, [r3, #8]
#endif
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00
 80004f0:	40023800 	.word	0x40023800
 80004f4:	24003010 	.word	0x24003010

080004f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000506:	4a36      	ldr	r2, [pc, #216]	; (80005e0 <SetSysClock+0xe8>)
 8000508:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <SetSysClock+0xe8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000510:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <SetSysClock+0xe8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3301      	adds	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d103      	bne.n	8000530 <SetSysClock+0x38>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800052e:	d1f0      	bne.n	8000512 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <SetSysClock+0xe8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800053c:	2301      	movs	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	e001      	b.n	8000546 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d142      	bne.n	80005d2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800054c:	4a24      	ldr	r2, [pc, #144]	; (80005e0 <SetSysClock+0xe8>)
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SetSysClock+0xe8>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000558:	4a22      	ldr	r2, [pc, #136]	; (80005e4 <SetSysClock+0xec>)
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SetSysClock+0xec>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000564:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <SetSysClock+0xe8>)
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <SetSysClock+0xe8>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800056c:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <SetSysClock+0xe8>)
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SetSysClock+0xe8>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000578:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <SetSysClock+0xe8>)
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SetSysClock+0xe8>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000582:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <SetSysClock+0xe8>)
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <SetSysClock+0xf0>)
 8000588:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <SetSysClock+0xe8>)
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <SetSysClock+0xe8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000594:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000596:	bf00      	nop
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <SetSysClock+0xe8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0f9      	beq.n	8000598 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <SetSysClock+0xf4>)
 80005a6:	f240 7205 	movw	r2, #1797	; 0x705
 80005aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <SetSysClock+0xe8>)
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <SetSysClock+0xe8>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f023 0303 	bic.w	r3, r3, #3
 80005b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <SetSysClock+0xe8>)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <SetSysClock+0xe8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f043 0302 	orr.w	r3, r3, #2
 80005c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005c4:	bf00      	nop
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SetSysClock+0xe8>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 030c 	and.w	r3, r3, #12
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d1f9      	bne.n	80005c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000
 80005e8:	07405419 	.word	0x07405419
 80005ec:	40023c00 	.word	0x40023c00

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	4e0d      	ldr	r6, [pc, #52]	; (8000628 <__libc_init_array+0x38>)
 80005f4:	4c0d      	ldr	r4, [pc, #52]	; (800062c <__libc_init_array+0x3c>)
 80005f6:	1ba4      	subs	r4, r4, r6
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	2500      	movs	r5, #0
 80005fc:	42a5      	cmp	r5, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	4e0b      	ldr	r6, [pc, #44]	; (8000630 <__libc_init_array+0x40>)
 8000602:	4c0c      	ldr	r4, [pc, #48]	; (8000634 <__libc_init_array+0x44>)
 8000604:	f000 f818 	bl	8000638 <_init>
 8000608:	1ba4      	subs	r4, r4, r6
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	2500      	movs	r5, #0
 800060e:	42a5      	cmp	r5, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000618:	4798      	blx	r3
 800061a:	3501      	adds	r5, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000622:	4798      	blx	r3
 8000624:	3501      	adds	r5, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
