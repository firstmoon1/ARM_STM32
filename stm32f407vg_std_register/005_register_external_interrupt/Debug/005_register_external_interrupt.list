
005_register_external_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000690  08000698  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010698  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY
 10 .debug_info   000011db  00000000  00000000  000106c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000396  00000000  00000000  000118a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000120  00000000  00000000  00011c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00011d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000732  00000000  00000000  00011e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000aca  00000000  00000000  0001257a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00013044  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000318  00000000  00000000  000130c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000133d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000678 	.word	0x08000678

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000678 	.word	0x08000678

080001c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <NVIC_EnableIRQ+0x30>)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	f002 021f 	and.w	r2, r2, #31
 80001e0:	2001      	movs	r0, #1
 80001e2:	fa00 f202 	lsl.w	r2, r0, r2
 80001e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	490d      	ldr	r1, [pc, #52]	; (8000248 <NVIC_SetPriority+0x4c>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	3b04      	subs	r3, #4
 800021a:	683a      	ldr	r2, [r7, #0]
 800021c:	b2d2      	uxtb	r2, r2
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	4908      	ldr	r1, [pc, #32]	; (800024c <NVIC_SetPriority+0x50>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <CLK_Config>:
{
	while(time--);
}

void CLK_Config()
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00030000;	// HSEON and HSEONRDY enable
 8000254:	4a21      	ldr	r2, [pc, #132]	; (80002dc <CLK_Config+0x8c>)
 8000256:	4b21      	ldr	r3, [pc, #132]	; (80002dc <CLK_Config+0x8c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800025e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));	// HSEON Ready Flag wait
 8000260:	bf00      	nop
 8000262:	4b1e      	ldr	r3, [pc, #120]	; (80002dc <CLK_Config+0x8c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <CLK_Config+0x12>
	RCC->CR |= 0x00080000;	// CSS Enable
 800026e:	4a1b      	ldr	r2, [pc, #108]	; (80002dc <CLK_Config+0x8c>)
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <CLK_Config+0x8c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000278:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;	// PLL e HSE seçtik
 800027a:	4a18      	ldr	r2, [pc, #96]	; (80002dc <CLK_Config+0x8c>)
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <CLK_Config+0x8c>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000284:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;	// PLL M = 4
 8000286:	4a15      	ldr	r2, [pc, #84]	; (80002dc <CLK_Config+0x8c>)
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <CLK_Config+0x8c>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;	// Pll N = 168,yanlýþ a.q 5A ya bak 90 veriyor 168 degil ,5A yerine 2A olmasý gerek 168 için 0000 0000 0000 0000 0010 1010 0000 0000 dir aslýnda
 8000292:	4a12      	ldr	r2, [pc, #72]	; (80002dc <CLK_Config+0x8c>)
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <CLK_Config+0x8c>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 800029c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;	// PLL p = 2
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <CLK_Config+0x8c>)
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <CLK_Config+0x8c>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;	// AHB Prescaler = 1
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <CLK_Config+0x8c>)
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <CLK_Config+0x8c>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;	// APB2 Prescaler = 2
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <CLK_Config+0x8c>)
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <CLK_Config+0x8c>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002b8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;	// APB1 Prescaler = 4
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <CLK_Config+0x8c>)
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <CLK_Config+0x8c>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002c4:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00800000;		// CSS Flag clear
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <CLK_Config+0x8c>)
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <CLK_Config+0x8c>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002d0:	60d3      	str	r3, [r2, #12]
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	40023800 	.word	0x40023800

080002e0 <GPIO_Config>:

void GPIO_Config()
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR = 0x00000009;	// GPIOA and GPIOD active
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <GPIO_Config+0x30>)
 80002e6:	2209      	movs	r2, #9
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30

	GPIOD->MODER = 0x55000000;	// GPIOD pin12,pin13,pin14,pin15 output
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <GPIO_Config+0x34>)
 80002ec:	f04f 42aa 	mov.w	r2, #1426063360	; 0x55000000
 80002f0:	601a      	str	r2, [r3, #0]
	GPIOD->OTYPER = 0x00000000;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <GPIO_Config+0x34>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0xFF000000;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <GPIO_Config+0x34>)
 80002fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80002fe:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0x00000000;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <GPIO_Config+0x34>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40023800 	.word	0x40023800
 8000314:	40020c00 	.word	0x40020c00

08000318 <EXTI_Config>:

void EXTI_Config()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	RCC->APB2ENR = 0x00004000;	// SYSCFG active (exti), page 249
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <EXTI_Config+0x4c>)
 800031e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000322:	645a      	str	r2, [r3, #68]	; 0x44

	SYSCFG->EXTICR[0] = 0x00000000; // PA0,PA1,PA2 yi kullandýgýmýz için EXTICR[x] de x=0 yaptýk ,page 291
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <EXTI_Config+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]

	NVIC_EnableIRQ(EXTI0_IRQn); // bunlarý bulamadý hoca kitaptan,  ama  nvic de enable ediyoruz þey gibi düþün ,init þurdan geldi NVIC_InitTypeDef init;,  ,init.NVIC_IRQChannel=EXTI1_IRQn;
 800032a:	2006      	movs	r0, #6
 800032c:	f7ff ff4c 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn); // The function enables a device-specific interrupt in the NVIC interrupt controller.
 8000330:	2007      	movs	r0, #7
 8000332:	f7ff ff49 	bl	80001c8 <NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8000336:	2008      	movs	r0, #8
 8000338:	f7ff ff46 	bl	80001c8 <NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI0_IRQn, 0); // externel interrupt0 priority 0 (very high) , The function sets the priority of an interrupt.
 800033c:	2100      	movs	r1, #0
 800033e:	2006      	movs	r0, #6
 8000340:	f7ff ff5c 	bl	80001fc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI1_IRQn, 1); // external interrupt1 priority 1 (high)
 8000344:	2101      	movs	r1, #1
 8000346:	2007      	movs	r0, #7
 8000348:	f7ff ff58 	bl	80001fc <NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn, 2); // external interrupt2 priority 2 (low)
 800034c:	2102      	movs	r1, #2
 800034e:	2008      	movs	r0, #8
 8000350:	f7ff ff54 	bl	80001fc <NVIC_SetPriority>

	EXTI->IMR = 0x00000007;  // Interrupt mask register (EXTI_IMR),3 buton interrupt,hex kodunda 0x7 = 0111 dir,3 buton için ilk 3 bit 1 yaptýk,page 384
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI_Config+0x54>)
 8000356:	2207      	movs	r2, #7
 8000358:	601a      	str	r2, [r3, #0]
	EXTI->RTSR = 0x00000007; // Rising trigger selection register,page 385
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <EXTI_Config+0x54>)
 800035c:	2207      	movs	r2, #7
 800035e:	609a      	str	r2, [r3, #8]
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40023800 	.word	0x40023800
 8000368:	40013800 	.word	0x40013800
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000001)   // interrupt flag active  ,page 386
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <EXTI0_IRQHandler+0x28>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d003      	beq.n	8000388 <EXTI0_IRQHandler+0x18>
	{
	    GPIOD->ODR = 0x00001000; // gpiod pin 12 set other reset ,page 283
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <EXTI0_IRQHandler+0x2c>)
 8000382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000386:	615a      	str	r2, [r3, #20]
	}
	EXTI->PR = 0x00000001;      // interrupt flag reset
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI0_IRQHandler+0x28>)
 800038a:	2201      	movs	r2, #1
 800038c:	615a      	str	r2, [r3, #20]

}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40013c00 	.word	0x40013c00
 800039c:	40020c00 	.word	0x40020c00

080003a0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000002)
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <EXTI1_IRQHandler+0x28>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	f003 0302 	and.w	r3, r3, #2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <EXTI1_IRQHandler+0x18>
	{
	    GPIOD->ODR = 0x00002000; // GPIOD pin 13 set other reset
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <EXTI1_IRQHandler+0x2c>)
 80003b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003b6:	615a      	str	r2, [r3, #20]
	}
	EXTI->PR = 0x00000002;
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <EXTI1_IRQHandler+0x28>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	615a      	str	r2, [r3, #20]
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40013c00 	.word	0x40013c00
 80003cc:	40020c00 	.word	0x40020c00

080003d0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000004)
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <EXTI2_IRQHandler+0x28>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d003      	beq.n	80003e8 <EXTI2_IRQHandler+0x18>
	{
	    GPIOD->ODR = 0x00004000; // GPIOD pin 14 set other reset
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <EXTI2_IRQHandler+0x2c>)
 80003e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e6:	615a      	str	r2, [r3, #20]
	}
	EXTI->PR = 0x00000004;
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <EXTI2_IRQHandler+0x28>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	615a      	str	r2, [r3, #20]
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40013c00 	.word	0x40013c00
 80003fc:	40020c00 	.word	0x40020c00

08000400 <main>:

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    CLK_Config();
 8000404:	f7ff ff24 	bl	8000250 <CLK_Config>
    GPIO_Config();
 8000408:	f7ff ff6a 	bl	80002e0 <GPIO_Config>
    EXTI_Config();
 800040c:	f7ff ff84 	bl	8000318 <EXTI_Config>
    GPIOD->ODR = 0x00000000;   // reset all pins
 8000410:	4b01      	ldr	r3, [pc, #4]	; (8000418 <main+0x18>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
  while (1)
 8000416:	e7fe      	b.n	8000416 <main+0x16>
 8000418:	40020c00 	.word	0x40020c00

0800041c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800041c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000422:	e003      	b.n	800042c <LoopCopyDataInit>

08000424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800042a:	3104      	adds	r1, #4

0800042c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000434:	d3f6      	bcc.n	8000424 <CopyDataInit>
  ldr  r2, =_sbss
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000438:	e002      	b.n	8000440 <LoopFillZerobss>

0800043a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800043a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800043c:	f842 3b04 	str.w	r3, [r2], #4

08000440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000444:	d3f9      	bcc.n	800043a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000446:	f000 f841 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800044a:	f000 f8f1 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800044e:	f7ff ffd7 	bl	8000400 <main>
  bx  lr    
 8000452:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000454:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000458:	08000698 	.word	0x08000698
  ldr  r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000460:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000464:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000468:	2000001c 	.word	0x2000001c

0800046c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>

0800046e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000480:	e7fe      	b.n	8000480 <HardFault_Handler+0x4>

08000482 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000486:	e7fe      	b.n	8000486 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800048c:	e7fe      	b.n	800048c <BusFault_Handler+0x4>

0800048e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000492:	e7fe      	b.n	8000492 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d0:	4a16      	ldr	r2, [pc, #88]	; (800052c <SystemInit+0x60>)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <SystemInit+0x60>)
 80004d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <SystemInit+0x64>)
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <SystemInit+0x64>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <SystemInit+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <SystemInit+0x64>)
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <SystemInit+0x64>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <SystemInit+0x64>)
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <SystemInit+0x68>)
 8000506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <SystemInit+0x64>)
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <SystemInit+0x64>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <SystemInit+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800051a:	f000 f80d 	bl	8000538 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800051e:	4b03      	ldr	r3, [pc, #12]	; (800052c <SystemInit+0x60>)
 8000520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000524:	609a      	str	r2, [r3, #8]
#endif
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	e000ed00 	.word	0xe000ed00
 8000530:	40023800 	.word	0x40023800
 8000534:	24003010 	.word	0x24003010

08000538 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	2300      	movs	r3, #0
 8000544:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000546:	4a36      	ldr	r2, [pc, #216]	; (8000620 <SetSysClock+0xe8>)
 8000548:	4b35      	ldr	r3, [pc, #212]	; (8000620 <SetSysClock+0xe8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000550:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000552:	4b33      	ldr	r3, [pc, #204]	; (8000620 <SetSysClock+0xe8>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <SetSysClock+0x38>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800056e:	d1f0      	bne.n	8000552 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <SetSysClock+0xe8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000578:	2b00      	cmp	r3, #0
 800057a:	d002      	beq.n	8000582 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800057c:	2301      	movs	r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	e001      	b.n	8000586 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d142      	bne.n	8000612 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <SetSysClock+0xe8>)
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SetSysClock+0xe8>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <SetSysClock+0xec>)
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SetSysClock+0xec>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <SetSysClock+0xe8>)
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <SetSysClock+0xe8>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80005ac:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <SetSysClock+0xe8>)
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <SetSysClock+0xe8>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80005b8:	4a19      	ldr	r2, [pc, #100]	; (8000620 <SetSysClock+0xe8>)
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SetSysClock+0xe8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80005c2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <SetSysClock+0xe8>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	; (8000628 <SetSysClock+0xf0>)
 80005c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <SetSysClock+0xe8>)
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <SetSysClock+0xe8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005d6:	bf00      	nop
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <SetSysClock+0xe8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <SetSysClock+0xf4>)
 80005e6:	f240 7205 	movw	r2, #1797	; 0x705
 80005ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005ec:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <SetSysClock+0xe8>)
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <SetSysClock+0xe8>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f023 0303 	bic.w	r3, r3, #3
 80005f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <SetSysClock+0xe8>)
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <SetSysClock+0xe8>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000604:	bf00      	nop
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <SetSysClock+0xe8>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f003 030c 	and.w	r3, r3, #12
 800060e:	2b08      	cmp	r3, #8
 8000610:	d1f9      	bne.n	8000606 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000
 8000628:	07405419 	.word	0x07405419
 800062c:	40023c00 	.word	0x40023c00

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4e0d      	ldr	r6, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1ba4      	subs	r4, r4, r6
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2500      	movs	r5, #0
 800063c:	42a5      	cmp	r5, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4e0b      	ldr	r6, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 f818 	bl	8000678 <_init>
 8000648:	1ba4      	subs	r4, r4, r6
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2500      	movs	r5, #0
 800064e:	42a5      	cmp	r5, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000658:	4798      	blx	r3
 800065a:	3501      	adds	r5, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000662:	4798      	blx	r3
 8000664:	3501      	adds	r5, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	08000690 	.word	0x08000690
 800066c:	08000690 	.word	0x08000690
 8000670:	08000690 	.word	0x08000690
 8000674:	08000694 	.word	0x08000694

08000678 <_init>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr

08000684 <_fini>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr
