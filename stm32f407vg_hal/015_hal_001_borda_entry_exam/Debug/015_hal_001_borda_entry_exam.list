
015_hal_001_borda_entry_exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800eeec  0800eeec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e4  0800f0e4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800f0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00003f40  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004040  20004040  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f9c4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004732  00000000  00000000  0003faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00044228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001960  00000000  00000000  00045d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027117  00000000  00000000  000476d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000237db  00000000  00000000  0006e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d650f  00000000  00000000  00091fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001684d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007408  00000000  00000000  0016852c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800eed4 	.word	0x0800eed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	0800eed4 	.word	0x0800eed4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_uldivmod>:
 8000844:	b953      	cbnz	r3, 800085c <__aeabi_uldivmod+0x18>
 8000846:	b94a      	cbnz	r2, 800085c <__aeabi_uldivmod+0x18>
 8000848:	2900      	cmp	r1, #0
 800084a:	bf08      	it	eq
 800084c:	2800      	cmpeq	r0, #0
 800084e:	bf1c      	itt	ne
 8000850:	f04f 31ff 	movne.w	r1, #4294967295
 8000854:	f04f 30ff 	movne.w	r0, #4294967295
 8000858:	f000 b974 	b.w	8000b44 <__aeabi_idiv0>
 800085c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000860:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000864:	f000 f806 	bl	8000874 <__udivmoddi4>
 8000868:	f8dd e004 	ldr.w	lr, [sp, #4]
 800086c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000870:	b004      	add	sp, #16
 8000872:	4770      	bx	lr

08000874 <__udivmoddi4>:
 8000874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000878:	9d08      	ldr	r5, [sp, #32]
 800087a:	4604      	mov	r4, r0
 800087c:	468e      	mov	lr, r1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d14d      	bne.n	800091e <__udivmoddi4+0xaa>
 8000882:	428a      	cmp	r2, r1
 8000884:	4694      	mov	ip, r2
 8000886:	d969      	bls.n	800095c <__udivmoddi4+0xe8>
 8000888:	fab2 f282 	clz	r2, r2
 800088c:	b152      	cbz	r2, 80008a4 <__udivmoddi4+0x30>
 800088e:	fa01 f302 	lsl.w	r3, r1, r2
 8000892:	f1c2 0120 	rsb	r1, r2, #32
 8000896:	fa20 f101 	lsr.w	r1, r0, r1
 800089a:	fa0c fc02 	lsl.w	ip, ip, r2
 800089e:	ea41 0e03 	orr.w	lr, r1, r3
 80008a2:	4094      	lsls	r4, r2
 80008a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a8:	0c21      	lsrs	r1, r4, #16
 80008aa:	fbbe f6f8 	udiv	r6, lr, r8
 80008ae:	fa1f f78c 	uxth.w	r7, ip
 80008b2:	fb08 e316 	mls	r3, r8, r6, lr
 80008b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ba:	fb06 f107 	mul.w	r1, r6, r7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x64>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008ca:	f080 811f 	bcs.w	8000b0c <__udivmoddi4+0x298>
 80008ce:	4299      	cmp	r1, r3
 80008d0:	f240 811c 	bls.w	8000b0c <__udivmoddi4+0x298>
 80008d4:	3e02      	subs	r6, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1a5b      	subs	r3, r3, r1
 80008da:	b2a4      	uxth	r4, r4
 80008dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008e0:	fb08 3310 	mls	r3, r8, r0, r3
 80008e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008e8:	fb00 f707 	mul.w	r7, r0, r7
 80008ec:	42a7      	cmp	r7, r4
 80008ee:	d90a      	bls.n	8000906 <__udivmoddi4+0x92>
 80008f0:	eb1c 0404 	adds.w	r4, ip, r4
 80008f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008f8:	f080 810a 	bcs.w	8000b10 <__udivmoddi4+0x29c>
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	f240 8107 	bls.w	8000b10 <__udivmoddi4+0x29c>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800090a:	1be4      	subs	r4, r4, r7
 800090c:	2600      	movs	r6, #0
 800090e:	b11d      	cbz	r5, 8000918 <__udivmoddi4+0xa4>
 8000910:	40d4      	lsrs	r4, r2
 8000912:	2300      	movs	r3, #0
 8000914:	e9c5 4300 	strd	r4, r3, [r5]
 8000918:	4631      	mov	r1, r6
 800091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091e:	428b      	cmp	r3, r1
 8000920:	d909      	bls.n	8000936 <__udivmoddi4+0xc2>
 8000922:	2d00      	cmp	r5, #0
 8000924:	f000 80ef 	beq.w	8000b06 <__udivmoddi4+0x292>
 8000928:	2600      	movs	r6, #0
 800092a:	e9c5 0100 	strd	r0, r1, [r5]
 800092e:	4630      	mov	r0, r6
 8000930:	4631      	mov	r1, r6
 8000932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000936:	fab3 f683 	clz	r6, r3
 800093a:	2e00      	cmp	r6, #0
 800093c:	d14a      	bne.n	80009d4 <__udivmoddi4+0x160>
 800093e:	428b      	cmp	r3, r1
 8000940:	d302      	bcc.n	8000948 <__udivmoddi4+0xd4>
 8000942:	4282      	cmp	r2, r0
 8000944:	f200 80f9 	bhi.w	8000b3a <__udivmoddi4+0x2c6>
 8000948:	1a84      	subs	r4, r0, r2
 800094a:	eb61 0303 	sbc.w	r3, r1, r3
 800094e:	2001      	movs	r0, #1
 8000950:	469e      	mov	lr, r3
 8000952:	2d00      	cmp	r5, #0
 8000954:	d0e0      	beq.n	8000918 <__udivmoddi4+0xa4>
 8000956:	e9c5 4e00 	strd	r4, lr, [r5]
 800095a:	e7dd      	b.n	8000918 <__udivmoddi4+0xa4>
 800095c:	b902      	cbnz	r2, 8000960 <__udivmoddi4+0xec>
 800095e:	deff      	udf	#255	; 0xff
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	2a00      	cmp	r2, #0
 8000966:	f040 8092 	bne.w	8000a8e <__udivmoddi4+0x21a>
 800096a:	eba1 010c 	sub.w	r1, r1, ip
 800096e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	2601      	movs	r6, #1
 8000978:	0c20      	lsrs	r0, r4, #16
 800097a:	fbb1 f3f7 	udiv	r3, r1, r7
 800097e:	fb07 1113 	mls	r1, r7, r3, r1
 8000982:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000986:	fb0e f003 	mul.w	r0, lr, r3
 800098a:	4288      	cmp	r0, r1
 800098c:	d908      	bls.n	80009a0 <__udivmoddi4+0x12c>
 800098e:	eb1c 0101 	adds.w	r1, ip, r1
 8000992:	f103 38ff 	add.w	r8, r3, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0x12a>
 8000998:	4288      	cmp	r0, r1
 800099a:	f200 80cb 	bhi.w	8000b34 <__udivmoddi4+0x2c0>
 800099e:	4643      	mov	r3, r8
 80009a0:	1a09      	subs	r1, r1, r0
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009a8:	fb07 1110 	mls	r1, r7, r0, r1
 80009ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009b0:	fb0e fe00 	mul.w	lr, lr, r0
 80009b4:	45a6      	cmp	lr, r4
 80009b6:	d908      	bls.n	80009ca <__udivmoddi4+0x156>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x154>
 80009c2:	45a6      	cmp	lr, r4
 80009c4:	f200 80bb 	bhi.w	8000b3e <__udivmoddi4+0x2ca>
 80009c8:	4608      	mov	r0, r1
 80009ca:	eba4 040e 	sub.w	r4, r4, lr
 80009ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009d2:	e79c      	b.n	800090e <__udivmoddi4+0x9a>
 80009d4:	f1c6 0720 	rsb	r7, r6, #32
 80009d8:	40b3      	lsls	r3, r6
 80009da:	fa22 fc07 	lsr.w	ip, r2, r7
 80009de:	ea4c 0c03 	orr.w	ip, ip, r3
 80009e2:	fa20 f407 	lsr.w	r4, r0, r7
 80009e6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ea:	431c      	orrs	r4, r3
 80009ec:	40f9      	lsrs	r1, r7
 80009ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009f2:	fa00 f306 	lsl.w	r3, r0, r6
 80009f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009fa:	0c20      	lsrs	r0, r4, #16
 80009fc:	fa1f fe8c 	uxth.w	lr, ip
 8000a00:	fb09 1118 	mls	r1, r9, r8, r1
 8000a04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a08:	fb08 f00e 	mul.w	r0, r8, lr
 8000a0c:	4288      	cmp	r0, r1
 8000a0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a12:	d90b      	bls.n	8000a2c <__udivmoddi4+0x1b8>
 8000a14:	eb1c 0101 	adds.w	r1, ip, r1
 8000a18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a1c:	f080 8088 	bcs.w	8000b30 <__udivmoddi4+0x2bc>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f240 8085 	bls.w	8000b30 <__udivmoddi4+0x2bc>
 8000a26:	f1a8 0802 	sub.w	r8, r8, #2
 8000a2a:	4461      	add	r1, ip
 8000a2c:	1a09      	subs	r1, r1, r0
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a34:	fb09 1110 	mls	r1, r9, r0, r1
 8000a38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	458e      	cmp	lr, r1
 8000a42:	d908      	bls.n	8000a56 <__udivmoddi4+0x1e2>
 8000a44:	eb1c 0101 	adds.w	r1, ip, r1
 8000a48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4c:	d26c      	bcs.n	8000b28 <__udivmoddi4+0x2b4>
 8000a4e:	458e      	cmp	lr, r1
 8000a50:	d96a      	bls.n	8000b28 <__udivmoddi4+0x2b4>
 8000a52:	3802      	subs	r0, #2
 8000a54:	4461      	add	r1, ip
 8000a56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a5e:	eba1 010e 	sub.w	r1, r1, lr
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	46c8      	mov	r8, r9
 8000a66:	46a6      	mov	lr, r4
 8000a68:	d356      	bcc.n	8000b18 <__udivmoddi4+0x2a4>
 8000a6a:	d053      	beq.n	8000b14 <__udivmoddi4+0x2a0>
 8000a6c:	b15d      	cbz	r5, 8000a86 <__udivmoddi4+0x212>
 8000a6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a72:	eb61 010e 	sbc.w	r1, r1, lr
 8000a76:	fa01 f707 	lsl.w	r7, r1, r7
 8000a7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a7e:	40f1      	lsrs	r1, r6
 8000a80:	431f      	orrs	r7, r3
 8000a82:	e9c5 7100 	strd	r7, r1, [r5]
 8000a86:	2600      	movs	r6, #0
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	40d8      	lsrs	r0, r3
 8000a94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a98:	fa21 f303 	lsr.w	r3, r1, r3
 8000a9c:	4091      	lsls	r1, r2
 8000a9e:	4301      	orrs	r1, r0
 8000aa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa4:	fa1f fe8c 	uxth.w	lr, ip
 8000aa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aac:	fb07 3610 	mls	r6, r7, r0, r3
 8000ab0:	0c0b      	lsrs	r3, r1, #16
 8000ab2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ab6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aba:	429e      	cmp	r6, r3
 8000abc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x260>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aca:	d22f      	bcs.n	8000b2c <__udivmoddi4+0x2b8>
 8000acc:	429e      	cmp	r6, r3
 8000ace:	d92d      	bls.n	8000b2c <__udivmoddi4+0x2b8>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	1b9b      	subs	r3, r3, r6
 8000ad6:	b289      	uxth	r1, r1
 8000ad8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000adc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ae0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ae4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x28a>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000af4:	d216      	bcs.n	8000b24 <__udivmoddi4+0x2b0>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d914      	bls.n	8000b24 <__udivmoddi4+0x2b0>
 8000afa:	3e02      	subs	r6, #2
 8000afc:	4461      	add	r1, ip
 8000afe:	1ac9      	subs	r1, r1, r3
 8000b00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b04:	e738      	b.n	8000978 <__udivmoddi4+0x104>
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e705      	b.n	8000918 <__udivmoddi4+0xa4>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e3      	b.n	80008d8 <__udivmoddi4+0x64>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6f8      	b.n	8000906 <__udivmoddi4+0x92>
 8000b14:	454b      	cmp	r3, r9
 8000b16:	d2a9      	bcs.n	8000a6c <__udivmoddi4+0x1f8>
 8000b18:	ebb9 0802 	subs.w	r8, r9, r2
 8000b1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7a3      	b.n	8000a6c <__udivmoddi4+0x1f8>
 8000b24:	4646      	mov	r6, r8
 8000b26:	e7ea      	b.n	8000afe <__udivmoddi4+0x28a>
 8000b28:	4620      	mov	r0, r4
 8000b2a:	e794      	b.n	8000a56 <__udivmoddi4+0x1e2>
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	e7d1      	b.n	8000ad4 <__udivmoddi4+0x260>
 8000b30:	46d0      	mov	r8, sl
 8000b32:	e77b      	b.n	8000a2c <__udivmoddi4+0x1b8>
 8000b34:	3b02      	subs	r3, #2
 8000b36:	4461      	add	r1, ip
 8000b38:	e732      	b.n	80009a0 <__udivmoddi4+0x12c>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e709      	b.n	8000952 <__udivmoddi4+0xde>
 8000b3e:	4464      	add	r4, ip
 8000b40:	3802      	subs	r0, #2
 8000b42:	e742      	b.n	80009ca <__udivmoddi4+0x156>

08000b44 <__aeabi_idiv0>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <BMP180_Init>:

#include "BMP180.h"

extern I2C_HandleTypeDef hi2c1;

void BMP180_Init(){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 1000000) != HAL_OK){
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <BMP180_Init+0x2c>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	21ee      	movs	r1, #238	; 0xee
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <BMP180_Init+0x30>)
 8000b54:	f002 fe4c 	bl	80037f0 <HAL_I2C_IsDeviceReady>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d005      	beq.n	8000b6a <BMP180_Init+0x22>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <BMP180_Init+0x34>)
 8000b66:	f002 f8c7 	bl	8002cf8 <HAL_GPIO_WritePin>
	}
		BMP180_Get_Calibration_Value();
 8000b6a:	f000 f809 	bl	8000b80 <BMP180_Get_Calibration_Value>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	000f4240 	.word	0x000f4240
 8000b78:	2000016c 	.word	0x2000016c
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <BMP180_Get_Calibration_Value>:


void BMP180_Get_Calibration_Value(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af04      	add	r7, sp, #16

	int a=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
        //calibBuff : i2c 8 bitlik okuma yapar ,bmp180 calibration coefficient 16 bit islem görüyor, bu nedenle 2 katı yer aldık,sonra ardı ardına veriyi depoluyacagız.
	uint8_t calibBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	821a      	strh	r2, [r3, #16]
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1, calibBuff, BMP180_CALIBRATION_VALUE_LENGTH,100000); // 1 byte için 1 yazdık cünkü 0xAA nin uzunlugu 1 byte=8 bit
 8000b9e:	4ba2      	ldr	r3, [pc, #648]	; (8000e28 <BMP180_Get_Calibration_Value+0x2a8>)
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2316      	movs	r3, #22
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	22aa      	movs	r2, #170	; 0xaa
 8000bae:	21ef      	movs	r1, #239	; 0xef
 8000bb0:	489e      	ldr	r0, [pc, #632]	; (8000e2c <BMP180_Get_Calibration_Value+0x2ac>)
 8000bb2:	f002 fbf7 	bl	80033a4 <HAL_I2C_Mem_Read>

	// 8 bit saga kaydırdık cünkü 0-7 arası ayrı cünkü MSB ,8-15 arası ayrı alınıyor cünkü LSB, datasheet inde yazıyor.
	AC1 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2; // calibBuff 8 bit, biz 16 bite cevirdik.
 8000bb6:	1d3a      	adds	r2, r7, #4
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	3320      	adds	r3, #32
 8000bc8:	443b      	add	r3, r7
 8000bca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b96      	ldr	r3, [pc, #600]	; (8000e30 <BMP180_Get_Calibration_Value+0x2b0>)
 8000bd8:	801a      	strh	r2, [r3, #0]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3302      	adds	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
	AC2 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000be0:	1d3a      	adds	r2, r7, #4
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	3320      	adds	r3, #32
 8000bf2:	443b      	add	r3, r7
 8000bf4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b8c      	ldr	r3, [pc, #560]	; (8000e34 <BMP180_Get_Calibration_Value+0x2b4>)
 8000c02:	801a      	strh	r2, [r3, #0]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	3302      	adds	r3, #2
 8000c08:	61fb      	str	r3, [r7, #28]
	AC3 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b83      	ldr	r3, [pc, #524]	; (8000e38 <BMP180_Get_Calibration_Value+0x2b8>)
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3302      	adds	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
	AC4 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	3301      	adds	r3, #1
 8000c44:	3320      	adds	r3, #32
 8000c46:	443b      	add	r3, r7
 8000c48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <BMP180_Get_Calibration_Value+0x2bc>)
 8000c56:	801a      	strh	r2, [r3, #0]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
	AC5 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	3320      	adds	r3, #32
 8000c70:	443b      	add	r3, r7
 8000c72:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	4b70      	ldr	r3, [pc, #448]	; (8000e40 <BMP180_Get_Calibration_Value+0x2c0>)
 8000c80:	801a      	strh	r2, [r3, #0]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3302      	adds	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
	AC6 = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000c88:	1d3a      	adds	r2, r7, #4
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	3301      	adds	r3, #1
 8000c98:	3320      	adds	r3, #32
 8000c9a:	443b      	add	r3, r7
 8000c9c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <BMP180_Get_Calibration_Value+0x2c4>)
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	61fb      	str	r3, [r7, #28]
	B1  = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000cb2:	1d3a      	adds	r2, r7, #4
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	3320      	adds	r3, #32
 8000cc4:	443b      	add	r3, r7
 8000cc6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <BMP180_Get_Calibration_Value+0x2c8>)
 8000cd4:	801a      	strh	r2, [r3, #0]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3302      	adds	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
	B2  = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000cdc:	1d3a      	adds	r2, r7, #4
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	3320      	adds	r3, #32
 8000cee:	443b      	add	r3, r7
 8000cf0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b53      	ldr	r3, [pc, #332]	; (8000e4c <BMP180_Get_Calibration_Value+0x2cc>)
 8000cfe:	801a      	strh	r2, [r3, #0]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	3302      	adds	r3, #2
 8000d04:	61fb      	str	r3, [r7, #28]
	MB  = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000d06:	1d3a      	adds	r2, r7, #4
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3301      	adds	r3, #1
 8000d16:	3320      	adds	r3, #32
 8000d18:	443b      	add	r3, r7
 8000d1a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <BMP180_Get_Calibration_Value+0x2d0>)
 8000d28:	801a      	strh	r2, [r3, #0]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	61fb      	str	r3, [r7, #28]
	MC  = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000d30:	1d3a      	adds	r2, r7, #4
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	3320      	adds	r3, #32
 8000d42:	443b      	add	r3, r7
 8000d44:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b40      	ldr	r3, [pc, #256]	; (8000e54 <BMP180_Get_Calibration_Value+0x2d4>)
 8000d52:	801a      	strh	r2, [r3, #0]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	3302      	adds	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
	MD  = (uint16_t)((calibBuff[a] << 8) | calibBuff[a+1]); a+=2;
 8000d5a:	1d3a      	adds	r2, r7, #4
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	3320      	adds	r3, #32
 8000d6c:	443b      	add	r3, r7
 8000d6e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <BMP180_Get_Calibration_Value+0x2d8>)
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3302      	adds	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]

	if(AC1 == 0x00  | AC1 == 0xFFFF){
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <BMP180_Get_Calibration_Value+0x2b0>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf0c      	ite	eq
 8000d8c:	2301      	moveq	r3, #1
 8000d8e:	2300      	movne	r3, #0
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <BMP180_Get_Calibration_Value+0x2b0>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <BMP180_Get_Calibration_Value+0x23a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db2:	482a      	ldr	r0, [pc, #168]	; (8000e5c <BMP180_Get_Calibration_Value+0x2dc>)
 8000db4:	f001 ffa0 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000db8:	e7fe      	b.n	8000db8 <BMP180_Get_Calibration_Value+0x238>
	}
	if(AC2 == 0x00  | AC2 == 0xFFFF){
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <BMP180_Get_Calibration_Value+0x2b4>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf0c      	ite	eq
 8000dc2:	2301      	moveq	r3, #1
 8000dc4:	2300      	movne	r3, #0
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <BMP180_Get_Calibration_Value+0x2b4>)
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <BMP180_Get_Calibration_Value+0x270>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	481c      	ldr	r0, [pc, #112]	; (8000e5c <BMP180_Get_Calibration_Value+0x2dc>)
 8000dea:	f001 ff85 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000dee:	e7fe      	b.n	8000dee <BMP180_Get_Calibration_Value+0x26e>
	}
	if(AC3 == 0x00  | AC3 == 0xFFFF){
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <BMP180_Get_Calibration_Value+0x2b8>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <BMP180_Get_Calibration_Value+0x2b8>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e06:	428b      	cmp	r3, r1
 8000e08:	bf0c      	ite	eq
 8000e0a:	2301      	moveq	r3, #1
 8000e0c:	2300      	movne	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d023      	beq.n	8000e60 <BMP180_Get_Calibration_Value+0x2e0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1e:	480f      	ldr	r0, [pc, #60]	; (8000e5c <BMP180_Get_Calibration_Value+0x2dc>)
 8000e20:	f001 ff6a 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000e24:	e7fe      	b.n	8000e24 <BMP180_Get_Calibration_Value+0x2a4>
 8000e26:	bf00      	nop
 8000e28:	000186a0 	.word	0x000186a0
 8000e2c:	2000016c 	.word	0x2000016c
 8000e30:	2000011c 	.word	0x2000011c
 8000e34:	2000011e 	.word	0x2000011e
 8000e38:	20000120 	.word	0x20000120
 8000e3c:	20000122 	.word	0x20000122
 8000e40:	20000124 	.word	0x20000124
 8000e44:	20000126 	.word	0x20000126
 8000e48:	20000128 	.word	0x20000128
 8000e4c:	2000012a 	.word	0x2000012a
 8000e50:	2000012c 	.word	0x2000012c
 8000e54:	2000012e 	.word	0x2000012e
 8000e58:	20000130 	.word	0x20000130
 8000e5c:	40020c00 	.word	0x40020c00
	}
	if(AC4 == 0x00  | AC4 == 0xFFFF){
 8000e60:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <BMP180_Get_Calibration_Value+0x498>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <BMP180_Get_Calibration_Value+0x498>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e76:	428b      	cmp	r3, r1
 8000e78:	bf0c      	ite	eq
 8000e7a:	2301      	moveq	r3, #1
 8000e7c:	2300      	movne	r3, #0
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <BMP180_Get_Calibration_Value+0x316>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4863      	ldr	r0, [pc, #396]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000e90:	f001 ff32 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000e94:	e7fe      	b.n	8000e94 <BMP180_Get_Calibration_Value+0x314>
	}
	if(AC5 == 0x00  | AC5 == 0xFFFF){
 8000e96:	4b62      	ldr	r3, [pc, #392]	; (8001020 <BMP180_Get_Calibration_Value+0x4a0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2301      	moveq	r3, #1
 8000ea0:	2300      	movne	r3, #0
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b5e      	ldr	r3, [pc, #376]	; (8001020 <BMP180_Get_Calibration_Value+0x4a0>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eac:	428b      	cmp	r3, r1
 8000eae:	bf0c      	ite	eq
 8000eb0:	2301      	moveq	r3, #1
 8000eb2:	2300      	movne	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d006      	beq.n	8000ecc <BMP180_Get_Calibration_Value+0x34c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec4:	4855      	ldr	r0, [pc, #340]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000ec6:	f001 ff17 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000eca:	e7fe      	b.n	8000eca <BMP180_Get_Calibration_Value+0x34a>
	}
	if(AC6 == 0x00  | AC6 == 0xFFFF){
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <BMP180_Get_Calibration_Value+0x4a4>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b52      	ldr	r3, [pc, #328]	; (8001024 <BMP180_Get_Calibration_Value+0x4a4>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf0c      	ite	eq
 8000ee6:	2301      	moveq	r3, #1
 8000ee8:	2300      	movne	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <BMP180_Get_Calibration_Value+0x382>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000efa:	4848      	ldr	r0, [pc, #288]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000efc:	f001 fefc 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000f00:	e7fe      	b.n	8000f00 <BMP180_Get_Calibration_Value+0x380>
	}
	if(B1 == 0x00  | B1 == 0xFFFF){
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <BMP180_Get_Calibration_Value+0x4a8>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf0c      	ite	eq
 8000f0a:	2301      	moveq	r3, #1
 8000f0c:	2300      	movne	r3, #0
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b45      	ldr	r3, [pc, #276]	; (8001028 <BMP180_Get_Calibration_Value+0x4a8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <BMP180_Get_Calibration_Value+0x3b8>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	483a      	ldr	r0, [pc, #232]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000f32:	f001 fee1 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000f36:	e7fe      	b.n	8000f36 <BMP180_Get_Calibration_Value+0x3b6>
	}
	if(B2 == 0x00  | B2 == 0xFFFF){
 8000f38:	4b3c      	ldr	r3, [pc, #240]	; (800102c <BMP180_Get_Calibration_Value+0x4ac>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <BMP180_Get_Calibration_Value+0x4ac>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	bf0c      	ite	eq
 8000f52:	2301      	moveq	r3, #1
 8000f54:	2300      	movne	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d006      	beq.n	8000f6e <BMP180_Get_Calibration_Value+0x3ee>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	482d      	ldr	r0, [pc, #180]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000f68:	f001 fec6 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000f6c:	e7fe      	b.n	8000f6c <BMP180_Get_Calibration_Value+0x3ec>
	}
	if(MB == 0x00  | MB == 0xFFFF){
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <BMP180_Get_Calibration_Value+0x4b0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf0c      	ite	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	2300      	movne	r3, #0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <BMP180_Get_Calibration_Value+0x4b0>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f84:	428b      	cmp	r3, r1
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <BMP180_Get_Calibration_Value+0x424>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000f9e:	f001 feab 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000fa2:	e7fe      	b.n	8000fa2 <BMP180_Get_Calibration_Value+0x422>
	}
	if(MC == 0x00  | MC == 0xFFFF){
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <BMP180_Get_Calibration_Value+0x4b4>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <BMP180_Get_Calibration_Value+0x4b4>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <BMP180_Get_Calibration_Value+0x45a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 8000fd4:	f001 fe90 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 8000fd8:	e7fe      	b.n	8000fd8 <BMP180_Get_Calibration_Value+0x458>
	}
	if(MD == 0x00  | MD == 0xFFFF){
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <BMP180_Get_Calibration_Value+0x4b8>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <BMP180_Get_Calibration_Value+0x4b8>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2301      	moveq	r3, #1
 8000ff6:	2300      	movne	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <BMP180_Get_Calibration_Value+0x490>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <BMP180_Get_Calibration_Value+0x49c>)
 800100a:	f001 fe75 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 800100e:	e7fe      	b.n	800100e <BMP180_Get_Calibration_Value+0x48e>
	}
}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000122 	.word	0x20000122
 800101c:	40020c00 	.word	0x40020c00
 8001020:	20000124 	.word	0x20000124
 8001024:	20000126 	.word	0x20000126
 8001028:	20000128 	.word	0x20000128
 800102c:	2000012a 	.word	0x2000012a
 8001030:	2000012c 	.word	0x2000012c
 8001034:	2000012e 	.word	0x2000012e
 8001038:	20000130 	.word	0x20000130
 800103c:	00000000 	.word	0x00000000

08001040 <BMP180_Get_Temparature>:



void BMP180_Get_Temparature(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	tX1 = (((int32_t)unCompensatedTemperature - (int32_t)AC6 ) * (int32_t)AC5) / 32768;
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <BMP180_Get_Temparature+0xb8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <BMP180_Get_Temparature+0xbc>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <BMP180_Get_Temparature+0xc0>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	fb02 f303 	mul.w	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	da02      	bge.n	8001062 <BMP180_Get_Temparature+0x22>
 800105c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001060:	337f      	adds	r3, #127	; 0x7f
 8001062:	13db      	asrs	r3, r3, #15
 8001064:	461a      	mov	r2, r3
 8001066:	4b27      	ldr	r3, [pc, #156]	; (8001104 <BMP180_Get_Temparature+0xc4>)
 8001068:	601a      	str	r2, [r3, #0]
	tX2 = ((int32_t)MC * 2048 ) / (tX1 + (int32_t)MD);
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <BMP180_Get_Temparature+0xc8>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	02db      	lsls	r3, r3, #11
 8001070:	461a      	mov	r2, r3
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <BMP180_Get_Temparature+0xcc>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <BMP180_Get_Temparature+0xc4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	440b      	add	r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <BMP180_Get_Temparature+0xd0>)
 8001084:	6013      	str	r3, [r2, #0]
	if(tX1 == 0 && MD == 0){
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <BMP180_Get_Temparature+0xc4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10a      	bne.n	80010a4 <BMP180_Get_Temparature+0x64>
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <BMP180_Get_Temparature+0xcc>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <BMP180_Get_Temparature+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <BMP180_Get_Temparature+0xd4>)
 800109e:	f001 fe2b 	bl	8002cf8 <HAL_GPIO_WritePin>
		while(1);
 80010a2:	e7fe      	b.n	80010a2 <BMP180_Get_Temparature+0x62>
	}
	tB5 = tX1+tX2;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <BMP180_Get_Temparature+0xc4>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <BMP180_Get_Temparature+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <BMP180_Get_Temparature+0xd8>)
 80010b0:	6013      	str	r3, [r2, #0]
	temperature = ((float)(tB5+8) / 16)*0.1;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <BMP180_Get_Temparature+0xd8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3308      	adds	r3, #8
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80010c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010c8:	ee16 0a90 	vmov	r0, s13
 80010cc:	f7ff fb12 	bl	80006f4 <__aeabi_f2d>
 80010d0:	a307      	add	r3, pc, #28	; (adr r3, 80010f0 <BMP180_Get_Temparature+0xb0>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff f87f 	bl	80001d8 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fb5f 	bl	80007a4 <__aeabi_d2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <BMP180_Get_Temparature+0xdc>)
 80010ea:	6013      	str	r3, [r2, #0]

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	3fb99999 	.word	0x3fb99999
 80010f8:	20000132 	.word	0x20000132
 80010fc:	20000126 	.word	0x20000126
 8001100:	20000124 	.word	0x20000124
 8001104:	20000138 	.word	0x20000138
 8001108:	2000012e 	.word	0x2000012e
 800110c:	20000130 	.word	0x20000130
 8001110:	2000013c 	.word	0x2000013c
 8001114:	40020c00 	.word	0x40020c00
 8001118:	20000140 	.word	0x20000140
 800111c:	20000134 	.word	0x20000134

08001120 <BMP180_Get_Pressure>:
	unCompensatedTemperature =(uint16_t)((rData[0] << 8) | rData[1]); // bitwise da, veya kapısı toplamadır yani

}


void BMP180_Get_Pressure(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	BMP180_Get_Uncompansated_Pressure();
 8001124:	f000 f944 	bl	80013b0 <BMP180_Get_Uncompansated_Pressure>
	pB6 =tB5 - 4000;
 8001128:	4b8d      	ldr	r3, [pc, #564]	; (8001360 <BMP180_Get_Pressure+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001130:	461a      	mov	r2, r3
 8001132:	4b8c      	ldr	r3, [pc, #560]	; (8001364 <BMP180_Get_Pressure+0x244>)
 8001134:	601a      	str	r2, [r3, #0]
	pX1 =(B2* (pB6*pB6/4096))/2048;
 8001136:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <BMP180_Get_Pressure+0x248>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	4b89      	ldr	r3, [pc, #548]	; (8001364 <BMP180_Get_Pressure+0x244>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a88      	ldr	r2, [pc, #544]	; (8001364 <BMP180_Get_Pressure+0x244>)
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	da01      	bge.n	8001150 <BMP180_Get_Pressure+0x30>
 800114c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001150:	131b      	asrs	r3, r3, #12
 8001152:	fb01 f303 	mul.w	r3, r1, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	da01      	bge.n	800115e <BMP180_Get_Pressure+0x3e>
 800115a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800115e:	12db      	asrs	r3, r3, #11
 8001160:	461a      	mov	r2, r3
 8001162:	4b82      	ldr	r3, [pc, #520]	; (800136c <BMP180_Get_Pressure+0x24c>)
 8001164:	601a      	str	r2, [r3, #0]
	pX2 =AC2 * pB6 /2048;
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <BMP180_Get_Pressure+0x250>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b7d      	ldr	r3, [pc, #500]	; (8001364 <BMP180_Get_Pressure+0x244>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	da01      	bge.n	800117c <BMP180_Get_Pressure+0x5c>
 8001178:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800117c:	12db      	asrs	r3, r3, #11
 800117e:	461a      	mov	r2, r3
 8001180:	4b7c      	ldr	r3, [pc, #496]	; (8001374 <BMP180_Get_Pressure+0x254>)
 8001182:	601a      	str	r2, [r3, #0]
	pX3 =pX1+pX2;
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <BMP180_Get_Pressure+0x24c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <BMP180_Get_Pressure+0x254>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4413      	add	r3, r2
 800118e:	4a7a      	ldr	r2, [pc, #488]	; (8001378 <BMP180_Get_Pressure+0x258>)
 8001190:	6013      	str	r3, [r2, #0]
	pB3 =(((AC1 *4 +pX3)<< (uint8_t)0x03 )+2)/4;
 8001192:	4b7a      	ldr	r3, [pc, #488]	; (800137c <BMP180_Get_Pressure+0x25c>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	009a      	lsls	r2, r3, #2
 8001198:	4b77      	ldr	r3, [pc, #476]	; (8001378 <BMP180_Get_Pressure+0x258>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3302      	adds	r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <BMP180_Get_Pressure+0x88>
 80011a6:	3303      	adds	r3, #3
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b74      	ldr	r3, [pc, #464]	; (8001380 <BMP180_Get_Pressure+0x260>)
 80011ae:	601a      	str	r2, [r3, #0]
	pX1 =AC3*pB6/8192;
 80011b0:	4b74      	ldr	r3, [pc, #464]	; (8001384 <BMP180_Get_Pressure+0x264>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <BMP180_Get_Pressure+0x244>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	da02      	bge.n	80011c8 <BMP180_Get_Pressure+0xa8>
 80011c2:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80011c6:	331f      	adds	r3, #31
 80011c8:	135b      	asrs	r3, r3, #13
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b67      	ldr	r3, [pc, #412]	; (800136c <BMP180_Get_Pressure+0x24c>)
 80011ce:	601a      	str	r2, [r3, #0]
	pX2 =(B1 * (pB6*pB6 /4096))/65536;
 80011d0:	4b6d      	ldr	r3, [pc, #436]	; (8001388 <BMP180_Get_Pressure+0x268>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <BMP180_Get_Pressure+0x244>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a62      	ldr	r2, [pc, #392]	; (8001364 <BMP180_Get_Pressure+0x244>)
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da01      	bge.n	80011ea <BMP180_Get_Pressure+0xca>
 80011e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011ea:	131b      	asrs	r3, r3, #12
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da02      	bge.n	80011fa <BMP180_Get_Pressure+0xda>
 80011f4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011f8:	33ff      	adds	r3, #255	; 0xff
 80011fa:	141b      	asrs	r3, r3, #16
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <BMP180_Get_Pressure+0x254>)
 8001200:	601a      	str	r2, [r3, #0]
	pX3 =((pX1+pX2)+2)/4;
 8001202:	4b5a      	ldr	r3, [pc, #360]	; (800136c <BMP180_Get_Pressure+0x24c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <BMP180_Get_Pressure+0x254>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	3302      	adds	r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	da00      	bge.n	8001214 <BMP180_Get_Pressure+0xf4>
 8001212:	3303      	adds	r3, #3
 8001214:	109b      	asrs	r3, r3, #2
 8001216:	461a      	mov	r2, r3
 8001218:	4b57      	ldr	r3, [pc, #348]	; (8001378 <BMP180_Get_Pressure+0x258>)
 800121a:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long)(pX3+32768) /32768;
 800121c:	4b5b      	ldr	r3, [pc, #364]	; (800138c <BMP180_Get_Pressure+0x26c>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b55      	ldr	r3, [pc, #340]	; (8001378 <BMP180_Get_Pressure+0x258>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	0bdb      	lsrs	r3, r3, #15
 8001230:	461a      	mov	r2, r3
 8001232:	4b57      	ldr	r3, [pc, #348]	; (8001390 <BMP180_Get_Pressure+0x270>)
 8001234:	601a      	str	r2, [r3, #0]
	pB7 =((unsigned long)unCompensatedPressure-pB3)*(50000 >> (uint8_t)0x03);
 8001236:	4b57      	ldr	r3, [pc, #348]	; (8001394 <BMP180_Get_Pressure+0x274>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a51      	ldr	r2, [pc, #324]	; (8001380 <BMP180_Get_Pressure+0x260>)
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	f641 026a 	movw	r2, #6250	; 0x186a
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <BMP180_Get_Pressure+0x278>)
 800124c:	601a      	str	r2, [r3, #0]
	if(pB7 < 0x80000000){
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <BMP180_Get_Pressure+0x278>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0e      	blt.n	8001274 <BMP180_Get_Pressure+0x154>
		presure=(pB7*2)/pB4;
 8001256:	4b50      	ldr	r3, [pc, #320]	; (8001398 <BMP180_Get_Pressure+0x278>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	005a      	lsls	r2, r3, #1
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <BMP180_Get_Pressure+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fb92 f3f3 	sdiv	r3, r2, r3
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	4b4b      	ldr	r3, [pc, #300]	; (800139c <BMP180_Get_Pressure+0x27c>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
 8001272:	e00d      	b.n	8001290 <BMP180_Get_Pressure+0x170>
	}else{
		presure =(pB7/pB4)*2;
 8001274:	4b48      	ldr	r3, [pc, #288]	; (8001398 <BMP180_Get_Pressure+0x278>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <BMP180_Get_Pressure+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128a:	4b44      	ldr	r3, [pc, #272]	; (800139c <BMP180_Get_Pressure+0x27c>)
 800128c:	edc3 7a00 	vstr	s15, [r3]
	}
	pX1 =(presure/256)*(presure/256);
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <BMP180_Get_Pressure+0x27c>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	eddf 6a42 	vldr	s13, [pc, #264]	; 80013a0 <BMP180_Get_Pressure+0x280>
 800129a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <BMP180_Get_Pressure+0x27c>)
 80012a0:	edd3 6a00 	vldr	s13, [r3]
 80012a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80013a0 <BMP180_Get_Pressure+0x280>
 80012a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <BMP180_Get_Pressure+0x24c>)
 80012ba:	601a      	str	r2, [r3, #0]
	pX1=(pX1*3038)/65536;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <BMP180_Get_Pressure+0x24c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f640 32de 	movw	r2, #3038	; 0xbde
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da02      	bge.n	80012d2 <BMP180_Get_Pressure+0x1b2>
 80012cc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012d0:	33ff      	adds	r3, #255	; 0xff
 80012d2:	141b      	asrs	r3, r3, #16
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <BMP180_Get_Pressure+0x24c>)
 80012d8:	601a      	str	r2, [r3, #0]
	pX2=(-7357 *presure)/65536;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <BMP180_Get_Pressure+0x27c>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80013a4 <BMP180_Get_Pressure+0x284>
 80012e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80013a8 <BMP180_Get_Pressure+0x288>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	ee17 2a90 	vmov	r2, s15
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <BMP180_Get_Pressure+0x254>)
 80012fa:	601a      	str	r2, [r3, #0]
	presure = presure + (pX1 + pX2+3791 )/16;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <BMP180_Get_Pressure+0x24c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <BMP180_Get_Pressure+0x254>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4413      	add	r3, r2
 8001306:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800130a:	2b00      	cmp	r3, #0
 800130c:	da00      	bge.n	8001310 <BMP180_Get_Pressure+0x1f0>
 800130e:	330f      	adds	r3, #15
 8001310:	111b      	asrs	r3, r3, #4
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <BMP180_Get_Pressure+0x27c>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <BMP180_Get_Pressure+0x27c>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
	presureATM=presure * 0.0000986923;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <BMP180_Get_Pressure+0x27c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f9e0 	bl	80006f4 <__aeabi_f2d>
 8001334:	a308      	add	r3, pc, #32	; (adr r3, 8001358 <BMP180_Get_Pressure+0x238>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7fe ff4d 	bl	80001d8 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fa2d 	bl	80007a4 <__aeabi_d2f>
 800134a:	4603      	mov	r3, r0
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <BMP180_Get_Pressure+0x28c>)
 800134e:	6013      	str	r3, [r2, #0]



}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	cdb01595 	.word	0xcdb01595
 800135c:	3f19df20 	.word	0x3f19df20
 8001360:	20000140 	.word	0x20000140
 8001364:	20000164 	.word	0x20000164
 8001368:	2000012a 	.word	0x2000012a
 800136c:	20000150 	.word	0x20000150
 8001370:	2000011e 	.word	0x2000011e
 8001374:	20000154 	.word	0x20000154
 8001378:	20000158 	.word	0x20000158
 800137c:	2000011c 	.word	0x2000011c
 8001380:	2000015c 	.word	0x2000015c
 8001384:	20000120 	.word	0x20000120
 8001388:	20000128 	.word	0x20000128
 800138c:	20000122 	.word	0x20000122
 8001390:	20000160 	.word	0x20000160
 8001394:	20000144 	.word	0x20000144
 8001398:	20000168 	.word	0x20000168
 800139c:	20000148 	.word	0x20000148
 80013a0:	43800000 	.word	0x43800000
 80013a4:	c5e5e800 	.word	0xc5e5e800
 80013a8:	47800000 	.word	0x47800000
 80013ac:	2000014c 	.word	0x2000014c

080013b0 <BMP180_Get_Uncompansated_Pressure>:
void BMP180_Get_Uncompansated_Pressure(void){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af04      	add	r7, sp, #16
	uint8_t rData[3]={0};
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <BMP180_Get_Uncompansated_Pressure+0x68>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	80bb      	strh	r3, [r7, #4]
 80013bc:	2300      	movs	r3, #0
 80013be:	71bb      	strb	r3, [r7, #6]
	uint8_t wData[1];
	wData[0] = 0x34 | (0x03 <<6 );
 80013c0:	23f4      	movs	r3, #244	; 0xf4
 80013c2:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100000);
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <BMP180_Get_Uncompansated_Pressure+0x6c>)
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	463b      	mov	r3, r7
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	22f4      	movs	r2, #244	; 0xf4
 80013d4:	21ee      	movs	r1, #238	; 0xee
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <BMP180_Get_Uncompansated_Pressure+0x70>)
 80013d8:	f001 feea 	bl	80031b0 <HAL_I2C_Mem_Write>
	HAL_Delay(26); //26ms
 80013dc:	201a      	movs	r0, #26
 80013de:	f000 fe3d 	bl	800205c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 3, 100000);
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <BMP180_Get_Uncompansated_Pressure+0x6c>)
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2303      	movs	r3, #3
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f6      	movs	r2, #246	; 0xf6
 80013f2:	21ef      	movs	r1, #239	; 0xef
 80013f4:	480a      	ldr	r0, [pc, #40]	; (8001420 <BMP180_Get_Uncompansated_Pressure+0x70>)
 80013f6:	f001 ffd5 	bl	80033a4 <HAL_I2C_Mem_Read>

	unCompensatedPressure = (rData[0] << 16 | rData[1] << 8 | rData[2]) >> (8 - (uint8_t)(0x03));
 80013fa:	793b      	ldrb	r3, [r7, #4]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	797b      	ldrb	r3, [r7, #5]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	4313      	orrs	r3, r2
 8001404:	79ba      	ldrb	r2, [r7, #6]
 8001406:	4313      	orrs	r3, r2
 8001408:	115b      	asrs	r3, r3, #5
 800140a:	461a      	mov	r2, r3
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <BMP180_Get_Uncompansated_Pressure+0x74>)
 800140e:	601a      	str	r2, [r3, #0]

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0800eeec 	.word	0x0800eeec
 800141c:	000186a0 	.word	0x000186a0
 8001420:	2000016c 	.word	0x2000016c
 8001424:	20000144 	.word	0x20000144

08001428 <sd_card_start>:




/////////////////////////////////////////////////////////////////////////////
void sd_card_start(){
 8001428:	b598      	push	{r3, r4, r7, lr}
 800142a:	af00      	add	r7, sp, #0

	fr=f_mount(&Fatfs, "", 1);
 800142c:	2201      	movs	r2, #1
 800142e:	4945      	ldr	r1, [pc, #276]	; (8001544 <sd_card_start+0x11c>)
 8001430:	4845      	ldr	r0, [pc, #276]	; (8001548 <sd_card_start+0x120>)
 8001432:	f00c fa91 	bl	800d958 <f_mount>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b44      	ldr	r3, [pc, #272]	; (800154c <sd_card_start+0x124>)
 800143c:	701a      	strb	r2, [r3, #0]
	if(fr==FR_OK){
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <sd_card_start+0x124>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d110      	bne.n	8001468 <sd_card_start+0x40>
		cdc="Ok to mount\n";
 8001446:	4b42      	ldr	r3, [pc, #264]	; (8001550 <sd_card_start+0x128>)
 8001448:	4a42      	ldr	r2, [pc, #264]	; (8001554 <sd_card_start+0x12c>)
 800144a:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <sd_card_start+0x128>)
 800144e:	681c      	ldr	r4, [r3, #0]
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <sd_card_start+0x128>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe feb7 	bl	80001c8 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	b29b      	uxth	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	4620      	mov	r0, r4
 8001462:	f00d f8af 	bl	800e5c4 <CDC_Transmit_FS>
 8001466:	e00f      	b.n	8001488 <sd_card_start+0x60>
	}else{
		cdc="Error to Mount\n";
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <sd_card_start+0x128>)
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <sd_card_start+0x130>)
 800146c:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <sd_card_start+0x128>)
 8001470:	681c      	ldr	r4, [r3, #0]
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <sd_card_start+0x128>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fea6 	bl	80001c8 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	f00d f89e 	bl	800e5c4 <CDC_Transmit_FS>
	}

	fr=f_open(&fil, "deneme.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001488:	220a      	movs	r2, #10
 800148a:	4934      	ldr	r1, [pc, #208]	; (800155c <sd_card_start+0x134>)
 800148c:	4834      	ldr	r0, [pc, #208]	; (8001560 <sd_card_start+0x138>)
 800148e:	f00c faa9 	bl	800d9e4 <f_open>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <sd_card_start+0x124>)
 8001498:	701a      	strb	r2, [r3, #0]
	if(fr==FR_OK){
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <sd_card_start+0x124>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d110      	bne.n	80014c4 <sd_card_start+0x9c>
		cdc="Ok to create or writefile\n";
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <sd_card_start+0x128>)
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <sd_card_start+0x13c>)
 80014a6:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <sd_card_start+0x128>)
 80014aa:	681c      	ldr	r4, [r3, #0]
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <sd_card_start+0x128>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe89 	bl	80001c8 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	4620      	mov	r0, r4
 80014be:	f00d f881 	bl	800e5c4 <CDC_Transmit_FS>
 80014c2:	e00f      	b.n	80014e4 <sd_card_start+0xbc>
	}else{
		cdc="Error to create or write file\n";
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <sd_card_start+0x128>)
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <sd_card_start+0x140>)
 80014c8:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <sd_card_start+0x128>)
 80014cc:	681c      	ldr	r4, [r3, #0]
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <sd_card_start+0x128>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fe78 	bl	80001c8 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	4620      	mov	r0, r4
 80014e0:	f00d f870 	bl	800e5c4 <CDC_Transmit_FS>
	}

	fr=f_stat("deneme.txt",&fno);
 80014e4:	4921      	ldr	r1, [pc, #132]	; (800156c <sd_card_start+0x144>)
 80014e6:	481d      	ldr	r0, [pc, #116]	; (800155c <sd_card_start+0x134>)
 80014e8:	f00c fe84 	bl	800e1f4 <f_stat>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <sd_card_start+0x124>)
 80014f2:	701a      	strb	r2, [r3, #0]
	if(fr==FR_OK){
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <sd_card_start+0x124>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d110      	bne.n	800151e <sd_card_start+0xf6>
		cdc="File is ready\n";
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <sd_card_start+0x128>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <sd_card_start+0x148>)
 8001500:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <sd_card_start+0x128>)
 8001504:	681c      	ldr	r4, [r3, #0]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <sd_card_start+0x128>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe5c 	bl	80001c8 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29b      	uxth	r3, r3
 8001514:	4619      	mov	r1, r3
 8001516:	4620      	mov	r0, r4
 8001518:	f00d f854 	bl	800e5c4 <CDC_Transmit_FS>
	}else{
		cdc="File is not ready\n";
		CDC_Transmit_FS(cdc, strlen(cdc));
	}
}
 800151c:	e00f      	b.n	800153e <sd_card_start+0x116>
		cdc="File is not ready\n";
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <sd_card_start+0x128>)
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <sd_card_start+0x14c>)
 8001522:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS(cdc, strlen(cdc));
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <sd_card_start+0x128>)
 8001526:	681c      	ldr	r4, [r3, #0]
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <sd_card_start+0x128>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe4b 	bl	80001c8 <strlen>
 8001532:	4603      	mov	r3, r0
 8001534:	b29b      	uxth	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	4620      	mov	r0, r4
 800153a:	f00d f843 	bl	800e5c4 <CDC_Transmit_FS>
}
 800153e:	bf00      	nop
 8001540:	bd98      	pop	{r3, r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	0800eefc 	.word	0x0800eefc
 8001548:	20000350 	.word	0x20000350
 800154c:	200023b4 	.word	0x200023b4
 8001550:	2000034c 	.word	0x2000034c
 8001554:	0800ef00 	.word	0x0800ef00
 8001558:	0800ef10 	.word	0x0800ef10
 800155c:	0800ef20 	.word	0x0800ef20
 8001560:	20001384 	.word	0x20001384
 8001564:	0800ef2c 	.word	0x0800ef2c
 8001568:	0800ef48 	.word	0x0800ef48
 800156c:	200023b8 	.word	0x200023b8
 8001570:	0800ef68 	.word	0x0800ef68
 8001574:	0800ef78 	.word	0x0800ef78

08001578 <sd_card_stop>:

void sd_card_stop(){
 8001578:	b598      	push	{r3, r4, r7, lr}
 800157a:	af00      	add	r7, sp, #0

	f_close(&fil);
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <sd_card_stop+0x38>)
 800157e:	f00c fe0f 	bl	800e1a0 <f_close>
	cdc="END of program\n";
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <sd_card_stop+0x3c>)
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <sd_card_stop+0x40>)
 8001586:	601a      	str	r2, [r3, #0]
	CDC_Transmit_FS(cdc, strlen(cdc));
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <sd_card_stop+0x3c>)
 800158a:	681c      	ldr	r4, [r3, #0]
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <sd_card_stop+0x3c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fe19 	bl	80001c8 <strlen>
 8001596:	4603      	mov	r3, r0
 8001598:	b29b      	uxth	r3, r3
 800159a:	4619      	mov	r1, r3
 800159c:	4620      	mov	r0, r4
 800159e:	f00d f811 	bl	800e5c4 <CDC_Transmit_FS>
	f_mount(&Fatfs, "", 0); // unmount yapıyor sd inactive ediyor diyebiliriz.
 80015a2:	2200      	movs	r2, #0
 80015a4:	4905      	ldr	r1, [pc, #20]	; (80015bc <sd_card_stop+0x44>)
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <sd_card_stop+0x48>)
 80015a8:	f00c f9d6 	bl	800d958 <f_mount>
}
 80015ac:	bf00      	nop
 80015ae:	bd98      	pop	{r3, r4, r7, pc}
 80015b0:	20001384 	.word	0x20001384
 80015b4:	2000034c 	.word	0x2000034c
 80015b8:	0800ef8c 	.word	0x0800ef8c
 80015bc:	0800eefc 	.word	0x0800eefc
 80015c0:	20000350 	.word	0x20000350

080015c4 <sd_card_write>:

void sd_card_write(uint8_t data[]){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	f_puts((char*)(data),strlen(data));
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe fdfb 	bl	80001c8 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f00c feb5 	bl	800e346 <f_puts>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <i2c1_AM2320_sensor>:

///////////////////////////////////////////////////////////////////
void i2c1_AM2320_sensor(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, am2320_address, am2320_read_address,1,data_humidity , 2, 1000);
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <i2c1_AM2320_sensor+0x3c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b299      	uxth	r1, r3
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <i2c1_AM2320_sensor+0x40>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	2302      	movs	r3, #2
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <i2c1_AM2320_sensor+0x44>)
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2301      	movs	r3, #1
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <i2c1_AM2320_sensor+0x48>)
 8001608:	f001 fecc 	bl	80033a4 <HAL_I2C_Mem_Read>
	sd_card_start();
 800160c:	f7ff ff0c 	bl	8001428 <sd_card_start>
	sd_card_write(data_humidity);
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <i2c1_AM2320_sensor+0x44>)
 8001612:	f7ff ffd7 	bl	80015c4 <sd_card_write>
	sd_card_stop();
 8001616:	f7ff ffaf 	bl	8001578 <sd_card_stop>

}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	20000001 	.word	0x20000001
 8001628:	200023d0 	.word	0x200023d0
 800162c:	2000016c 	.word	0x2000016c

08001630 <ADXL345_Read>:
/////////////////////////////////////////////////////////////////////


void ADXL345_Read(uint8_t rRegister,uint8_t numberOfBytes){
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	4603      	mov	r3, r0
 8001638:	460a      	mov	r2, r1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, rRegister, 1, myDatas, numberOfBytes , 100); // 100 ms ,1 byte rRegister uzunlugu
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	b29a      	uxth	r2, r3
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	b29b      	uxth	r3, r3
 8001648:	2164      	movs	r1, #100	; 0x64
 800164a:	9102      	str	r1, [sp, #8]
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <ADXL345_Read+0x38>)
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <ADXL345_Read+0x3c>)
 800165a:	f001 fea3 	bl	80033a4 <HAL_I2C_Mem_Read>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200023d4 	.word	0x200023d4
 800166c:	2000016c 	.word	0x2000016c

08001670 <ADXL345_Write>:

void ADXL345_Write(uint8_t wRegister,uint8_t value){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	4613      	mov	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2]={0};
 8001680:	2300      	movs	r3, #0
 8001682:	81bb      	strh	r3, [r7, #12]
	data[0]=wRegister;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_I2C_SLAVE_ADDRESS, data, 2, 100);
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2302      	movs	r3, #2
 8001696:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <ADXL345_Write+0x38>)
 800169c:	f001 fc8a 	bl	8002fb4 <HAL_I2C_Master_Transmit>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000016c 	.word	0x2000016c

080016ac <ADXL345_Init>:

void ADXL345_Init(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0


	ADXL345_Read(0x00,1); // 0x00 registerindan 0xE5 okuyorsak demekki cihaz dogru calışıyordur
 80016b0:	2101      	movs	r1, #1
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff ffbc 	bl	8001630 <ADXL345_Read>
	ADXL345_Write(0x2D, 0); // reset all bits
 80016b8:	2100      	movs	r1, #0
 80016ba:	202d      	movs	r0, #45	; 0x2d
 80016bc:	f7ff ffd8 	bl	8001670 <ADXL345_Write>
	// Setup ->
	ADXL345_Write(0x2D,0x08); // measure bit 1,wake up bit 0,autosleep 0,sleep 0 and wakeup frequency 8 hz
 80016c0:	2108      	movs	r1, #8
 80016c2:	202d      	movs	r0, #45	; 0x2d
 80016c4:	f7ff ffd4 	bl	8001670 <ADXL345_Write>
	ADXL345_Write(0x31, 0x01); // +- 4g range
 80016c8:	2101      	movs	r1, #1
 80016ca:	2031      	movs	r0, #49	; 0x31
 80016cc:	f7ff ffd0 	bl	8001670 <ADXL345_Write>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0000      	movs	r0, r0
	...

080016d8 <i2c1_adxl345_sensor>:

void i2c1_adxl345_sensor(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

	 ADXL345_Read(0x32, 6);
 80016dc:	2106      	movs	r1, #6
 80016de:	2032      	movs	r0, #50	; 0x32
 80016e0:	f7ff ffa6 	bl	8001630 <ADXL345_Read>
	  x = (myDatas[1] << 8 ) | myDatas[0];  // x values in myDatas[0] & myDatas[1]
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <i2c1_adxl345_sensor+0xdc>)
 80016f8:	801a      	strh	r2, [r3, #0]
	  y = (myDatas[3] << 8 ) | myDatas[2];  // y values in myDatas[2] & myDatas[3]
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 80016fc:	78db      	ldrb	r3, [r3, #3]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <i2c1_adxl345_sensor+0xe0>)
 800170e:	801a      	strh	r2, [r3, #0]
	  z = (myDatas[5] << 8 ) | myDatas[4];  // z values in myDatas[4] & myDatas[5]
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 8001712:	795b      	ldrb	r3, [r3, #5]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <i2c1_adxl345_sensor+0xd8>)
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <i2c1_adxl345_sensor+0xe4>)
 8001724:	801a      	strh	r2, [r3, #0]

	  xG =x*0.0087;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <i2c1_adxl345_sensor+0xdc>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ffcf 	bl	80006d0 <__aeabi_i2d>
 8001732:	a31d      	add	r3, pc, #116	; (adr r3, 80017a8 <i2c1_adxl345_sensor+0xd0>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fd4e 	bl	80001d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f82e 	bl	80007a4 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <i2c1_adxl345_sensor+0xe8>)
 800174c:	6013      	str	r3, [r2, #0]
	  yG =y*0.0087;
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <i2c1_adxl345_sensor+0xe0>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ffbb 	bl	80006d0 <__aeabi_i2d>
 800175a:	a313      	add	r3, pc, #76	; (adr r3, 80017a8 <i2c1_adxl345_sensor+0xd0>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe fd3a 	bl	80001d8 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f81a 	bl	80007a4 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <i2c1_adxl345_sensor+0xec>)
 8001774:	6013      	str	r3, [r2, #0]
	  zG =z*0.0087;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <i2c1_adxl345_sensor+0xe4>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ffa7 	bl	80006d0 <__aeabi_i2d>
 8001782:	a309      	add	r3, pc, #36	; (adr r3, 80017a8 <i2c1_adxl345_sensor+0xd0>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe fd26 	bl	80001d8 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f806 	bl	80007a4 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <i2c1_adxl345_sensor+0xf0>)
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	3bcd35a8 	.word	0x3bcd35a8
 80017ac:	3f81d14e 	.word	0x3f81d14e
 80017b0:	200023d4 	.word	0x200023d4
 80017b4:	200023da 	.word	0x200023da
 80017b8:	200023dc 	.word	0x200023dc
 80017bc:	200023de 	.word	0x200023de
 80017c0:	200023e0 	.word	0x200023e0
 80017c4:	200023e4 	.word	0x200023e4
 80017c8:	200023e8 	.word	0x200023e8

080017cc <i2c1_bmp180_sensor>:



//////////////////////////////////////////////////////////////////////////////////////////////
void i2c1_bmp180_sensor(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	 BMP180_Get_Temparature();
 80017d0:	f7ff fc36 	bl	8001040 <BMP180_Get_Temparature>
	 BMP180_Get_Pressure();
 80017d4:	f7ff fca4 	bl	8001120 <BMP180_Get_Pressure>

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_TIM_PeriodElapsedCallback>:



//////////////////////////////////////////////////////////////////////////////////////////////
// TIM2 : timer interrupt per second.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	// ......

	i2c1_AM2320_sensor(); // is done.
 80017e4:	f7ff fefe 	bl	80015e4 <i2c1_AM2320_sensor>
	i2c1_adxl345_sensor(); // not yet
 80017e8:	f7ff ff76 	bl	80016d8 <i2c1_adxl345_sensor>
	i2c1_bmp180_sensor(); // not yet
 80017ec:	f7ff ffee 	bl	80017cc <i2c1_bmp180_sensor>

}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fc:	f000 fbbc 	bl	8001f78 <HAL_Init>

  /* USER CODE BEGIN Init */



  ADXL345_Init();
 8001800:	f7ff ff54 	bl	80016ac <ADXL345_Init>
  BMP180_Init();
 8001804:	f7ff f9a0 	bl	8000b48 <BMP180_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001808:	f000 f814 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180c:	f000 f940 	bl	8001a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001810:	f000 f916 	bl	8001a40 <MX_DMA_Init>
  MX_I2C1_Init();
 8001814:	f000 f878 	bl	8001908 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8001818:	f000 f8a4 	bl	8001964 <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 800181c:	f000 f8c2 	bl	80019a4 <MX_TIM2_Init>
  MX_FATFS_Init();
 8001820:	f008 f86c 	bl	80098fc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001824:	f00c fe10 	bl	800e448 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start_IT(&htim2); //TIM2 start init.
 8001828:	4801      	ldr	r0, [pc, #4]	; (8001830 <main+0x38>)
 800182a:	f005 fad3 	bl	8006dd4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800182e:	e7fe      	b.n	800182e <main+0x36>
 8001830:	20000304 	.word	0x20000304

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f00d fb3e 	bl	800eec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <SystemClock_Config+0xcc>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a27      	ldr	r2, [pc, #156]	; (8001900 <SystemClock_Config+0xcc>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b25      	ldr	r3, [pc, #148]	; (8001900 <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <SystemClock_Config+0xd0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <SystemClock_Config+0xd0>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018a8:	23a8      	movs	r3, #168	; 0xa8
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018b0:	2307      	movs	r3, #7
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ff21 	bl	8005700 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018c4:	f000 f936 	bl	8001b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 f982 	bl	8005bf0 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018f2:	f000 f91f 	bl	8001b34 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3750      	adds	r7, #80	; 0x50
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_I2C1_Init+0x50>)
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <MX_I2C1_Init+0x54>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_I2C1_Init+0x50>)
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_I2C1_Init+0x58>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_I2C1_Init+0x50>)
 8001926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_I2C1_Init+0x50>)
 8001946:	f001 f9f1 	bl	8002d2c <HAL_I2C_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001950:	f000 f8f0 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	2000016c 	.word	0x2000016c
 800195c:	40005400 	.word	0x40005400
 8001960:	000186a0 	.word	0x000186a0

08001964 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_SDIO_SD_Init+0x38>)
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <MX_SDIO_SD_Init+0x3c>)
 800196c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_SDIO_SD_Init+0x38>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_SDIO_SD_Init+0x38>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_SDIO_SD_Init+0x38>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_SDIO_SD_Init+0x38>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <MX_SDIO_SD_Init+0x38>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <MX_SDIO_SD_Init+0x38>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	200001c0 	.word	0x200001c0
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1999;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ec:	f005 f9a2 	bl	8006d34 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019f6:	f000 f89d 	bl	8001b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a08:	f005 fb5c 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a12:	f000 f88f 	bl	8001b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a24:	f005 fd78 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f000 f881 	bl	8001b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000304 	.word	0x20000304

08001a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_DMA_Init+0x4c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <MX_DMA_Init+0x4c>)
 8001a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <MX_DMA_Init+0x4c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	203b      	movs	r0, #59	; 0x3b
 8001a68:	f000 fbf7 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a6c:	203b      	movs	r0, #59	; 0x3b
 8001a6e:	f000 fc10 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2045      	movs	r0, #69	; 0x45
 8001a78:	f000 fbef 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a7c:	2045      	movs	r0, #69	; 0x45
 8001a7e:	f000 fc08 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_GPIO_Init+0xa0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <Error_Handler+0x8>
	...

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_MspInit+0x4c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_I2C_MspInit+0x84>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d12b      	bne.n	8001c0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bde:	2304      	movs	r3, #4
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <HAL_I2C_MspInit+0x8c>)
 8001bea:	f000 fee9 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_I2C_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020400 	.word	0x40020400

08001c20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6c      	ldr	r2, [pc, #432]	; (8001df0 <HAL_SD_MspInit+0x1d0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	f040 80d2 	bne.w	8001de8 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c52:	6453      	str	r3, [r2, #68]	; 0x44
 8001c54:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4a62      	ldr	r2, [pc, #392]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c70:	4b60      	ldr	r3, [pc, #384]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4b5c      	ldr	r3, [pc, #368]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a5b      	ldr	r2, [pc, #364]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_SD_MspInit+0x1d4>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001caa:	230c      	movs	r3, #12
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4850      	ldr	r0, [pc, #320]	; (8001df8 <HAL_SD_MspInit+0x1d8>)
 8001cb6:	f000 fe83 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4848      	ldr	r0, [pc, #288]	; (8001df8 <HAL_SD_MspInit+0x1d8>)
 8001cd8:	f000 fe72 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cec:	230c      	movs	r3, #12
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4841      	ldr	r0, [pc, #260]	; (8001dfc <HAL_SD_MspInit+0x1dc>)
 8001cf8:	f000 fe62 	bl	80029c0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001cfe:	4a41      	ldr	r2, [pc, #260]	; (8001e04 <HAL_SD_MspInit+0x1e4>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d08:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d1e:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d24:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d30:	2220      	movs	r2, #32
 8001d32:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d42:	2203      	movs	r2, #3
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d4e:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001d56:	482a      	ldr	r0, [pc, #168]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d58:	f000 fab6 	bl	80022c8 <HAL_DMA_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001d62:	f7ff fee7 	bl	8001b34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_SD_MspInit+0x1e0>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001d72:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d74:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_SD_MspInit+0x1ec>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d9a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001da6:	2220      	movs	r2, #32
 8001da8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001db8:	2203      	movs	r2, #3
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001dbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001dc6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001dcc:	480e      	ldr	r0, [pc, #56]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001dce:	f000 fa7b 	bl	80022c8 <HAL_DMA_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001dd8:	f7ff feac 	bl	8001b34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001de0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_SD_MspInit+0x1e8>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	20000244 	.word	0x20000244
 8001e04:	40026458 	.word	0x40026458
 8001e08:	200002a4 	.word	0x200002a4
 8001e0c:	400264a0 	.word	0x400264a0

08001e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d115      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_TIM_Base_MspInit+0x48>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_TIM_Base_MspInit+0x48>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_TIM_Base_MspInit+0x48>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	201c      	movs	r0, #28
 8001e44:	f000 fa09 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e48:	201c      	movs	r0, #28
 8001e4a:	f000 fa22 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f8b8 	bl	800201c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <TIM2_IRQHandler+0x10>)
 8001eb6:	f004 fffd 	bl	8006eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000304 	.word	0x20000304

08001ec4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA2_Stream3_IRQHandler+0x10>)
 8001eca:	f000 fb03 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000244 	.word	0x20000244

08001ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <OTG_FS_IRQHandler+0x10>)
 8001ede:	f002 fae2 	bl	80044a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20003914 	.word	0x20003914

08001eec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DMA2_Stream6_IRQHandler+0x10>)
 8001ef2:	f000 faef 	bl	80024d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002a4 	.word	0x200002a4

08001f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff ffd7 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f00c ff93 	bl	800ee7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7ff fc4f 	bl	80017f8 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001f68:	0800f0ec 	.word	0x0800f0ec
  ldr r2, =_sbss
 8001f6c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001f70:	20004040 	.word	0x20004040

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>
	...

08001f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <HAL_Init+0x40>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_Init+0x40>)
 8001f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_Init+0x40>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 f94f 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f000 f808 	bl	8001fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fac:	f7ff fdc8 	bl	8001b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023c00 	.word	0x40023c00

08001fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x54>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_InitTick+0x58>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f967 	bl	80022ae <HAL_SYSTICK_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00e      	b.n	8002008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d80a      	bhi.n	8002006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f92f 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <HAL_InitTick+0x5c>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000004 	.word	0x20000004
 8002014:	2000000c 	.word	0x2000000c
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x20>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_IncTick+0x24>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4413      	add	r3, r2
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_IncTick+0x24>)
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000000c 	.word	0x2000000c
 8002040:	200023ec 	.word	0x200023ec

08002044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return uwTick;
 8002048:	4b03      	ldr	r3, [pc, #12]	; (8002058 <HAL_GetTick+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	200023ec 	.word	0x200023ec

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff ffee 	bl	8002044 <HAL_GetTick>
 8002068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d005      	beq.n	8002082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_Delay+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002082:	bf00      	nop
 8002084:	f7ff ffde 	bl	8002044 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	429a      	cmp	r2, r3
 8002092:	d8f7      	bhi.n	8002084 <HAL_Delay+0x28>
  {
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000000c 	.word	0x2000000c

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff feb6 	bl	8002044 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e099      	b.n	8002418 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002304:	e00f      	b.n	8002326 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002306:	f7ff fe9d 	bl	8002044 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b05      	cmp	r3, #5
 8002312:	d908      	bls.n	8002326 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e078      	b.n	8002418 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e8      	bne.n	8002306 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4b38      	ldr	r3, [pc, #224]	; (8002420 <HAL_DMA_Init+0x158>)
 8002340:	4013      	ands	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	4313      	orrs	r3, r2
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f023 0307 	bic.w	r3, r3, #7
 80023a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d117      	bne.n	80023ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fa7b 	bl	80028c8 <DMA_CheckFifoParam>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023e6:	2301      	movs	r3, #1
 80023e8:	e016      	b.n	8002418 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa32 	bl	800285c <DMA_CalcBaseAndBitshift>
 80023f8:	4603      	mov	r3, r0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	223f      	movs	r2, #63	; 0x3f
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f010803f 	.word	0xf010803f

08002424 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_DMA_Start_IT+0x26>
 8002446:	2302      	movs	r3, #2
 8002448:	e040      	b.n	80024cc <HAL_DMA_Start_IT+0xa8>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12f      	bne.n	80024be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f9c4 	bl	8002800 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0216 	orr.w	r2, r2, #22
 8002492:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0208 	orr.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e005      	b.n	80024ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024e0:	4b8e      	ldr	r3, [pc, #568]	; (800271c <HAL_DMA_IRQHandler+0x248>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a8e      	ldr	r2, [pc, #568]	; (8002720 <HAL_DMA_IRQHandler+0x24c>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a9b      	lsrs	r3, r3, #10
 80024ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2208      	movs	r2, #8
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d01a      	beq.n	8002540 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252c:	2208      	movs	r2, #8
 800252e:	409a      	lsls	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	2201      	movs	r2, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d012      	beq.n	8002576 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	2201      	movs	r2, #1
 8002564:	409a      	lsls	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f043 0202 	orr.w	r2, r3, #2
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2204      	movs	r2, #4
 800257c:	409a      	lsls	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d012      	beq.n	80025ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2204      	movs	r2, #4
 800259a:	409a      	lsls	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	2210      	movs	r2, #16
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d043      	beq.n	8002644 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d03c      	beq.n	8002644 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2210      	movs	r2, #16
 80025d0:	409a      	lsls	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d018      	beq.n	8002616 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d024      	beq.n	8002644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	4798      	blx	r3
 8002602:	e01f      	b.n	8002644 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01b      	beq.n	8002644 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
 8002614:	e016      	b.n	8002644 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0208 	bic.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2220      	movs	r2, #32
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 808f 	beq.w	8002774 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8087 	beq.w	8002774 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2220      	movs	r2, #32
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b05      	cmp	r3, #5
 800267c:	d136      	bne.n	80026ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0216 	bic.w	r2, r2, #22
 800268c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800269c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_DMA_IRQHandler+0x1da>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0208 	bic.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	223f      	movs	r2, #63	; 0x3f
 80026c4:	409a      	lsls	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d07e      	beq.n	80027e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
        }
        return;
 80026ea:	e079      	b.n	80027e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01d      	beq.n	8002736 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10d      	bne.n	8002724 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	2b00      	cmp	r3, #0
 800270e:	d031      	beq.n	8002774 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
 8002718:	e02c      	b.n	8002774 <HAL_DMA_IRQHandler+0x2a0>
 800271a:	bf00      	nop
 800271c:	20000004 	.word	0x20000004
 8002720:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d023      	beq.n	8002774 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e01e      	b.n	8002774 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10f      	bne.n	8002764 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0210 	bic.w	r2, r2, #16
 8002752:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	2b00      	cmp	r3, #0
 800277a:	d032      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d022      	beq.n	80027ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2205      	movs	r2, #5
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d307      	bcc.n	80027bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f2      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x2cc>
 80027ba:	e000      	b.n	80027be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e000      	b.n	80027e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027e0:	bf00      	nop
    }
  }
}
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800281c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d108      	bne.n	8002840 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800283e:	e007      	b.n	8002850 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3b10      	subs	r3, #16
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <DMA_CalcBaseAndBitshift+0x64>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d909      	bls.n	800289e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	659a      	str	r2, [r3, #88]	; 0x58
 800289c:	e007      	b.n	80028ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028a6:	f023 0303 	bic.w	r3, r3, #3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	aaaaaaab 	.word	0xaaaaaaab
 80028c4:	0800f040 	.word	0x0800f040

080028c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11f      	bne.n	8002922 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d856      	bhi.n	8002996 <DMA_CheckFifoParam+0xce>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <DMA_CheckFifoParam+0x28>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002913 	.word	0x08002913
 80028f8:	08002901 	.word	0x08002901
 80028fc:	08002997 	.word	0x08002997
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d046      	beq.n	800299a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e043      	b.n	800299a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800291a:	d140      	bne.n	800299e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002920:	e03d      	b.n	800299e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	d121      	bne.n	8002970 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d837      	bhi.n	80029a2 <DMA_CheckFifoParam+0xda>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <DMA_CheckFifoParam+0x70>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	08002949 	.word	0x08002949
 800293c:	0800294f 	.word	0x0800294f
 8002940:	08002949 	.word	0x08002949
 8002944:	08002961 	.word	0x08002961
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e030      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d025      	beq.n	80029a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295e:	e022      	b.n	80029a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002968:	d11f      	bne.n	80029aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800296e:	e01c      	b.n	80029aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d903      	bls.n	800297e <DMA_CheckFifoParam+0xb6>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d003      	beq.n	8002984 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800297c:	e018      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
      break;
 8002982:	e015      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00e      	beq.n	80029ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      break;
 8002994:	e00b      	b.n	80029ae <DMA_CheckFifoParam+0xe6>
      break;
 8002996:	bf00      	nop
 8002998:	e00a      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e008      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e006      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;
 80029a2:	bf00      	nop
 80029a4:	e004      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
 80029a8:	e002      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80029aa:	bf00      	nop
 80029ac:	e000      	b.n	80029b0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ae:	bf00      	nop
    }
  } 
  
  return status; 
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e16b      	b.n	8002cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 815a 	bne.w	8002cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d005      	beq.n	8002a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d130      	bne.n	8002a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 0201 	and.w	r2, r3, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d017      	beq.n	8002ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80b4 	beq.w	8002cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b62:	4a5b      	ldr	r2, [pc, #364]	; (8002cd0 <HAL_GPIO_Init+0x310>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_GPIO_Init+0x314>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <HAL_GPIO_Init+0x318>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x222>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a50      	ldr	r2, [pc, #320]	; (8002cdc <HAL_GPIO_Init+0x31c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x21e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x320>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x21a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4e      	ldr	r2, [pc, #312]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x216>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x212>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_GPIO_Init+0x32c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x20e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x20a>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	e00e      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	e00c      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bce:	2306      	movs	r3, #6
 8002bd0:	e00a      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	e008      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e004      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002be6:	2300      	movs	r3, #0
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f002 0203 	and.w	r2, r2, #3
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	4093      	lsls	r3, r2
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf8:	4935      	ldr	r1, [pc, #212]	; (8002cd0 <HAL_GPIO_Init+0x310>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	f67f ae90 	bls.w	80029dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40021400 	.word	0x40021400
 8002cec:	40021800 	.word	0x40021800
 8002cf0:	40021c00 	.word	0x40021c00
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e12b      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe ff1c 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d90:	f003 f926 	bl	8005fe0 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a81      	ldr	r2, [pc, #516]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d807      	bhi.n	8002db0 <HAL_I2C_Init+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a80      	ldr	r2, [pc, #512]	; (8002fa4 <HAL_I2C_Init+0x278>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	bf94      	ite	ls
 8002da8:	2301      	movls	r3, #1
 8002daa:	2300      	movhi	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e006      	b.n	8002dbe <HAL_I2C_Init+0x92>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a7d      	ldr	r2, [pc, #500]	; (8002fa8 <HAL_I2C_Init+0x27c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bf94      	ite	ls
 8002db8:	2301      	movls	r3, #1
 8002dba:	2300      	movhi	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0e7      	b.n	8002f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <HAL_I2C_Init+0x280>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a6a      	ldr	r2, [pc, #424]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d802      	bhi.n	8002e00 <HAL_I2C_Init+0xd4>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	e009      	b.n	8002e14 <HAL_I2C_Init+0xe8>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a69      	ldr	r2, [pc, #420]	; (8002fb0 <HAL_I2C_Init+0x284>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	3301      	adds	r3, #1
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	495c      	ldr	r1, [pc, #368]	; (8002fa0 <HAL_I2C_Init+0x274>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d819      	bhi.n	8002e68 <HAL_I2C_Init+0x13c>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1e59      	subs	r1, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e42:	1c59      	adds	r1, r3, #1
 8002e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e48:	400b      	ands	r3, r1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_I2C_Init+0x138>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1e59      	subs	r1, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e62:	e051      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e04f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <HAL_I2C_Init+0x168>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e58      	subs	r0, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	440b      	add	r3, r1
 8002e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e012      	b.n	8002eba <HAL_I2C_Init+0x18e>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e58      	subs	r0, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	0099      	lsls	r1, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x196>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e022      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_I2C_Init+0x1bc>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1e58      	subs	r0, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	440b      	add	r3, r1
 8002ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Init+0x1dc>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6809      	ldr	r1, [r1, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6911      	ldr	r1, [r2, #16]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	4311      	orrs	r1, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	001e847f 	.word	0x001e847f
 8002fa8:	003d08ff 	.word	0x003d08ff
 8002fac:	431bde83 	.word	0x431bde83
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	817b      	strh	r3, [r7, #10]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff f83c 	bl	8002044 <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f040 80e0 	bne.w	800319c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2319      	movs	r3, #25
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4970      	ldr	r1, [pc, #448]	; (80031a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 ff30 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e0d3      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x50>
 8003000:	2302      	movs	r3, #2
 8003002:	e0cc      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d007      	beq.n	800302a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2221      	movs	r2, #33	; 0x21
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2210      	movs	r2, #16
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	893a      	ldrh	r2, [r7, #8]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_I2C_Master_Transmit+0x1f8>)
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800306c:	8979      	ldrh	r1, [r7, #10]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a3a      	ldr	r2, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fcea 	bl	8003a4c <I2C_MasterRequestWrite>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e08d      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003098:	e066      	b.n	8003168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 ffaa 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d11b      	bne.n	800313c <HAL_I2C_Master_Transmit+0x188>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	6a39      	ldr	r1, [r7, #32]
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 ff9a 	bl	800407a <I2C_WaitOnBTFFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b04      	cmp	r3, #4
 8003152:	d107      	bne.n	8003164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e01a      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d194      	bne.n	800309a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	00100002 	.word	0x00100002
 80031ac:	ffff0000 	.word	0xffff0000

080031b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ca:	f7fe ff3b 	bl	8002044 <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80d9 	bne.w	8003390 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	496d      	ldr	r1, [pc, #436]	; (800339c <HAL_I2C_Mem_Write+0x1ec>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fe2f 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e0cc      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Write+0x56>
 8003202:	2302      	movs	r3, #2
 8003204:	e0c5      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d007      	beq.n	800322c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2221      	movs	r2, #33	; 0x21
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a4d      	ldr	r2, [pc, #308]	; (80033a0 <HAL_I2C_Mem_Write+0x1f0>)
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800326e:	88f8      	ldrh	r0, [r7, #6]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4603      	mov	r3, r0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fc66 	bl	8003b50 <I2C_RequestMemoryWrite>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d052      	beq.n	8003330 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e081      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 feb0 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06b      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d11b      	bne.n	8003330 <HAL_I2C_Mem_Write+0x180>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	781a      	ldrb	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1aa      	bne.n	800328e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fe9c 	bl	800407a <I2C_WaitOnBTFFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b04      	cmp	r3, #4
 800334e:	d107      	bne.n	8003360 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e016      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	00100002 	.word	0x00100002
 80033a0:	ffff0000 	.word	0xffff0000

080033a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	4608      	mov	r0, r1
 80033ae:	4611      	mov	r1, r2
 80033b0:	461a      	mov	r2, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	817b      	strh	r3, [r7, #10]
 80033b6:	460b      	mov	r3, r1
 80033b8:	813b      	strh	r3, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033be:	f7fe fe41 	bl	8002044 <HAL_GetTick>
 80033c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	f040 8208 	bne.w	80037e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2319      	movs	r3, #25
 80033d8:	2201      	movs	r2, #1
 80033da:	497b      	ldr	r1, [pc, #492]	; (80035c8 <HAL_I2C_Mem_Read+0x224>)
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fd35 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	e1fb      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Mem_Read+0x56>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e1f4      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d007      	beq.n	8003420 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2222      	movs	r2, #34	; 0x22
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a5b      	ldr	r2, [pc, #364]	; (80035cc <HAL_I2C_Mem_Read+0x228>)
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003462:	88f8      	ldrh	r0, [r7, #6]
 8003464:	893a      	ldrh	r2, [r7, #8]
 8003466:	8979      	ldrh	r1, [r7, #10]
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	4603      	mov	r3, r0
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fc02 	bl	8003c7c <I2C_RequestMemoryRead>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1b0      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	d113      	bne.n	80034b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e184      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d11b      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e164      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d11b      	bne.n	8003532 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003508:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	e144      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003548:	e138      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b03      	cmp	r3, #3
 8003550:	f200 80f1 	bhi.w	8003736 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	2b01      	cmp	r3, #1
 800355a:	d123      	bne.n	80035a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fdcb 	bl	80040fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e139      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a2:	e10b      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d14e      	bne.n	800364a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2200      	movs	r2, #0
 80035b4:	4906      	ldr	r1, [pc, #24]	; (80035d0 <HAL_I2C_Mem_Read+0x22c>)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fc48 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e10e      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
 80035c6:	bf00      	nop
 80035c8:	00100002 	.word	0x00100002
 80035cc:	ffff0000 	.word	0xffff0000
 80035d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e0b8      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	2200      	movs	r2, #0
 8003652:	4966      	ldr	r1, [pc, #408]	; (80037ec <HAL_I2C_Mem_Read+0x448>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fbf9 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0bf      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	2200      	movs	r2, #0
 80036ae:	494f      	ldr	r1, [pc, #316]	; (80037ec <HAL_I2C_Mem_Read+0x448>)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fbcb 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e091      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003734:	e042      	b.n	80037bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fcde 	bl	80040fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e04c      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d118      	bne.n	80037bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f aec2 	bne.w	800354a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	00010004 	.word	0x00010004

080037f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7fe fc20 	bl	8002044 <HAL_GetTick>
 8003804:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 8111 	bne.w	8003a3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4988      	ldr	r1, [pc, #544]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fb12 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	e104      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2C_IsDeviceReady+0x50>
 800383c:	2302      	movs	r3, #2
 800383e:	e0fd      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2224      	movs	r2, #36	; 0x24
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a70      	ldr	r2, [pc, #448]	; (8003a48 <HAL_I2C_IsDeviceReady+0x258>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fad0 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c0:	d103      	bne.n	80038ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0b6      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ce:	897b      	ldrh	r3, [r7, #10]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80038de:	f7fe fbb1 	bl	8002044 <HAL_GetTick>
 80038e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003912:	e025      	b.n	8003960 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe fb96 	bl	8002044 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <HAL_I2C_IsDeviceReady+0x13a>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22a0      	movs	r2, #160	; 0xa0
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2ba0      	cmp	r3, #160	; 0xa0
 800396a:	d005      	beq.n	8003978 <HAL_I2C_IsDeviceReady+0x188>
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_I2C_IsDeviceReady+0x188>
 8003972:	7dbb      	ldrb	r3, [r7, #22]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0cd      	beq.n	8003914 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d129      	bne.n	80039e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2319      	movs	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	4921      	ldr	r1, [pc, #132]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fa44 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e036      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e02c      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	490f      	ldr	r1, [pc, #60]	; (8003a44 <HAL_I2C_IsDeviceReady+0x254>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fa20 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e012      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f4ff af32 	bcc.w	800388a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000

08003a4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d006      	beq.n	8003a76 <I2C_MasterRequestWrite+0x2a>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d003      	beq.n	8003a76 <I2C_MasterRequestWrite+0x2a>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a74:	d108      	bne.n	8003a88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e00b      	b.n	8003aa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	2b12      	cmp	r3, #18
 8003a8e:	d107      	bne.n	8003aa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f9cd 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac6:	d103      	bne.n	8003ad0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e035      	b.n	8003b40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003adc:	d108      	bne.n	8003af0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e01b      	b.n	8003b28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003af0:	897b      	ldrh	r3, [r7, #10]
 8003af2:	11db      	asrs	r3, r3, #7
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f003 0306 	and.w	r3, r3, #6
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f063 030f 	orn	r3, r3, #15
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	490e      	ldr	r1, [pc, #56]	; (8003b48 <I2C_MasterRequestWrite+0xfc>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f9f3 	bl	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e010      	b.n	8003b40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b1e:	897b      	ldrh	r3, [r7, #10]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4907      	ldr	r1, [pc, #28]	; (8003b4c <I2C_MasterRequestWrite+0x100>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f9e3 	bl	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	00010008 	.word	0x00010008
 8003b4c:	00010002 	.word	0x00010002

08003b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	817b      	strh	r3, [r7, #10]
 8003b62:	460b      	mov	r3, r1
 8003b64:	813b      	strh	r3, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f960 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00d      	beq.n	8003bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba0:	d103      	bne.n	8003baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e05f      	b.n	8003c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	492d      	ldr	r1, [pc, #180]	; (8003c78 <I2C_RequestMemoryWrite+0x128>)
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f998 	bl	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e04c      	b.n	8003c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fa02 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e02b      	b.n	8003c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	e021      	b.n	8003c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	6a39      	ldr	r1, [r7, #32]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f9dc 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d107      	bne.n	8003c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e005      	b.n	8003c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c62:	893b      	ldrh	r3, [r7, #8]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00010002 	.word	0x00010002

08003c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f8c2 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cdc:	d103      	bne.n	8003ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0aa      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	4952      	ldr	r1, [pc, #328]	; (8003e48 <I2C_RequestMemoryRead+0x1cc>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f8fa 	bl	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e097      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f964 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d107      	bne.n	8003d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e076      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]
 8003d62:	e021      	b.n	8003da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	6a39      	ldr	r1, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f93e 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e050      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	6a39      	ldr	r1, [r7, #32]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f923 	bl	8003ff8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d107      	bne.n	8003dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e035      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f82b 	bl	8003e4c <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0a:	d103      	bne.n	8003e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e013      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e18:	897b      	ldrh	r3, [r7, #10]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f043 0301 	orr.w	r3, r3, #1
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	6a3a      	ldr	r2, [r7, #32]
 8003e2c:	4906      	ldr	r1, [pc, #24]	; (8003e48 <I2C_RequestMemoryRead+0x1cc>)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f863 	bl	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	00010002 	.word	0x00010002

08003e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5c:	e025      	b.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e64:	d021      	beq.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fe f8ed 	bl	8002044 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d116      	bne.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e023      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10d      	bne.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	e00c      	b.n	8003eea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0b6      	beq.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f08:	e051      	b.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d123      	bne.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e046      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d021      	beq.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fe f86b 	bl	8002044 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d116      	bne.n	8003fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e020      	b.n	8003ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d10c      	bne.n	8003fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf14      	ite	ne
 8003fca:	2301      	movne	r3, #1
 8003fcc:	2300      	moveq	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e00b      	b.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d18d      	bne.n	8003f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004004:	e02d      	b.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f8ce 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e02d      	b.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d021      	beq.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401e:	f7fe f811 	bl	8002044 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d302      	bcc.n	8004034 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d116      	bne.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e007      	b.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b80      	cmp	r3, #128	; 0x80
 800406e:	d1ca      	bne.n	8004006 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004086:	e02d      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f88d 	bl	80041a8 <I2C_IsAcknowledgeFailed>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e02d      	b.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d021      	beq.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fd ffd0 	bl	8002044 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d116      	bne.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e007      	b.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d1ca      	bne.n	8004088 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004108:	e042      	b.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b10      	cmp	r3, #16
 8004116:	d119      	bne.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0210 	mvn.w	r2, #16
 8004120:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e029      	b.n	80041a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414c:	f7fd ff7a 	bl	8002044 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	d302      	bcc.n	8004162 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d116      	bne.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d1b5      	bne.n	800410a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d11b      	bne.n	80041f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f043 0204 	orr.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004208:	b08f      	sub	sp, #60	; 0x3c
 800420a:	af0a      	add	r7, sp, #40	; 0x28
 800420c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e10f      	b.n	8004438 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f00a fb0e 	bl	800e854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f004 f817 	bl	800828a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	687e      	ldr	r6, [r7, #4]
 8004264:	466d      	mov	r5, sp
 8004266:	f106 0410 	add.w	r4, r6, #16
 800426a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004276:	e885 0003 	stmia.w	r5, {r0, r1}
 800427a:	1d33      	adds	r3, r6, #4
 800427c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800427e:	6838      	ldr	r0, [r7, #0]
 8004280:	f003 feee 	bl	8008060 <USB_CoreInit>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0d0      	b.n	8004438 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f004 f805 	bl	80082ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e04a      	b.n	800433e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	333d      	adds	r3, #61	; 0x3d
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	333c      	adds	r3, #60	; 0x3c
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	b298      	uxth	r0, r3
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3344      	adds	r3, #68	; 0x44
 80042e4:	4602      	mov	r2, r0
 80042e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3340      	adds	r3, #64	; 0x40
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3348      	adds	r3, #72	; 0x48
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	334c      	adds	r3, #76	; 0x4c
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3354      	adds	r3, #84	; 0x54
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	3301      	adds	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d3af      	bcc.n	80042a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e044      	b.n	80043d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	3301      	adds	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d3b5      	bcc.n	800434e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	687e      	ldr	r6, [r7, #4]
 80043ea:	466d      	mov	r5, sp
 80043ec:	f106 0410 	add.w	r4, r6, #16
 80043f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8004400:	1d33      	adds	r3, r6, #4
 8004402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004404:	6838      	ldr	r0, [r7, #0]
 8004406:	f003 ff9d 	bl	8008344 <USB_DevInit>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e00d      	b.n	8004438 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f005 f8ec 	bl	800960e <USB_DevDisconnect>

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_PCD_Start+0x1c>
 8004458:	2302      	movs	r3, #2
 800445a:	e020      	b.n	800449e <HAL_PCD_Start+0x5e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b01      	cmp	r3, #1
 800446a:	d109      	bne.n	8004480 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004470:	2b01      	cmp	r3, #1
 8004472:	d005      	beq.n	8004480 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f003 feef 	bl	8008268 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f005 f89c 	bl	80095cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044a6:	b590      	push	{r4, r7, lr}
 80044a8:	b08d      	sub	sp, #52	; 0x34
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f005 f95a 	bl	8009776 <USB_GetMode>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f040 848a 	bne.w	8004dde <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f005 f8be 	bl	8009650 <USB_ReadInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8480 	beq.w	8004ddc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f005 f8ab 	bl	8009650 <USB_ReadInterrupts>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b02      	cmp	r3, #2
 8004502:	d107      	bne.n	8004514 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f002 0202 	and.w	r2, r2, #2
 8004512:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f005 f899 	bl	8009650 <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b10      	cmp	r3, #16
 8004526:	d161      	bne.n	80045ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0210 	bic.w	r2, r2, #16
 8004536:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	3304      	adds	r3, #4
 8004556:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	0c5b      	lsrs	r3, r3, #17
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	2b02      	cmp	r3, #2
 8004562:	d124      	bne.n	80045ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d035      	beq.n	80045dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800457a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	6a38      	ldr	r0, [r7, #32]
 8004584:	f004 fed0 	bl	8009328 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004594:	441a      	add	r2, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045a6:	441a      	add	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e016      	b.n	80045dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	0c5b      	lsrs	r3, r3, #17
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d110      	bne.n	80045dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045c0:	2208      	movs	r2, #8
 80045c2:	4619      	mov	r1, r3
 80045c4:	6a38      	ldr	r0, [r7, #32]
 80045c6:	f004 feaf 	bl	8009328 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	6a1a      	ldr	r2, [r3, #32]
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045d6:	441a      	add	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0210 	orr.w	r2, r2, #16
 80045ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 f82d 	bl	8009650 <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004600:	f040 80a7 	bne.w	8004752 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f005 f832 	bl	8009676 <USB_ReadDevAllOutEpInterrupt>
 8004612:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004614:	e099      	b.n	800474a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 808e 	beq.w	800473e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f005 f856 	bl	80096de <USB_ReadDevOutEPInterrupt>
 8004632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	2301      	movs	r3, #1
 800464e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fec2 	bl	80053dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	461a      	mov	r2, r3
 8004670:	2308      	movs	r3, #8
 8004672:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff98 	bl	80055ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	461a      	mov	r2, r3
 8004694:	2310      	movs	r3, #16
 8004696:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d030      	beq.n	8004704 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d109      	bne.n	80046c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	78db      	ldrb	r3, [r3, #3]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f00a f9b7 	bl	800ea60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	2302      	movs	r3, #2
 8004702:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	2320      	movs	r3, #32
 800471e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800473c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af62 	bne.w	8004616 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f004 ff7a 	bl	8009650 <USB_ReadInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004766:	f040 80db 	bne.w	8004920 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 ff9b 	bl	80096aa <USB_ReadDevAllInEpInterrupt>
 8004774:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800477a:	e0cd      	b.n	8004918 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80c2 	beq.w	800490c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f004 ffc1 	bl	800971a <USB_ReadDevInEPInterrupt>
 8004798:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d057      	beq.n	8004854 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c4:	4013      	ands	r3, r2
 80047c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	2301      	movs	r3, #1
 80047d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d132      	bne.n	8004848 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	4613      	mov	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	334c      	adds	r3, #76	; 0x4c
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4403      	add	r3, r0
 8004802:	3348      	adds	r3, #72	; 0x48
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4419      	add	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	334c      	adds	r3, #76	; 0x4c
 8004818:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	2b00      	cmp	r3, #0
 800481e:	d113      	bne.n	8004848 <HAL_PCD_IRQHandler+0x3a2>
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3354      	adds	r3, #84	; 0x54
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d108      	bne.n	8004848 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004840:	461a      	mov	r2, r3
 8004842:	2101      	movs	r1, #1
 8004844:	f004 ffc8 	bl	80097d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f00a f881 	bl	800e956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	461a      	mov	r2, r3
 800486c:	2308      	movs	r3, #8
 800486e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	461a      	mov	r2, r3
 8004888:	2310      	movs	r3, #16
 800488a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	461a      	mov	r2, r3
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d023      	beq.n	80048fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80048b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b4:	6a38      	ldr	r0, [r7, #32]
 80048b6:	f003 fea9 	bl	800860c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	3338      	adds	r3, #56	; 0x38
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	3304      	adds	r3, #4
 80048cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	78db      	ldrb	r3, [r3, #3]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d108      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f00a f8ce 	bl	800ea84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	461a      	mov	r2, r3
 80048f6:	2302      	movs	r3, #2
 80048f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fcdb 	bl	80052c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	3301      	adds	r3, #1
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	f47f af2e 	bne.w	800477c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f004 fe93 	bl	8009650 <USB_ReadInterrupts>
 800492a:	4603      	mov	r3, r0
 800492c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004934:	d122      	bne.n	800497c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004950:	2b01      	cmp	r3, #1
 8004952:	d108      	bne.n	8004966 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800495c:	2100      	movs	r1, #0
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fec2 	bl	80056e8 <HAL_PCDEx_LPM_Callback>
 8004964:	e002      	b.n	800496c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f00a f86c 	bl	800ea44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800497a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f004 fe65 	bl	8009650 <USB_ReadInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004990:	d112      	bne.n	80049b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d102      	bne.n	80049a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f00a f828 	bl	800e9f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80049b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 fe47 	bl	8009650 <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	f040 80b7 	bne.w	8004b3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2110      	movs	r1, #16
 80049ea:	4618      	mov	r0, r3
 80049ec:	f003 fe0e 	bl	800860c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f4:	e046      	b.n	8004a84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	461a      	mov	r2, r3
 8004a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	3301      	adds	r3, #1
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d3b3      	bcc.n	80049f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004aa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aba:	f043 030b 	orr.w	r3, r3, #11
 8004abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f043 030b 	orr.w	r3, r3, #11
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	e015      	b.n	8004b04 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004aea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004aee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f043 030b 	orr.w	r3, r3, #11
 8004b02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f004 fe55 	bl	80097d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f004 fd84 	bl	8009650 <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b52:	d124      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f004 fe1a 	bl	8009792 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fdcf 	bl	8008706 <USB_GetDevSpeed>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681c      	ldr	r4, [r3, #0]
 8004b74:	f001 fa28 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8004b78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	4620      	mov	r0, r4
 8004b84:	f003 face 	bl	8008124 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f009 ff0c 	bl	800e9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f004 fd54 	bl	8009650 <USB_ReadInterrupts>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f009 fee9 	bl	800e98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f002 0208 	and.w	r2, r2, #8
 8004bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f004 fd3f 	bl	8009650 <USB_ReadInterrupts>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d122      	bne.n	8004c22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004be8:	2301      	movs	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
 8004bec:	e014      	b.n	8004c18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb27 	bl	8005260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	3301      	adds	r3, #1
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d3e5      	bcc.n	8004bee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f004 fd12 	bl	8009650 <USB_ReadInterrupts>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c36:	d13b      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c38:	2301      	movs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	e02b      	b.n	8004c96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3340      	adds	r3, #64	; 0x40
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d115      	bne.n	8004c90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da12      	bge.n	8004c90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	333f      	adds	r3, #63	; 0x3f
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fae8 	bl	8005260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	3301      	adds	r3, #1
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3ce      	bcc.n	8004c3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f004 fccb 	bl	8009650 <USB_ReadInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc4:	d155      	bne.n	8004d72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	e045      	b.n	8004d58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d12e      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da2b      	bge.n	8004d52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004d06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d121      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d12:	4613      	mov	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d20:	2201      	movs	r2, #1
 8004d22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d4e:	6053      	str	r3, [r2, #4]
            break;
 8004d50:	e007      	b.n	8004d62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3301      	adds	r3, #1
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d3b4      	bcc.n	8004ccc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695a      	ldr	r2, [r3, #20]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fc6a 	bl	8009650 <USB_ReadInterrupts>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d86:	d10a      	bne.n	8004d9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f009 fe8d 	bl	800eaa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695a      	ldr	r2, [r3, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f004 fc54 	bl	8009650 <USB_ReadInterrupts>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d115      	bne.n	8004dde <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f009 fe7d 	bl	800eac4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6859      	ldr	r1, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e000      	b.n	8004dde <HAL_PCD_IRQHandler+0x938>
      return;
 8004ddc:	bf00      	nop
    }
  }
}
 8004dde:	3734      	adds	r7, #52	; 0x34
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd90      	pop	{r4, r7, pc}

08004de4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_PCD_SetAddress+0x1a>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e013      	b.n	8004e26 <HAL_PCD_SetAddress+0x42>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f004 fbb2 	bl	8009580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	4608      	mov	r0, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	70fb      	strb	r3, [r7, #3]
 8004e40:	460b      	mov	r3, r1
 8004e42:	803b      	strh	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da0f      	bge.n	8004e74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	f003 020f 	and.w	r2, r3, #15
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	3338      	adds	r3, #56	; 0x38
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	3304      	adds	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	705a      	strb	r2, [r3, #1]
 8004e72:	e00f      	b.n	8004e94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 020f 	and.w	r2, r3, #15
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ea0:	883a      	ldrh	r2, [r7, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	78ba      	ldrb	r2, [r7, #2]
 8004eaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ebe:	78bb      	ldrb	r3, [r7, #2]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d102      	bne.n	8004eca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_PCD_EP_Open+0xaa>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e00e      	b.n	8004ef6 <HAL_PCD_EP_Open+0xc8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 fc32 	bl	8008750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da0f      	bge.n	8004f32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	4613      	mov	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	3338      	adds	r3, #56	; 0x38
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	3304      	adds	r3, #4
 8004f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	705a      	strb	r2, [r3, #1]
 8004f30:	e00f      	b.n	8004f52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	3304      	adds	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_PCD_EP_Close+0x6e>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e00e      	b.n	8004f8a <HAL_PCD_EP_Close+0x8c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f003 fc70 	bl	8008860 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	4613      	mov	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3304      	adds	r3, #4
 8004fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d102      	bne.n	8004fee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fee:	7afb      	ldrb	r3, [r7, #11]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	6979      	ldr	r1, [r7, #20]
 8005006:	f003 ff4f 	bl	8008ea8 <USB_EP0StartXfer>
 800500a:	e008      	b.n	800501e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	f003 fcfd 	bl	8008a18 <USB_EPStartXfer>
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005068:	7afb      	ldrb	r3, [r7, #11]
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3338      	adds	r3, #56	; 0x38
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	3304      	adds	r3, #4
 800507e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2201      	movs	r2, #1
 8005096:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005098:	7afb      	ldrb	r3, [r7, #11]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d102      	bne.n	80050b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	461a      	mov	r2, r3
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	f003 feed 	bl	8008ea8 <USB_EP0StartXfer>
 80050ce:	e008      	b.n	80050e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	f003 fc9b 	bl	8008a18 <USB_EPStartXfer>
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d901      	bls.n	800510a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e050      	b.n	80051ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800510a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da0f      	bge.n	8005132 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	f003 020f 	and.w	r2, r3, #15
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	3338      	adds	r3, #56	; 0x38
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	3304      	adds	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	705a      	strb	r2, [r3, #1]
 8005130:	e00d      	b.n	800514e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4413      	add	r3, r2
 8005144:	3304      	adds	r3, #4
 8005146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_PCD_EP_SetStall+0x82>
 800516a:	2302      	movs	r3, #2
 800516c:	e01e      	b.n	80051ac <HAL_PCD_EP_SetStall+0xc0>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	4618      	mov	r0, r3
 800517e:	f004 f92b 	bl	80093d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	b2d9      	uxtb	r1, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800519c:	461a      	mov	r2, r3
 800519e:	f004 fb1b 	bl	80097d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	f003 020f 	and.w	r2, r3, #15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d901      	bls.n	80051d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e042      	b.n	8005258 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da0f      	bge.n	80051fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	f003 020f 	and.w	r2, r3, #15
 80051e0:	4613      	mov	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3338      	adds	r3, #56	; 0x38
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	3304      	adds	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	705a      	strb	r2, [r3, #1]
 80051f8:	e00f      	b.n	800521a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	b2da      	uxtb	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_PCD_EP_ClrStall+0x86>
 8005236:	2302      	movs	r3, #2
 8005238:	e00e      	b.n	8005258 <HAL_PCD_EP_ClrStall+0xa4>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	4618      	mov	r0, r3
 800524a:	f004 f933 	bl	80094b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800526c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005270:	2b00      	cmp	r3, #0
 8005272:	da0c      	bge.n	800528e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	3338      	adds	r3, #56	; 0x38
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	3304      	adds	r3, #4
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e00c      	b.n	80052a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 020f 	and.w	r2, r3, #15
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f003 ff52 	bl	8009158 <USB_EPStopXfer>
 80052b4:	4603      	mov	r3, r0
 80052b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b08a      	sub	sp, #40	; 0x28
 80052c6:	af02      	add	r7, sp, #8
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	3338      	adds	r3, #56	; 0x38
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	3304      	adds	r3, #4
 80052e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d901      	bls.n	80052fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e06c      	b.n	80053d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	429a      	cmp	r2, r3
 800530e:	d902      	bls.n	8005316 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3303      	adds	r3, #3
 800531a:	089b      	lsrs	r3, r3, #2
 800531c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800531e:	e02b      	b.n	8005378 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	429a      	cmp	r2, r3
 8005334:	d902      	bls.n	800533c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	3303      	adds	r3, #3
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6919      	ldr	r1, [r3, #16]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005354:	b2db      	uxtb	r3, r3
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f003 ffa6 	bl	80092ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	441a      	add	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	441a      	add	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	b29b      	uxth	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	429a      	cmp	r2, r3
 800538c:	d809      	bhi.n	80053a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005396:	429a      	cmp	r2, r3
 8005398:	d203      	bcs.n	80053a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1be      	bne.n	8005320 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d811      	bhi.n	80053d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f003 030f 	and.w	r3, r3, #15
 80053b4:	2201      	movs	r2, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	43db      	mvns	r3, r3
 80053c8:	6939      	ldr	r1, [r7, #16]
 80053ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ce:	4013      	ands	r3, r2
 80053d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	333c      	adds	r3, #60	; 0x3c
 80053f4:	3304      	adds	r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d17b      	bne.n	800550a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d015      	beq.n	8005448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	4a61      	ldr	r2, [pc, #388]	; (80055a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f240 80b9 	bls.w	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80b3 	beq.w	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	461a      	mov	r2, r3
 8005440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005444:	6093      	str	r3, [r2, #8]
 8005446:	e0a7      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	2320      	movs	r3, #32
 8005462:	6093      	str	r3, [r2, #8]
 8005464:	e098      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8093 	bne.w	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d90f      	bls.n	800549a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	461a      	mov	r2, r3
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	6093      	str	r3, [r2, #8]
 8005498:	e07e      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4413      	add	r3, r2
 80054ac:	3304      	adds	r3, #4
 80054ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	0159      	lsls	r1, r3, #5
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	440b      	add	r3, r1
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c6:	1ad2      	subs	r2, r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d114      	bne.n	80054fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054e4:	461a      	mov	r2, r3
 80054e6:	2101      	movs	r1, #1
 80054e8:	f004 f976 	bl	80097d8 <USB_EP0_OutStart>
 80054ec:	e006      	b.n	80054fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	441a      	add	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f009 fa0c 	bl	800e920 <HAL_PCD_DataOutStageCallback>
 8005508:	e046      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d124      	bne.n	800555c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	461a      	mov	r2, r3
 800552a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552e:	6093      	str	r3, [r2, #8]
 8005530:	e032      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	461a      	mov	r2, r3
 800554a:	2320      	movs	r3, #32
 800554c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f009 f9e3 	bl	800e920 <HAL_PCD_DataOutStageCallback>
 800555a:	e01d      	b.n	8005598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d114      	bne.n	800558c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	4613      	mov	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005584:	461a      	mov	r2, r3
 8005586:	2100      	movs	r1, #0
 8005588:	f004 f926 	bl	80097d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f009 f9c4 	bl	800e920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3720      	adds	r7, #32
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	4f54300a 	.word	0x4f54300a
 80055a8:	4f54310a 	.word	0x4f54310a

080055ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	333c      	adds	r3, #60	; 0x3c
 80055c4:	3304      	adds	r3, #4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <PCD_EP_OutSetupPacket_int+0x88>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d90e      	bls.n	8005600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f8:	461a      	mov	r2, r3
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f009 f97b 	bl	800e8fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <PCD_EP_OutSetupPacket_int+0x88>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d90c      	bls.n	8005628 <PCD_EP_OutSetupPacket_int+0x7c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d108      	bne.n	8005628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005620:	461a      	mov	r2, r3
 8005622:	2101      	movs	r1, #1
 8005624:	f004 f8d8 	bl	80097d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	4f54300a 	.word	0x4f54300a

08005638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
 8005644:	4613      	mov	r3, r2
 8005646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d107      	bne.n	8005666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005656:	883b      	ldrh	r3, [r7, #0]
 8005658:	0419      	lsls	r1, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	430a      	orrs	r2, r1
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
 8005664:	e028      	b.n	80056b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4413      	add	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
 8005678:	e00d      	b.n	8005696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	3340      	adds	r3, #64	; 0x40
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	3301      	adds	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	3b01      	subs	r3, #1
 800569c:	429a      	cmp	r2, r3
 800569e:	d3ec      	bcc.n	800567a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056a0:	883b      	ldrh	r3, [r7, #0]
 80056a2:	0418      	lsls	r0, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	4302      	orrs	r2, r0
 80056b0:	3340      	adds	r3, #64	; 0x40
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	887a      	ldrh	r2, [r7, #2]
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e267      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d075      	beq.n	800580a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800571e:	4b88      	ldr	r3, [pc, #544]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b04      	cmp	r3, #4
 8005728:	d00c      	beq.n	8005744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572a:	4b85      	ldr	r3, [pc, #532]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005732:	2b08      	cmp	r3, #8
 8005734:	d112      	bne.n	800575c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005736:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005742:	d10b      	bne.n	800575c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4b7e      	ldr	r3, [pc, #504]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05b      	beq.n	8005808 <HAL_RCC_OscConfig+0x108>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d157      	bne.n	8005808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e242      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x74>
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a75      	ldr	r2, [pc, #468]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e01d      	b.n	80057b0 <HAL_RCC_OscConfig+0xb0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x98>
 800577e:	4b70      	ldr	r3, [pc, #448]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6f      	ldr	r2, [pc, #444]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b6d      	ldr	r3, [pc, #436]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a6c      	ldr	r2, [pc, #432]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0xb0>
 8005798:	4b69      	ldr	r3, [pc, #420]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a68      	ldr	r2, [pc, #416]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	4b66      	ldr	r3, [pc, #408]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a65      	ldr	r2, [pc, #404]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80057aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d013      	beq.n	80057e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fc fc44 	bl	8002044 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057c0:	f7fc fc40 	bl	8002044 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e207      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0f0      	beq.n	80057c0 <HAL_RCC_OscConfig+0xc0>
 80057de:	e014      	b.n	800580a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fc fc30 	bl	8002044 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fc fc2c 	bl	8002044 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e1f3      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fa:	4b51      	ldr	r3, [pc, #324]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0xe8>
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d063      	beq.n	80058de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005816:	4b4a      	ldr	r3, [pc, #296]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005822:	4b47      	ldr	r3, [pc, #284]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800582a:	2b08      	cmp	r3, #8
 800582c:	d11c      	bne.n	8005868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582e:	4b44      	ldr	r3, [pc, #272]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583a:	4b41      	ldr	r3, [pc, #260]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_RCC_OscConfig+0x152>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e1c7      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005852:	4b3b      	ldr	r3, [pc, #236]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4937      	ldr	r1, [pc, #220]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005866:	e03a      	b.n	80058de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005870:	4b34      	ldr	r3, [pc, #208]	; (8005944 <HAL_RCC_OscConfig+0x244>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fc fbe5 	bl	8002044 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800587e:	f7fc fbe1 	bl	8002044 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e1a8      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005890:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589c:	4b28      	ldr	r3, [pc, #160]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4925      	ldr	r1, [pc, #148]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]
 80058b0:	e015      	b.n	80058de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCC_OscConfig+0x244>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fc fbc4 	bl	8002044 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058c0:	f7fc fbc0 	bl	8002044 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e187      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d2:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d036      	beq.n	8005958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d016      	beq.n	8005920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <HAL_RCC_OscConfig+0x248>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f8:	f7fc fba4 	bl	8002044 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005900:	f7fc fba0 	bl	8002044 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e167      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_OscConfig+0x240>)
 8005914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x200>
 800591e:	e01b      	b.n	8005958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_OscConfig+0x248>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005926:	f7fc fb8d 	bl	8002044 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800592c:	e00e      	b.n	800594c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592e:	f7fc fb89 	bl	8002044 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d907      	bls.n	800594c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e150      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
 8005940:	40023800 	.word	0x40023800
 8005944:	42470000 	.word	0x42470000
 8005948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594c:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 800594e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ea      	bne.n	800592e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8097 	beq.w	8005a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596a:	4b81      	ldr	r3, [pc, #516]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	4b7d      	ldr	r3, [pc, #500]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a7c      	ldr	r2, [pc, #496]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
 8005986:	4b7a      	ldr	r3, [pc, #488]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005996:	4b77      	ldr	r3, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x474>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d118      	bne.n	80059d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059a2:	4b74      	ldr	r3, [pc, #464]	; (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a73      	ldr	r2, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ae:	f7fc fb49 	bl	8002044 <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b6:	f7fc fb45 	bl	8002044 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e10c      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c8:	4b6a      	ldr	r3, [pc, #424]	; (8005b74 <HAL_RCC_OscConfig+0x474>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x2ea>
 80059dc:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a63      	ldr	r2, [pc, #396]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	e01c      	b.n	8005a24 <HAL_RCC_OscConfig+0x324>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d10c      	bne.n	8005a0c <HAL_RCC_OscConfig+0x30c>
 80059f2:	4b5f      	ldr	r3, [pc, #380]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	4a5e      	ldr	r2, [pc, #376]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 80059f8:	f043 0304 	orr.w	r3, r3, #4
 80059fc:	6713      	str	r3, [r2, #112]	; 0x70
 80059fe:	4b5c      	ldr	r3, [pc, #368]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a5b      	ldr	r2, [pc, #364]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	e00b      	b.n	8005a24 <HAL_RCC_OscConfig+0x324>
 8005a0c:	4b58      	ldr	r3, [pc, #352]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	4a57      	ldr	r2, [pc, #348]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	6713      	str	r3, [r2, #112]	; 0x70
 8005a18:	4b55      	ldr	r3, [pc, #340]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	4a54      	ldr	r2, [pc, #336]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	f023 0304 	bic.w	r3, r3, #4
 8005a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2c:	f7fc fb0a 	bl	8002044 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fc fb06 	bl	8002044 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0cb      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4a:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0ee      	beq.n	8005a34 <HAL_RCC_OscConfig+0x334>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a58:	f7fc faf4 	bl	8002044 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5e:	e00a      	b.n	8005a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a60:	f7fc faf0 	bl	8002044 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0b5      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a76:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ee      	bne.n	8005a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b39      	ldr	r3, [pc, #228]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	4a38      	ldr	r2, [pc, #224]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a1 	beq.w	8005be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a9e:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d05c      	beq.n	8005b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d141      	bne.n	8005b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab2:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab8:	f7fc fac4 	bl	8002044 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fc fac0 	bl	8002044 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e087      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	019b      	lsls	r3, r3, #6
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	041b      	lsls	r3, r3, #16
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	491b      	ldr	r1, [pc, #108]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0e:	f7fc fa99 	bl	8002044 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b16:	f7fc fa95 	bl	8002044 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e05c      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x416>
 8005b34:	e054      	b.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <HAL_RCC_OscConfig+0x478>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fc fa82 	bl	8002044 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fc fa7e 	bl	8002044 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e045      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <HAL_RCC_OscConfig+0x470>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x444>
 8005b62:	e03d      	b.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d107      	bne.n	8005b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e038      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40007000 	.word	0x40007000
 8005b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <HAL_RCC_OscConfig+0x4ec>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d028      	beq.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d121      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	085b      	lsrs	r3, r3, #1
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d107      	bne.n	8005bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800

08005bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0cc      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b68      	ldr	r3, [pc, #416]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d90c      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b65      	ldr	r3, [pc, #404]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b8      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c5c:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4a52      	ldr	r2, [pc, #328]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c68:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	494d      	ldr	r1, [pc, #308]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d044      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d119      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cae:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e06f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e067      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cce:	4b37      	ldr	r3, [pc, #220]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4934      	ldr	r1, [pc, #208]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc f9b0 	bl	8002044 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	e00a      	b.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce8:	f7fc f9ac 	bl	8002044 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e04f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 020c 	and.w	r2, r3, #12
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d1eb      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d20c      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1e:	4b22      	ldr	r3, [pc, #136]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4916      	ldr	r1, [pc, #88]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	; (8005db0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fc f910 	bl	8001fbc <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023c00 	.word	0x40023c00
 8005dac:	40023800 	.word	0x40023800
 8005db0:	0800f028 	.word	0x0800f028
 8005db4:	20000004 	.word	0x20000004
 8005db8:	20000008 	.word	0x20000008

08005dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc0:	b094      	sub	sp, #80	; 0x50
 8005dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc8:	2300      	movs	r3, #0
 8005dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dcc:	2300      	movs	r3, #0
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dd4:	4b79      	ldr	r3, [pc, #484]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 030c 	and.w	r3, r3, #12
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d00d      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x40>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	f200 80e1 	bhi.w	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dee:	e0db      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005df0:	4b73      	ldr	r3, [pc, #460]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005df4:	e0db      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df6:	4b73      	ldr	r3, [pc, #460]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dfa:	e0d8      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e06:	4b6d      	ldr	r3, [pc, #436]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d063      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e12:	4b6a      	ldr	r3, [pc, #424]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
 8005e26:	2300      	movs	r3, #0
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e2e:	4622      	mov	r2, r4
 8005e30:	462b      	mov	r3, r5
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	0159      	lsls	r1, r3, #5
 8005e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e40:	0150      	lsls	r0, r2, #5
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4621      	mov	r1, r4
 8005e48:	1a51      	subs	r1, r2, r1
 8005e4a:	6139      	str	r1, [r7, #16]
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e60:	4659      	mov	r1, fp
 8005e62:	018b      	lsls	r3, r1, #6
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	018a      	lsls	r2, r1, #6
 8005e6e:	4651      	mov	r1, sl
 8005e70:	ebb2 0801 	subs.w	r8, r2, r1
 8005e74:	4659      	mov	r1, fp
 8005e76:	eb63 0901 	sbc.w	r9, r3, r1
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8e:	4690      	mov	r8, r2
 8005e90:	4699      	mov	r9, r3
 8005e92:	4623      	mov	r3, r4
 8005e94:	eb18 0303 	adds.w	r3, r8, r3
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	eb49 0303 	adc.w	r3, r9, r3
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eae:	4629      	mov	r1, r5
 8005eb0:	024b      	lsls	r3, r1, #9
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eb8:	4621      	mov	r1, r4
 8005eba:	024a      	lsls	r2, r1, #9
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ecc:	f7fa fcba 	bl	8000844 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed8:	e058      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eda:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	099b      	lsrs	r3, r3, #6
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	f04f 0000 	mov.w	r0, #0
 8005efc:	f04f 0100 	mov.w	r1, #0
 8005f00:	0159      	lsls	r1, r3, #5
 8005f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f06:	0150      	lsls	r0, r2, #5
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f12:	4649      	mov	r1, r9
 8005f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f30:	eb63 050b 	sbc.w	r5, r3, fp
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	00eb      	lsls	r3, r5, #3
 8005f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f42:	00e2      	lsls	r2, r4, #3
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	4643      	mov	r3, r8
 8005f4a:	18e3      	adds	r3, r4, r3
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	464b      	mov	r3, r9
 8005f50:	eb45 0303 	adc.w	r3, r5, r3
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f62:	4629      	mov	r1, r5
 8005f64:	028b      	lsls	r3, r1, #10
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	028a      	lsls	r2, r1, #10
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f76:	2200      	movs	r2, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	61fa      	str	r2, [r7, #28]
 8005f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f80:	f7fa fc60 	bl	8000844 <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4613      	mov	r3, r2
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	3301      	adds	r3, #1
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fa6:	e002      	b.n	8005fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3750      	adds	r7, #80	; 0x50
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fba:	bf00      	nop
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	007a1200 	.word	0x007a1200

08005fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20000004 	.word	0x20000004

08005fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fe4:	f7ff fff0 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0a9b      	lsrs	r3, r3, #10
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	4903      	ldr	r1, [pc, #12]	; (8006004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff6:	5ccb      	ldrb	r3, [r1, r3]
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40023800 	.word	0x40023800
 8006004:	0800f038 	.word	0x0800f038

08006008 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e022      	b.n	8006060 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fb fdf7 	bl	8001c20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2203      	movs	r2, #3
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f814 	bl	8006068 <HAL_SD_InitCard>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e00a      	b.n	8006060 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006068:	b5b0      	push	{r4, r5, r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af04      	add	r7, sp, #16
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006070:	2300      	movs	r3, #0
 8006072:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006080:	2300      	movs	r3, #0
 8006082:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006084:	2376      	movs	r3, #118	; 0x76
 8006086:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681d      	ldr	r5, [r3, #0]
 800608c:	466c      	mov	r4, sp
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060a0:	4628      	mov	r0, r5
 80060a2:	f001 fac9 	bl	8007638 <SDIO_Init>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80060ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e04f      	b.n	8006158 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80060b8:	4b29      	ldr	r3, [pc, #164]	; (8006160 <HAL_SD_InitCard+0xf8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fae3 	bl	800768e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_SD_InitCard+0xf8>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80060ce:	2002      	movs	r0, #2
 80060d0:	f7fb ffc4 	bl	800205c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd77 	bl	8006bc8 <SD_PowerON>
 80060da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e02e      	b.n	8006158 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fc96 	bl	8006a2c <SD_InitCard>
 8006100:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e01b      	b.n	8006158 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fb42 	bl	80077b2 <SDMMC_CmdBlockLength>
 800612e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00f      	beq.n	8006156 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <HAL_SD_InitCard+0xfc>)
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	; 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bdb0      	pop	{r4, r5, r7, pc}
 8006160:	422580a0 	.word	0x422580a0
 8006164:	004005ff 	.word	0x004005ff

08006168 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0c0      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 80b9 	bne.w	8006310 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	441a      	add	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d907      	bls.n	80061c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e0a7      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2203      	movs	r2, #3
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2200      	movs	r2, #0
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a4c      	ldr	r2, [pc, #304]	; (800631c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a4b      	ldr	r2, [pc, #300]	; (8006320 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80061f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	2200      	movs	r2, #0
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3380      	adds	r3, #128	; 0x80
 800622c:	4619      	mov	r1, r3
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	025b      	lsls	r3, r3, #9
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	f7fc f8f5 	bl	8002424 <HAL_DMA_Start_IT>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d017      	beq.n	8006270 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a33      	ldr	r2, [pc, #204]	; (8006324 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e050      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006270:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	025b      	lsls	r3, r3, #9
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	025b      	lsls	r3, r3, #9
 800628e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006290:	2390      	movs	r3, #144	; 0x90
 8006292:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006294:	2302      	movs	r3, #2
 8006296:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006298:	2300      	movs	r3, #0
 800629a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800629c:	2301      	movs	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f107 0210 	add.w	r2, r7, #16
 80062a8:	4611      	mov	r1, r2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 fa55 	bl	800775a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d90a      	bls.n	80062cc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2282      	movs	r2, #130	; 0x82
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fab9 	bl	800783a <SDMMC_CmdReadMultiBlock>
 80062c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062ca:	e009      	b.n	80062e0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2281      	movs	r2, #129	; 0x81
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fa8c 	bl	80077f6 <SDMMC_CmdReadSingleBlock>
 80062de:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d012      	beq.n	800630c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e002      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	e000      	b.n	8006312 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3730      	adds	r7, #48	; 0x30
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	08006917 	.word	0x08006917
 8006320:	08006989 	.word	0x08006989
 8006324:	004005ff 	.word	0x004005ff
 8006328:	4225858c 	.word	0x4225858c

0800632c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08c      	sub	sp, #48	; 0x30
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d107      	bne.n	8006354 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0c5      	b.n	80064e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 80be 	bne.w	80064de <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	441a      	add	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006372:	429a      	cmp	r2, r3
 8006374:	d907      	bls.n	8006386 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e0ac      	b.n	80064e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	4a4e      	ldr	r2, [pc, #312]	; (80064e8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80063b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	4a4d      	ldr	r2, [pc, #308]	; (80064ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80063b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	2200      	movs	r2, #0
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d002      	beq.n	80063d0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	025b      	lsls	r3, r3, #9
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d90a      	bls.n	80063ec <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	22a0      	movs	r2, #160	; 0xa0
 80063da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa6d 	bl	80078c2 <SDMMC_CmdWriteMultiBlock>
 80063e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063ea:	e009      	b.n	8006400 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2290      	movs	r2, #144	; 0x90
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fa40 	bl	800787e <SDMMC_CmdWriteSingleBlock>
 80063fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d012      	beq.n	800642c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a39      	ldr	r2, [pc, #228]	; (80064f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e059      	b.n	80064e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800642c:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2240      	movs	r2, #64	; 0x40
 8006438:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3380      	adds	r3, #128	; 0x80
 8006462:	461a      	mov	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	025b      	lsls	r3, r3, #9
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	f7fb ffdb 	bl	8002424 <HAL_DMA_Start_IT>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01c      	beq.n	80064ae <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006482:	f023 0302 	bic.w	r3, r3, #2
 8006486:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e018      	b.n	80064e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	025b      	lsls	r3, r3, #9
 80064b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80064ba:	2390      	movs	r3, #144	; 0x90
 80064bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f107 0210 	add.w	r2, r7, #16
 80064d2:	4611      	mov	r1, r2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f940 	bl	800775a <SDIO_ConfigData>

      return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80064de:	2302      	movs	r3, #2
  }
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3730      	adds	r7, #48	; 0x30
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	080068ed 	.word	0x080068ed
 80064ec:	08006989 	.word	0x08006989
 80064f0:	004005ff 	.word	0x004005ff
 80064f4:	4225858c 	.word	0x4225858c

080064f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651a:	0f9b      	lsrs	r3, r3, #30
 800651c:	b2da      	uxtb	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006526:	0e9b      	lsrs	r3, r3, #26
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006538:	0e1b      	lsrs	r3, r3, #24
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	b2da      	uxtb	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654a:	0c1b      	lsrs	r3, r3, #16
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006556:	0a1b      	lsrs	r3, r3, #8
 8006558:	b2da      	uxtb	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	b2da      	uxtb	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800656c:	0d1b      	lsrs	r3, r3, #20
 800656e:	b29a      	uxth	r2, r3
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658a:	0bdb      	lsrs	r3, r3, #15
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659c:	0b9b      	lsrs	r3, r3, #14
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ae:	0b5b      	lsrs	r3, r3, #13
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c0:	0b1b      	lsrs	r3, r3, #12
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2200      	movs	r2, #0
 80065d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d163      	bne.n	80066a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e0:	009a      	lsls	r2, r3, #2
 80065e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065e6:	4013      	ands	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065ec:	0f92      	lsrs	r2, r2, #30
 80065ee:	431a      	orrs	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065f8:	0edb      	lsrs	r3, r3, #27
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	b2da      	uxtb	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660a:	0e1b      	lsrs	r3, r3, #24
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	b2da      	uxtb	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661c:	0d5b      	lsrs	r3, r3, #21
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662e:	0c9b      	lsrs	r3, r3, #18
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	b2da      	uxtb	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006640:	0bdb      	lsrs	r3, r3, #15
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	7e1b      	ldrb	r3, [r3, #24]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	3302      	adds	r3, #2
 8006664:	2201      	movs	r2, #1
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800666e:	fb03 f202 	mul.w	r2, r3, r2
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	7a1b      	ldrb	r3, [r3, #8]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	2201      	movs	r2, #1
 8006682:	409a      	lsls	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006690:	0a52      	lsrs	r2, r2, #9
 8006692:	fb03 f202 	mul.w	r2, r3, r2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066a0:	661a      	str	r2, [r3, #96]	; 0x60
 80066a2:	e031      	b.n	8006708 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d11d      	bne.n	80066e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	431a      	orrs	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	3301      	adds	r3, #1
 80066c8:	029a      	lsls	r2, r3, #10
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	661a      	str	r2, [r3, #96]	; 0x60
 80066e6:	e00f      	b.n	8006708 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a58      	ldr	r2, [pc, #352]	; (8006850 <HAL_SD_GetCardCSD+0x344>)
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e09d      	b.n	8006844 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670c:	0b9b      	lsrs	r3, r3, #14
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006736:	b2da      	uxtb	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	0fdb      	lsrs	r3, r3, #31
 8006742:	b2da      	uxtb	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674c:	0f5b      	lsrs	r3, r3, #29
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	b2da      	uxtb	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	0e9b      	lsrs	r3, r3, #26
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	b2da      	uxtb	r2, r3
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006770:	0d9b      	lsrs	r3, r3, #22
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	b2da      	uxtb	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	0d5b      	lsrs	r3, r3, #21
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	0c1b      	lsrs	r3, r3, #16
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	0bdb      	lsrs	r3, r3, #15
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	0b9b      	lsrs	r3, r3, #14
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	0b5b      	lsrs	r3, r3, #13
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	0b1b      	lsrs	r3, r3, #12
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	0a9b      	lsrs	r3, r3, #10
 8006804:	b2db      	uxtb	r3, r3
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	004005ff 	.word	0x004005ff

08006854 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa10 	bl	8006ce4 <SD_SendStatus>
 80068c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	0a5b      	lsrs	r3, r3, #9
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068e2:	693b      	ldr	r3, [r7, #16]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	2b82      	cmp	r3, #130	; 0x82
 800692a:	d111      	bne.n	8006950 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 ffe9 	bl	8007908 <SDMMC_CmdStopTransfer>
 8006936:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7ff fdd4 	bl	80064f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0208 	bic.w	r2, r2, #8
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f240 523a 	movw	r2, #1338	; 0x53a
 8006968:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f003 f843 	bl	8009a04 <HAL_SD_RxCpltCallback>
#endif
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fb ff26 	bl	80027e8 <HAL_DMA_GetError>
 800699c:	4603      	mov	r3, r0
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d03e      	beq.n	8006a20 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d002      	beq.n	80069be <SD_DMAError+0x36>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d12d      	bne.n	8006a1a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <SD_DMAError+0xa0>)
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f7ff ff62 	bl	80068ac <HAL_SD_GetCardState>
 80069e8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b06      	cmp	r3, #6
 80069ee:	d002      	beq.n	80069f6 <SD_DMAError+0x6e>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d10a      	bne.n	8006a0c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 ff84 	bl	8007908 <SDMMC_CmdStopTransfer>
 8006a00:	4602      	mov	r2, r0
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	431a      	orrs	r2, r3
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006a1a:	6978      	ldr	r0, [r7, #20]
 8006a1c:	f7ff fd6c 	bl	80064f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006a20:	bf00      	nop
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	004005ff 	.word	0x004005ff

08006a2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a2c:	b5b0      	push	{r4, r5, r7, lr}
 8006a2e:	b094      	sub	sp, #80	; 0x50
 8006a30:	af04      	add	r7, sp, #16
 8006a32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fe34 	bl	80076aa <SDIO_GetPowerState>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a4c:	e0b8      	b.n	8006bc0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d02f      	beq.n	8006ab6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f81b 	bl	8007a96 <SDMMC_CmdSendCID>
 8006a60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <SD_InitCard+0x40>
    {
      return errorstate;
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	e0a9      	b.n	8006bc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2100      	movs	r1, #0
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fe5e 	bl	8007734 <SDIO_GetResponse>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2104      	movs	r1, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 fe55 	bl	8007734 <SDIO_GetResponse>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2108      	movs	r1, #8
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fe4c 	bl	8007734 <SDIO_GetResponse>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	210c      	movs	r1, #12
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fe43 	bl	8007734 <SDIO_GetResponse>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d00d      	beq.n	8006ada <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f107 020e 	add.w	r2, r7, #14
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f821 	bl	8007b10 <SDMMC_CmdSetRelAdd>
 8006ace:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <SD_InitCard+0xae>
    {
      return errorstate;
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad8:	e072      	b.n	8006bc0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d036      	beq.n	8006b50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f000 ffeb 	bl	8007ad2 <SDMMC_CmdSendCSD>
 8006afc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	e05b      	b.n	8006bc0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fe10 	bl	8007734 <SDIO_GetResponse>
 8006b14:	4602      	mov	r2, r0
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2104      	movs	r1, #4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fe07 	bl	8007734 <SDIO_GetResponse>
 8006b26:	4602      	mov	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2108      	movs	r1, #8
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fdfe 	bl	8007734 <SDIO_GetResponse>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	210c      	movs	r1, #12
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fdf5 	bl	8007734 <SDIO_GetResponse>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2104      	movs	r1, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fdec 	bl	8007734 <SDIO_GetResponse>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	0d1a      	lsrs	r2, r3, #20
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b64:	f107 0310 	add.w	r3, r7, #16
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fcce 	bl	800650c <HAL_SD_GetCardCSD>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b7a:	e021      	b.n	8006bc0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	2200      	movs	r2, #0
 8006b88:	461c      	mov	r4, r3
 8006b8a:	4615      	mov	r5, r2
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	462b      	mov	r3, r5
 8006b90:	4608      	mov	r0, r1
 8006b92:	f000 fedb 	bl	800794c <SDMMC_CmdSelDesel>
 8006b96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <SD_InitCard+0x176>
  {
    return errorstate;
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	e00e      	b.n	8006bc0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	466c      	mov	r4, sp
 8006baa:	f103 0210 	add.w	r2, r3, #16
 8006bae:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fd3d 	bl	8007638 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3740      	adds	r7, #64	; 0x40
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bdb0      	pop	{r4, r5, r7, pc}

08006bc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fed6 	bl	8007992 <SDMMC_CmdGoIdleState>
 8006be6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	e072      	b.n	8006cd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fee9 	bl	80079ce <SDMMC_CmdOperCond>
 8006bfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00d      	beq.n	8006c20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 febf 	bl	8007992 <SDMMC_CmdGoIdleState>
 8006c14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	e05b      	b.n	8006cd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d137      	bne.n	8006c9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2100      	movs	r1, #0
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fee9 	bl	8007a0c <SDMMC_CmdAppCommand>
 8006c3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02d      	beq.n	8006c9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c46:	e047      	b.n	8006cd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fedc 	bl	8007a0c <SDMMC_CmdAppCommand>
 8006c54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <SD_PowerON+0x98>
    {
      return errorstate;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	e03b      	b.n	8006cd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	491e      	ldr	r1, [pc, #120]	; (8006ce0 <SD_PowerON+0x118>)
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fef2 	bl	8007a50 <SDMMC_CmdAppOperCommand>
 8006c6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c78:	e02e      	b.n	8006cd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fd57 	bl	8007734 <SDIO_GetResponse>
 8006c86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	0fdb      	lsrs	r3, r3, #31
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <SD_PowerON+0xcc>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <SD_PowerON+0xce>
 8006c94:	2300      	movs	r3, #0
 8006c96:	613b      	str	r3, [r7, #16]

    count++;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d802      	bhi.n	8006cae <SD_PowerON+0xe6>
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0cc      	beq.n	8006c48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d902      	bls.n	8006cbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cbc:	e00c      	b.n	8006cd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
 8006cce:	e002      	b.n	8006cd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	c1100000 	.word	0xc1100000

08006ce4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d102      	bne.n	8006cfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cf8:	e018      	b.n	8006d2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d02:	041b      	lsls	r3, r3, #16
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f000 ff23 	bl	8007b52 <SDMMC_CmdSendStatus>
 8006d0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	e009      	b.n	8006d2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fd08 	bl	8007734 <SDIO_GetResponse>
 8006d24:	4602      	mov	r2, r0
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e041      	b.n	8006dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fb f858 	bl	8001e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f000 fa96 	bl	80072a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d001      	beq.n	8006dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e04e      	b.n	8006e8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e16:	d01d      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_TIM_Base_Start_IT+0xc8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_TIM_Base_Start_IT+0xd8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_TIM_Base_Start_IT+0x80>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d111      	bne.n	8006e78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b06      	cmp	r3, #6
 8006e64:	d010      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e76:	e007      	b.n	8006e88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40010400 	.word	0x40010400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40001800 	.word	0x40001800

08006eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d122      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d11b      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0202 	mvn.w	r2, #2
 8006ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9b5 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9a7 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9b8 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0304 	and.w	r3, r3, #4
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d122      	bne.n	8006f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d11b      	bne.n	8006f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0204 	mvn.w	r2, #4
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f98b 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f97d 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f98e 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d122      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d11b      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0208 	mvn.w	r2, #8
 8006f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f961 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8006fa4:	e005      	b.n	8006fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f953 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f964 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0310 	and.w	r3, r3, #16
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d122      	bne.n	800700c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d11b      	bne.n	800700c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0210 	mvn.w	r2, #16
 8006fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f937 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8006ff8:	e005      	b.n	8007006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f929 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f93a 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10e      	bne.n	8007038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d107      	bne.n	8007038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0201 	mvn.w	r2, #1
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fa fbd2 	bl	80017dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007042:	2b80      	cmp	r3, #128	; 0x80
 8007044:	d10e      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d107      	bne.n	8007064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fae0 	bl	8007624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d10e      	bne.n	8007090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d107      	bne.n	8007090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8ff 	bl	800728e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b20      	cmp	r3, #32
 800709c:	d10e      	bne.n	80070bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d107      	bne.n	80070bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0220 	mvn.w	r2, #32
 80070b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 faaa 	bl	8007610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIM_ConfigClockSource+0x1c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e0b4      	b.n	800724a <HAL_TIM_ConfigClockSource+0x186>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007118:	d03e      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0xd4>
 800711a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711e:	f200 8087 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	f000 8086 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x172>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	d87f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b70      	cmp	r3, #112	; 0x70
 8007132:	d01a      	beq.n	800716a <HAL_TIM_ConfigClockSource+0xa6>
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d87b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b60      	cmp	r3, #96	; 0x60
 800713a:	d050      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x11a>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d877      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b50      	cmp	r3, #80	; 0x50
 8007142:	d03c      	beq.n	80071be <HAL_TIM_ConfigClockSource+0xfa>
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d873      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d058      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x13a>
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d86f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	d064      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007154:	2b30      	cmp	r3, #48	; 0x30
 8007156:	d86b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b20      	cmp	r3, #32
 800715a:	d060      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d867      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d05c      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007164:	2b10      	cmp	r3, #16
 8007166:	d05a      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007168:	e062      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6899      	ldr	r1, [r3, #8]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f000 f9ad 	bl	80074d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800718c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	609a      	str	r2, [r3, #8]
      break;
 8007196:	e04f      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f000 f996 	bl	80074d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ba:	609a      	str	r2, [r3, #8]
      break;
 80071bc:	e03c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f000 f90a 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2150      	movs	r1, #80	; 0x50
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f963 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 80071dc:	e02c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f000 f929 	bl	8007442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2160      	movs	r1, #96	; 0x60
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f953 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 80071fc:	e01c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	461a      	mov	r2, r3
 800720c:	f000 f8ea 	bl	80073e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2140      	movs	r1, #64	; 0x40
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f943 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 800721c:	e00c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 f93a 	bl	80074a2 <TIM_ITRx_SetConfig>
      break;
 800722e:	e003      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e000      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a40      	ldr	r2, [pc, #256]	; (80073b8 <TIM_Base_SetConfig+0x114>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c2:	d00f      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a3d      	ldr	r2, [pc, #244]	; (80073bc <TIM_Base_SetConfig+0x118>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a3c      	ldr	r2, [pc, #240]	; (80073c0 <TIM_Base_SetConfig+0x11c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a3b      	ldr	r2, [pc, #236]	; (80073c4 <TIM_Base_SetConfig+0x120>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a3a      	ldr	r2, [pc, #232]	; (80073c8 <TIM_Base_SetConfig+0x124>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d108      	bne.n	80072f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a2f      	ldr	r2, [pc, #188]	; (80073b8 <TIM_Base_SetConfig+0x114>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d02b      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007304:	d027      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a2c      	ldr	r2, [pc, #176]	; (80073bc <TIM_Base_SetConfig+0x118>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d023      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a2b      	ldr	r2, [pc, #172]	; (80073c0 <TIM_Base_SetConfig+0x11c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01f      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <TIM_Base_SetConfig+0x120>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01b      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a29      	ldr	r2, [pc, #164]	; (80073c8 <TIM_Base_SetConfig+0x124>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d017      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a28      	ldr	r2, [pc, #160]	; (80073cc <TIM_Base_SetConfig+0x128>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d013      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a27      	ldr	r2, [pc, #156]	; (80073d0 <TIM_Base_SetConfig+0x12c>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00f      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a26      	ldr	r2, [pc, #152]	; (80073d4 <TIM_Base_SetConfig+0x130>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00b      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a25      	ldr	r2, [pc, #148]	; (80073d8 <TIM_Base_SetConfig+0x134>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a24      	ldr	r2, [pc, #144]	; (80073dc <TIM_Base_SetConfig+0x138>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d003      	beq.n	8007356 <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a23      	ldr	r2, [pc, #140]	; (80073e0 <TIM_Base_SetConfig+0x13c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d108      	bne.n	8007368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <TIM_Base_SetConfig+0x114>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_Base_SetConfig+0xf8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a0c      	ldr	r2, [pc, #48]	; (80073c8 <TIM_Base_SetConfig+0x124>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d103      	bne.n	80073a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	615a      	str	r2, [r3, #20]
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40010400 	.word	0x40010400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40001800 	.word	0x40001800
 80073dc:	40001c00 	.word	0x40001c00
 80073e0:	40002000 	.word	0x40002000

080073e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800740e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	011b      	lsls	r3, r3, #4
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 030a 	bic.w	r3, r3, #10
 8007420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f023 0210 	bic.w	r2, r3, #16
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800746c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800747e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	f043 0307 	orr.w	r3, r3, #7
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	609a      	str	r2, [r3, #8]
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	021a      	lsls	r2, r3, #8
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	609a      	str	r2, [r3, #8]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e05a      	b.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a21      	ldr	r2, [pc, #132]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d022      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d01d      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d018      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1a      	ldr	r2, [pc, #104]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a15      	ldr	r2, [pc, #84]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10c      	bne.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40001800 	.word	0x40001800

08007610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007638:	b084      	sub	sp, #16
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	f107 001c 	add.w	r0, r7, #28
 8007646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800764e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007650:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007652:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007656:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800765a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800765e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007662:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	b004      	add	sp, #16
 800768c:	4770      	bx	lr

0800768e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2203      	movs	r2, #3
 800769a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0303 	and.w	r3, r3, #3
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80076ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80076f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007700:	f023 030f 	bic.w	r3, r3, #15
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	b2db      	uxtb	r3, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3314      	adds	r3, #20
 8007742:	461a      	mov	r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	4413      	add	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
}  
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007780:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007786:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800778c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0

}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b088      	sub	sp, #32
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80077c0:	2310      	movs	r3, #16
 80077c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff ff74 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80077de:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e2:	2110      	movs	r1, #16
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9d7 	bl	8007b98 <SDMMC_GetCmdResp1>
 80077ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ec:	69fb      	ldr	r3, [r7, #28]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007804:	2311      	movs	r3, #17
 8007806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007816:	f107 0308 	add.w	r3, r7, #8
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f7ff ff52 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007822:	f241 3288 	movw	r2, #5000	; 0x1388
 8007826:	2111      	movs	r1, #17
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9b5 	bl	8007b98 <SDMMC_GetCmdResp1>
 800782e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007830:	69fb      	ldr	r3, [r7, #28]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b088      	sub	sp, #32
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007848:	2312      	movs	r3, #18
 800784a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ff30 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007866:	f241 3288 	movw	r2, #5000	; 0x1388
 800786a:	2112      	movs	r1, #18
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f993 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007874:	69fb      	ldr	r3, [r7, #28]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b088      	sub	sp, #32
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800788c:	2318      	movs	r3, #24
 800788e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff ff0e 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	2118      	movs	r1, #24
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f971 	bl	8007b98 <SDMMC_GetCmdResp1>
 80078b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078b8:	69fb      	ldr	r3, [r7, #28]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3720      	adds	r7, #32
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80078d0:	2319      	movs	r3, #25
 80078d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078d4:	2340      	movs	r3, #64	; 0x40
 80078d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff feec 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80078ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f2:	2119      	movs	r1, #25
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f94f 	bl	8007b98 <SDMMC_GetCmdResp1>
 80078fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078fc:	69fb      	ldr	r3, [r7, #28]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007914:	230c      	movs	r3, #12
 8007916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007926:	f107 0308 	add.w	r3, r7, #8
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff feca 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007932:	4a05      	ldr	r2, [pc, #20]	; (8007948 <SDMMC_CmdStopTransfer+0x40>)
 8007934:	210c      	movs	r1, #12
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f92e 	bl	8007b98 <SDMMC_GetCmdResp1>
 800793c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800793e:	69fb      	ldr	r3, [r7, #28]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3720      	adds	r7, #32
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	05f5e100 	.word	0x05f5e100

0800794c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b08a      	sub	sp, #40	; 0x28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800795c:	2307      	movs	r3, #7
 800795e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800796c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800796e:	f107 0310 	add.w	r3, r7, #16
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7ff fea6 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800797a:	f241 3288 	movw	r2, #5000	; 0x1388
 800797e:	2107      	movs	r1, #7
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f909 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007986:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800798a:	4618      	mov	r0, r3
 800798c:	3728      	adds	r7, #40	; 0x28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b088      	sub	sp, #32
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079b0:	f107 0308 	add.w	r3, r7, #8
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fe85 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fb23 	bl	8008008 <SDMMC_GetCmdError>
 80079c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c4:	69fb      	ldr	r3, [r7, #28]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b088      	sub	sp, #32
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80079d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80079da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80079dc:	2308      	movs	r3, #8
 80079de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079e0:	2340      	movs	r3, #64	; 0x40
 80079e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ee:	f107 0308 	add.w	r3, r7, #8
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fe66 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fab6 	bl	8007f6c <SDMMC_GetCmdResp7>
 8007a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a02:	69fb      	ldr	r3, [r7, #28]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007a1a:	2337      	movs	r3, #55	; 0x37
 8007a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a1e:	2340      	movs	r3, #64	; 0x40
 8007a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a22:	2300      	movs	r3, #0
 8007a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a2c:	f107 0308 	add.w	r3, r7, #8
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7ff fe47 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3c:	2137      	movs	r1, #55	; 0x37
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f8aa 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007a66:	2329      	movs	r3, #41	; 0x29
 8007a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fe21 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f9bd 	bl	8007e04 <SDMMC_GetCmdResp3>
 8007a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007aa6:	23c0      	movs	r3, #192	; 0xc0
 8007aa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ab4:	f107 0308 	add.w	r3, r7, #8
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fe03 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f957 	bl	8007d74 <SDMMC_GetCmdResp2>
 8007ac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b088      	sub	sp, #32
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007ae0:	2309      	movs	r3, #9
 8007ae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007ae4:	23c0      	movs	r3, #192	; 0xc0
 8007ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fde4 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f938 	bl	8007d74 <SDMMC_GetCmdResp2>
 8007b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b06:	69fb      	ldr	r3, [r7, #28]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3720      	adds	r7, #32
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b22:	2340      	movs	r3, #64	; 0x40
 8007b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b30:	f107 0308 	add.w	r3, r7, #8
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fdc5 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	2103      	movs	r1, #3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f99d 	bl	8007e80 <SDMMC_GetCmdResp6>
 8007b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b48:	69fb      	ldr	r3, [r7, #28]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b088      	sub	sp, #32
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007b60:	230d      	movs	r3, #13
 8007b62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b72:	f107 0308 	add.w	r3, r7, #8
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7ff fda4 	bl	80076c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b82:	210d      	movs	r1, #13
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f807 	bl	8007b98 <SDMMC_GetCmdResp1>
 8007b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007ba6:	4b70      	ldr	r3, [pc, #448]	; (8007d68 <SDMMC_GetCmdResp1+0x1d0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a70      	ldr	r2, [pc, #448]	; (8007d6c <SDMMC_GetCmdResp1+0x1d4>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	0a5a      	lsrs	r2, r3, #9
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	61fa      	str	r2, [r7, #28]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bc8:	e0c9      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0ef      	beq.n	8007bba <SDMMC_GetCmdResp1+0x22>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1ea      	bne.n	8007bba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2204      	movs	r2, #4
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	e0b1      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0a6      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	22c5      	movs	r2, #197	; 0xc5
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fd7f 	bl	800771a <SDIO_GetCommandResponse>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	7afb      	ldrb	r3, [r7, #11]
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d001      	beq.n	8007c2a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e099      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fd81 	bl	8007734 <SDIO_GetResponse>
 8007c32:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4b4e      	ldr	r3, [pc, #312]	; (8007d70 <SDMMC_GetCmdResp1+0x1d8>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e08d      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da02      	bge.n	8007c4e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c4c:	e087      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007c58:	2340      	movs	r3, #64	; 0x40
 8007c5a:	e080      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	e079      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c78:	e071      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d002      	beq.n	8007c8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c88:	e069      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c98:	e061      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ca8:	e059      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cb8:	e051      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cc8:	e049      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cd8:	e041      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce8:	e039      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cf8:	e031      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007d04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007d08:	e029      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d18:	e021      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007d24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007d28:	e019      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007d34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d38:	e011      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007d44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d48:	e009      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007d54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d58:	e001      	b.n	8007d5e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000004 	.word	0x20000004
 8007d6c:	10624dd3 	.word	0x10624dd3
 8007d70:	fdffe008 	.word	0xfdffe008

08007d74 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d7c:	4b1f      	ldr	r3, [pc, #124]	; (8007dfc <SDMMC_GetCmdResp2+0x88>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1f      	ldr	r2, [pc, #124]	; (8007e00 <SDMMC_GetCmdResp2+0x8c>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	0a5b      	lsrs	r3, r3, #9
 8007d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	60fa      	str	r2, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007da0:	e026      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ef      	beq.n	8007d92 <SDMMC_GetCmdResp2+0x1e>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1ea      	bne.n	8007d92 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007dce:	2304      	movs	r3, #4
 8007dd0:	e00e      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d004      	beq.n	8007de8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e003      	b.n	8007df0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	22c5      	movs	r2, #197	; 0xc5
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000004 	.word	0x20000004
 8007e00:	10624dd3 	.word	0x10624dd3

08007e04 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e0c:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <SDMMC_GetCmdResp3+0x74>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <SDMMC_GetCmdResp3+0x78>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0a5b      	lsrs	r3, r3, #9
 8007e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	60fa      	str	r2, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e30:	e01b      	b.n	8007e6a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ef      	beq.n	8007e22 <SDMMC_GetCmdResp3+0x1e>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ea      	bne.n	8007e22 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e003      	b.n	8007e6a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	22c5      	movs	r2, #197	; 0xc5
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20000004 	.word	0x20000004
 8007e7c:	10624dd3 	.word	0x10624dd3

08007e80 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e8e:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <SDMMC_GetCmdResp6+0xe4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a35      	ldr	r2, [pc, #212]	; (8007f68 <SDMMC_GetCmdResp6+0xe8>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	0a5b      	lsrs	r3, r3, #9
 8007e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	1e5a      	subs	r2, r3, #1
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eb2:	e052      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ef      	beq.n	8007ea4 <SDMMC_GetCmdResp6+0x24>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ea      	bne.n	8007ea4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2204      	movs	r2, #4
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	e03a      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e02f      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff fc0d 	bl	800771a <SDIO_GetCommandResponse>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d001      	beq.n	8007f0e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e025      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	22c5      	movs	r2, #197	; 0xc5
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f7ff fc0c 	bl	8007734 <SDIO_GetResponse>
 8007f1c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e011      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f44:	e009      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f54:	e001      	b.n	8007f5a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000004 	.word	0x20000004
 8007f68:	10624dd3 	.word	0x10624dd3

08007f6c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f74:	4b22      	ldr	r3, [pc, #136]	; (8008000 <SDMMC_GetCmdResp7+0x94>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a22      	ldr	r2, [pc, #136]	; (8008004 <SDMMC_GetCmdResp7+0x98>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	0a5b      	lsrs	r3, r3, #9
 8007f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	1e5a      	subs	r2, r3, #1
 8007f8e:	60fa      	str	r2, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f98:	e02c      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0ef      	beq.n	8007f8a <SDMMC_GetCmdResp7+0x1e>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ea      	bne.n	8007f8a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	e014      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e009      	b.n	8007ff4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2240      	movs	r2, #64	; 0x40
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007ff2:	2300      	movs	r3, #0
  
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000004 	.word	0x20000004
 8008004:	10624dd3 	.word	0x10624dd3

08008008 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <SDMMC_GetCmdError+0x50>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a11      	ldr	r2, [pc, #68]	; (800805c <SDMMC_GetCmdError+0x54>)
 8008016:	fba2 2303 	umull	r2, r3, r2, r3
 800801a:	0a5b      	lsrs	r3, r3, #9
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	60fa      	str	r2, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008034:	e009      	b.n	800804a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f1      	beq.n	8008026 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	22c5      	movs	r2, #197	; 0xc5
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000004 	.word	0x20000004
 800805c:	10624dd3 	.word	0x10624dd3

08008060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 001c 	add.w	r0, r7, #28
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b01      	cmp	r3, #1
 8008076:	d122      	bne.n	80080be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800808c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fbee 	bl	8009894 <USB_CoreReset>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
 80080bc:	e01a      	b.n	80080f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fbe2 	bl	8009894 <USB_CoreReset>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
 80080e6:	e005      	b.n	80080f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d10b      	bne.n	8008112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f043 0206 	orr.w	r2, r3, #6
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f043 0220 	orr.w	r2, r3, #32
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800811e:	b004      	add	sp, #16
 8008120:	4770      	bx	lr
	...

08008124 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d165      	bne.n	8008204 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4a41      	ldr	r2, [pc, #260]	; (8008240 <USB_SetTurnaroundTime+0x11c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d906      	bls.n	800814e <USB_SetTurnaroundTime+0x2a>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4a40      	ldr	r2, [pc, #256]	; (8008244 <USB_SetTurnaroundTime+0x120>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d202      	bcs.n	800814e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008148:	230f      	movs	r3, #15
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e062      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4a3c      	ldr	r2, [pc, #240]	; (8008244 <USB_SetTurnaroundTime+0x120>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d306      	bcc.n	8008164 <USB_SetTurnaroundTime+0x40>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	4a3b      	ldr	r2, [pc, #236]	; (8008248 <USB_SetTurnaroundTime+0x124>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d202      	bcs.n	8008164 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800815e:	230e      	movs	r3, #14
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	e057      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4a38      	ldr	r2, [pc, #224]	; (8008248 <USB_SetTurnaroundTime+0x124>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d306      	bcc.n	800817a <USB_SetTurnaroundTime+0x56>
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4a37      	ldr	r2, [pc, #220]	; (800824c <USB_SetTurnaroundTime+0x128>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d202      	bcs.n	800817a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008174:	230d      	movs	r3, #13
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e04c      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4a33      	ldr	r2, [pc, #204]	; (800824c <USB_SetTurnaroundTime+0x128>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d306      	bcc.n	8008190 <USB_SetTurnaroundTime+0x6c>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4a32      	ldr	r2, [pc, #200]	; (8008250 <USB_SetTurnaroundTime+0x12c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d802      	bhi.n	8008190 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800818a:	230c      	movs	r3, #12
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	e041      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4a2f      	ldr	r2, [pc, #188]	; (8008250 <USB_SetTurnaroundTime+0x12c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d906      	bls.n	80081a6 <USB_SetTurnaroundTime+0x82>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4a2e      	ldr	r2, [pc, #184]	; (8008254 <USB_SetTurnaroundTime+0x130>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d802      	bhi.n	80081a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081a0:	230b      	movs	r3, #11
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e036      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	4a2a      	ldr	r2, [pc, #168]	; (8008254 <USB_SetTurnaroundTime+0x130>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d906      	bls.n	80081bc <USB_SetTurnaroundTime+0x98>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4a29      	ldr	r2, [pc, #164]	; (8008258 <USB_SetTurnaroundTime+0x134>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d802      	bhi.n	80081bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081b6:	230a      	movs	r3, #10
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e02b      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4a26      	ldr	r2, [pc, #152]	; (8008258 <USB_SetTurnaroundTime+0x134>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d906      	bls.n	80081d2 <USB_SetTurnaroundTime+0xae>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4a25      	ldr	r2, [pc, #148]	; (800825c <USB_SetTurnaroundTime+0x138>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d202      	bcs.n	80081d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80081cc:	2309      	movs	r3, #9
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e020      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	4a21      	ldr	r2, [pc, #132]	; (800825c <USB_SetTurnaroundTime+0x138>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d306      	bcc.n	80081e8 <USB_SetTurnaroundTime+0xc4>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	4a20      	ldr	r2, [pc, #128]	; (8008260 <USB_SetTurnaroundTime+0x13c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d802      	bhi.n	80081e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80081e2:	2308      	movs	r3, #8
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	e015      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4a1d      	ldr	r2, [pc, #116]	; (8008260 <USB_SetTurnaroundTime+0x13c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d906      	bls.n	80081fe <USB_SetTurnaroundTime+0xda>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <USB_SetTurnaroundTime+0x140>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d202      	bcs.n	80081fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80081f8:	2307      	movs	r3, #7
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e00a      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80081fe:	2306      	movs	r3, #6
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e007      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800820a:	2309      	movs	r3, #9
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e001      	b.n	8008214 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008210:	2309      	movs	r3, #9
 8008212:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	029b      	lsls	r3, r3, #10
 8008228:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800822c:	431a      	orrs	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	00d8acbf 	.word	0x00d8acbf
 8008244:	00e4e1c0 	.word	0x00e4e1c0
 8008248:	00f42400 	.word	0x00f42400
 800824c:	01067380 	.word	0x01067380
 8008250:	011a499f 	.word	0x011a499f
 8008254:	01312cff 	.word	0x01312cff
 8008258:	014ca43f 	.word	0x014ca43f
 800825c:	016e3600 	.word	0x016e3600
 8008260:	01a6ab1f 	.word	0x01a6ab1f
 8008264:	01e84800 	.word	0x01e84800

08008268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f043 0201 	orr.w	r2, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800828a:	b480      	push	{r7}
 800828c:	b083      	sub	sp, #12
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f023 0201 	bic.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c8:	78fb      	ldrb	r3, [r7, #3]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d115      	bne.n	80082fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80082da:	2001      	movs	r0, #1
 80082dc:	f7f9 febe 	bl	800205c <HAL_Delay>
      ms++;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fa45 	bl	8009776 <USB_GetMode>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d01e      	beq.n	8008330 <USB_SetCurrentMode+0x84>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b31      	cmp	r3, #49	; 0x31
 80082f6:	d9f0      	bls.n	80082da <USB_SetCurrentMode+0x2e>
 80082f8:	e01a      	b.n	8008330 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d115      	bne.n	800832c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800830c:	2001      	movs	r0, #1
 800830e:	f7f9 fea5 	bl	800205c <HAL_Delay>
      ms++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fa2c 	bl	8009776 <USB_GetMode>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <USB_SetCurrentMode+0x84>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b31      	cmp	r3, #49	; 0x31
 8008328:	d9f0      	bls.n	800830c <USB_SetCurrentMode+0x60>
 800832a:	e001      	b.n	8008330 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e005      	b.n	800833c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b32      	cmp	r3, #50	; 0x32
 8008334:	d101      	bne.n	800833a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008344:	b084      	sub	sp, #16
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	e009      	b.n	8008378 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3340      	adds	r3, #64	; 0x40
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	2b0e      	cmp	r3, #14
 800837c:	d9f2      	bls.n	8008364 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800837e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d11c      	bne.n	80083be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008392:	f043 0302 	orr.w	r3, r3, #2
 8008396:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
 80083bc:	e00b      	b.n	80083d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083dc:	461a      	mov	r2, r3
 80083de:	2300      	movs	r3, #0
 80083e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e8:	4619      	mov	r1, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	461a      	mov	r2, r3
 80083f2:	680b      	ldr	r3, [r1, #0]
 80083f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d10c      	bne.n	8008416 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008402:	2100      	movs	r1, #0
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f965 	bl	80086d4 <USB_SetDevSpeed>
 800840a:	e008      	b.n	800841e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800840c:	2101      	movs	r1, #1
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f960 	bl	80086d4 <USB_SetDevSpeed>
 8008414:	e003      	b.n	800841e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008416:	2103      	movs	r1, #3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f95b 	bl	80086d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800841e:	2110      	movs	r1, #16
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8f3 	bl	800860c <USB_FlushTxFifo>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f91f 	bl	8008674 <USB_FlushRxFifo>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	461a      	mov	r2, r3
 8008454:	2300      	movs	r3, #0
 8008456:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	461a      	mov	r2, r3
 8008460:	2300      	movs	r3, #0
 8008462:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	e043      	b.n	80084f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4413      	add	r3, r2
 8008472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008480:	d118      	bne.n	80084b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10a      	bne.n	800849e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	461a      	mov	r2, r3
 8008496:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	e013      	b.n	80084c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084aa:	461a      	mov	r2, r3
 80084ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	e008      	b.n	80084c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c0:	461a      	mov	r2, r3
 80084c2:	2300      	movs	r3, #0
 80084c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	2300      	movs	r3, #0
 80084d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3301      	adds	r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d3b7      	bcc.n	800846a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fa:	2300      	movs	r3, #0
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	e043      	b.n	8008588 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008516:	d118      	bne.n	800854a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852a:	461a      	mov	r2, r3
 800852c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e013      	b.n	800855c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008540:	461a      	mov	r2, r3
 8008542:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	e008      	b.n	800855c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	461a      	mov	r2, r3
 8008558:	2300      	movs	r3, #0
 800855a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	461a      	mov	r2, r3
 800857c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3301      	adds	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	d3b7      	bcc.n	8008500 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800859e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f043 0210 	orr.w	r2, r3, #16
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <USB_DevInit+0x2c4>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	f043 0208 	orr.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d107      	bne.n	80085f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085f0:	f043 0304 	orr.w	r3, r3, #4
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008604:	b004      	add	sp, #16
 8008606:	4770      	bx	lr
 8008608:	803c3800 	.word	0x803c3800

0800860c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3301      	adds	r3, #1
 800861e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a13      	ldr	r2, [pc, #76]	; (8008670 <USB_FlushTxFifo+0x64>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d901      	bls.n	800862c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e01b      	b.n	8008664 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	daf2      	bge.n	800861a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	019b      	lsls	r3, r3, #6
 800863c:	f043 0220 	orr.w	r2, r3, #32
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4a08      	ldr	r2, [pc, #32]	; (8008670 <USB_FlushTxFifo+0x64>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d901      	bls.n	8008656 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e006      	b.n	8008664 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b20      	cmp	r3, #32
 8008660:	d0f0      	beq.n	8008644 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	00030d40 	.word	0x00030d40

08008674 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a11      	ldr	r2, [pc, #68]	; (80086d0 <USB_FlushRxFifo+0x5c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d901      	bls.n	8008692 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e018      	b.n	80086c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	daf2      	bge.n	8008680 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2210      	movs	r2, #16
 80086a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	4a08      	ldr	r2, [pc, #32]	; (80086d0 <USB_FlushRxFifo+0x5c>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d901      	bls.n	80086b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e006      	b.n	80086c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d0f0      	beq.n	80086a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	00030d40 	.word	0x00030d40

080086d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086f4:	4313      	orrs	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008706:	b480      	push	{r7}
 8008708:	b087      	sub	sp, #28
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f003 0306 	and.w	r3, r3, #6
 800871e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d102      	bne.n	800872c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
 800872a:	e00a      	b.n	8008742 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d002      	beq.n	8008738 <USB_GetDevSpeed+0x32>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b06      	cmp	r3, #6
 8008736:	d102      	bne.n	800873e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008738:	2302      	movs	r3, #2
 800873a:	75fb      	strb	r3, [r7, #23]
 800873c:	e001      	b.n	8008742 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800873e:	230f      	movs	r3, #15
 8008740:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
}
 8008744:	4618      	mov	r0, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d13a      	bne.n	80087e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	2101      	movs	r1, #1
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	b29b      	uxth	r3, r3
 8008784:	68f9      	ldr	r1, [r7, #12]
 8008786:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878a:	4313      	orrs	r3, r2
 800878c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d155      	bne.n	8008850 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	059b      	lsls	r3, r3, #22
 80087c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087c8:	4313      	orrs	r3, r2
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	e036      	b.n	8008850 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e8:	69da      	ldr	r2, [r3, #28]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	f003 030f 	and.w	r3, r3, #15
 80087f2:	2101      	movs	r1, #1
 80087f4:	fa01 f303 	lsl.w	r3, r1, r3
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008800:	4313      	orrs	r3, r2
 8008802:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11a      	bne.n	8008850 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	791b      	ldrb	r3, [r3, #4]
 8008834:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008836:	430b      	orrs	r3, r1
 8008838:	4313      	orrs	r3, r2
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	0151      	lsls	r1, r2, #5
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	440a      	add	r2, r1
 8008842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800884a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	785b      	ldrb	r3, [r3, #1]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d161      	bne.n	8008940 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800888e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008892:	d11f      	bne.n	80088d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	0151      	lsls	r1, r2, #5
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	440a      	add	r2, r1
 80088aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	2101      	movs	r1, #1
 80088e6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	43db      	mvns	r3, r3
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088f4:	4013      	ands	r3, r2
 80088f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	69da      	ldr	r2, [r3, #28]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	2101      	movs	r1, #1
 800890a:	fa01 f303 	lsl.w	r3, r1, r3
 800890e:	b29b      	uxth	r3, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008918:	4013      	ands	r3, r2
 800891a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	0159      	lsls	r1, r3, #5
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	440b      	add	r3, r1
 8008932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008936:	4619      	mov	r1, r3
 8008938:	4b35      	ldr	r3, [pc, #212]	; (8008a10 <USB_DeactivateEndpoint+0x1b0>)
 800893a:	4013      	ands	r3, r2
 800893c:	600b      	str	r3, [r1, #0]
 800893e:	e060      	b.n	8008a02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008956:	d11f      	bne.n	8008998 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	0151      	lsls	r1, r2, #5
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	440a      	add	r2, r1
 800896e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008972:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008976:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008996:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	2101      	movs	r1, #1
 80089aa:	fa01 f303 	lsl.w	r3, r1, r3
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	43db      	mvns	r3, r3
 80089b2:	68f9      	ldr	r1, [r7, #12]
 80089b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089b8:	4013      	ands	r3, r2
 80089ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	f003 030f 	and.w	r3, r3, #15
 80089cc:	2101      	movs	r1, #1
 80089ce:	fa01 f303 	lsl.w	r3, r1, r3
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	43db      	mvns	r3, r3
 80089d6:	68f9      	ldr	r1, [r7, #12]
 80089d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089dc:	4013      	ands	r3, r2
 80089de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	0159      	lsls	r1, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	440b      	add	r3, r1
 80089f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fa:	4619      	mov	r1, r3
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <USB_DeactivateEndpoint+0x1b4>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	ec337800 	.word	0xec337800
 8008a14:	eff37800 	.word	0xeff37800

08008a18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	f040 815c 	bne.w	8008cf2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d132      	bne.n	8008aa8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	69fa      	ldr	r2, [r7, #28]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	0151      	lsls	r1, r2, #5
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	440a      	add	r2, r1
 8008a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa0:	0cdb      	lsrs	r3, r3, #19
 8008aa2:	04db      	lsls	r3, r3, #19
 8008aa4:	6113      	str	r3, [r2, #16]
 8008aa6:	e074      	b.n	8008b92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac2:	0cdb      	lsrs	r3, r3, #19
 8008ac4:	04db      	lsls	r3, r3, #19
 8008ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	6999      	ldr	r1, [r3, #24]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	440b      	add	r3, r1
 8008b04:	1e59      	subs	r1, r3, #1
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b10:	4b9d      	ldr	r3, [pc, #628]	; (8008d88 <USB_EPStartXfer+0x370>)
 8008b12:	400b      	ands	r3, r1
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	0148      	lsls	r0, r1, #5
 8008b18:	69f9      	ldr	r1, [r7, #28]
 8008b1a:	4401      	add	r1, r0
 8008b1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b20:	4313      	orrs	r3, r2
 8008b22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	0148      	lsls	r0, r1, #5
 8008b3e:	69f9      	ldr	r1, [r7, #28]
 8008b40:	4401      	add	r1, r0
 8008b42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b46:	4313      	orrs	r3, r2
 8008b48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	791b      	ldrb	r3, [r3, #4]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d11f      	bne.n	8008b92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d14b      	bne.n	8008c30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	461a      	mov	r2, r3
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	791b      	ldrb	r3, [r3, #4]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d128      	bne.n	8008c0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d110      	bne.n	8008bee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	0151      	lsls	r1, r2, #5
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	440a      	add	r2, r1
 8008be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bea:	6013      	str	r3, [r2, #0]
 8008bec:	e00f      	b.n	8008c0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e133      	b.n	8008e98 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	791b      	ldrb	r3, [r3, #4]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d015      	beq.n	8008c84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 811b 	beq.w	8008e98 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	2101      	movs	r1, #1
 8008c74:	fa01 f303 	lsl.w	r3, r1, r3
 8008c78:	69f9      	ldr	r1, [r7, #28]
 8008c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	634b      	str	r3, [r1, #52]	; 0x34
 8008c82:	e109      	b.n	8008e98 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d110      	bne.n	8008cb6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e00f      	b.n	8008cd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	0151      	lsls	r1, r2, #5
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	440a      	add	r2, r1
 8008ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6919      	ldr	r1, [r3, #16]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	b298      	uxth	r0, r3
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4603      	mov	r3, r0
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 fade 	bl	80092ac <USB_WritePacket>
 8008cf0:	e0d2      	b.n	8008e98 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	0151      	lsls	r1, r2, #5
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	440a      	add	r2, r1
 8008d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d0c:	0cdb      	lsrs	r3, r3, #19
 8008d0e:	04db      	lsls	r3, r3, #19
 8008d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	0151      	lsls	r1, r2, #5
 8008d24:	69fa      	ldr	r2, [r7, #28]
 8008d26:	440a      	add	r2, r1
 8008d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d126      	bne.n	8008d8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	0148      	lsls	r0, r1, #5
 8008d58:	69f9      	ldr	r1, [r7, #28]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d60:	4313      	orrs	r3, r2
 8008d62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d82:	6113      	str	r3, [r2, #16]
 8008d84:	e03a      	b.n	8008dfc <USB_EPStartXfer+0x3e4>
 8008d86:	bf00      	nop
 8008d88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	8afa      	ldrh	r2, [r7, #22]
 8008da8:	fb03 f202 	mul.w	r2, r3, r2
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbc:	691a      	ldr	r2, [r3, #16]
 8008dbe:	8afb      	ldrh	r3, [r7, #22]
 8008dc0:	04d9      	lsls	r1, r3, #19
 8008dc2:	4b38      	ldr	r3, [pc, #224]	; (8008ea4 <USB_EPStartXfer+0x48c>)
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	69b9      	ldr	r1, [r7, #24]
 8008dc8:	0148      	lsls	r0, r1, #5
 8008dca:	69f9      	ldr	r1, [r7, #28]
 8008dcc:	4401      	add	r1, r0
 8008dce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	691a      	ldr	r2, [r3, #16]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dec:	69b9      	ldr	r1, [r7, #24]
 8008dee:	0148      	lsls	r0, r1, #5
 8008df0:	69f9      	ldr	r1, [r7, #28]
 8008df2:	4401      	add	r1, r0
 8008df4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d10d      	bne.n	8008e1e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6919      	ldr	r1, [r3, #16]
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	460a      	mov	r2, r1
 8008e1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	791b      	ldrb	r3, [r3, #4]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d128      	bne.n	8008e78 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d110      	bne.n	8008e58 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	e00f      	b.n	8008e78 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	0151      	lsls	r1, r2, #5
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	440a      	add	r2, r1
 8008e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	1ff80000 	.word	0x1ff80000

08008ea8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	f040 80ce 	bne.w	8009066 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d132      	bne.n	8008f38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f30:	0cdb      	lsrs	r3, r3, #19
 8008f32:	04db      	lsls	r3, r3, #19
 8008f34:	6113      	str	r3, [r2, #16]
 8008f36:	e04e      	b.n	8008fd6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f52:	0cdb      	lsrs	r3, r3, #19
 8008f54:	04db      	lsls	r3, r3, #19
 8008f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	699a      	ldr	r2, [r3, #24]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fc6:	6939      	ldr	r1, [r7, #16]
 8008fc8:	0148      	lsls	r0, r1, #5
 8008fca:	6979      	ldr	r1, [r7, #20]
 8008fcc:	4401      	add	r1, r0
 8008fce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d11e      	bne.n	800901a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d009      	beq.n	8008ff8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009012:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	e097      	b.n	800914a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	440a      	add	r2, r1
 8009030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009034:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009038:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 8083 	beq.w	800914a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 030f 	and.w	r3, r3, #15
 8009054:	2101      	movs	r1, #1
 8009056:	fa01 f303 	lsl.w	r3, r1, r3
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009060:	4313      	orrs	r3, r2
 8009062:	634b      	str	r3, [r1, #52]	; 0x34
 8009064:	e071      	b.n	800914a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	0cdb      	lsrs	r3, r3, #19
 8009082:	04db      	lsls	r3, r3, #19
 8009084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	015a      	lsls	r2, r3, #5
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	4413      	add	r3, r2
 80090ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	0151      	lsls	r1, r2, #5
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	440a      	add	r2, r1
 80090d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ee:	691a      	ldr	r2, [r3, #16]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f8:	6939      	ldr	r1, [r7, #16]
 80090fa:	0148      	lsls	r0, r1, #5
 80090fc:	6979      	ldr	r1, [r7, #20]
 80090fe:	4401      	add	r1, r0
 8009100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009104:	4313      	orrs	r3, r2
 8009106:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d10d      	bne.n	800912a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6919      	ldr	r1, [r3, #16]
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009126:	460a      	mov	r2, r1
 8009128:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009148:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	785b      	ldrb	r3, [r3, #1]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d14a      	bne.n	800920c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800918a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800918e:	f040 8086 	bne.w	800929e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	7812      	ldrb	r2, [r2, #0]
 80091a6:	0151      	lsls	r1, r2, #5
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	7812      	ldrb	r2, [r2, #0]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d902      	bls.n	80091f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
          break;
 80091ee:	e056      	b.n	800929e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009208:	d0e7      	beq.n	80091da <USB_EPStopXfer+0x82>
 800920a:	e048      	b.n	800929e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009224:	d13b      	bne.n	800929e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009244:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009248:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	7812      	ldrb	r2, [r2, #0]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	440a      	add	r2, r1
 8009264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800926c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f242 7210 	movw	r2, #10000	; 0x2710
 800927a:	4293      	cmp	r3, r2
 800927c:	d902      	bls.n	8009284 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
          break;
 8009282:	e00c      	b.n	800929e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929c:	d0e7      	beq.n	800926e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800929e:	7dfb      	ldrb	r3, [r7, #23]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b089      	sub	sp, #36	; 0x24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4611      	mov	r1, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	460b      	mov	r3, r1
 80092bc:	71fb      	strb	r3, [r7, #7]
 80092be:	4613      	mov	r3, r2
 80092c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d123      	bne.n	800931a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092d2:	88bb      	ldrh	r3, [r7, #4]
 80092d4:	3303      	adds	r3, #3
 80092d6:	089b      	lsrs	r3, r3, #2
 80092d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092da:	2300      	movs	r3, #0
 80092dc:	61bb      	str	r3, [r7, #24]
 80092de:	e018      	b.n	8009312 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	031a      	lsls	r2, r3, #12
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ec:	461a      	mov	r2, r3
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	3301      	adds	r3, #1
 80092f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	3301      	adds	r3, #1
 80092fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	3301      	adds	r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	3301      	adds	r3, #1
 800930a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	3301      	adds	r3, #1
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	429a      	cmp	r2, r3
 8009318:	d3e2      	bcc.n	80092e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3724      	adds	r7, #36	; 0x24
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009328:	b480      	push	{r7}
 800932a:	b08b      	sub	sp, #44	; 0x2c
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4613      	mov	r3, r2
 8009334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800933e:	88fb      	ldrh	r3, [r7, #6]
 8009340:	089b      	lsrs	r3, r3, #2
 8009342:	b29b      	uxth	r3, r3
 8009344:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	f003 0303 	and.w	r3, r3, #3
 800934c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	623b      	str	r3, [r7, #32]
 8009352:	e014      	b.n	800937e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	3301      	adds	r3, #1
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	3301      	adds	r3, #1
 800936a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	3301      	adds	r3, #1
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	3301      	adds	r3, #1
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	3301      	adds	r3, #1
 800937c:	623b      	str	r3, [r7, #32]
 800937e:	6a3a      	ldr	r2, [r7, #32]
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	429a      	cmp	r2, r3
 8009384:	d3e6      	bcc.n	8009354 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009386:	8bfb      	ldrh	r3, [r7, #30]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01e      	beq.n	80093ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009396:	461a      	mov	r2, r3
 8009398:	f107 0310 	add.w	r3, r7, #16
 800939c:	6812      	ldr	r2, [r2, #0]
 800939e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	701a      	strb	r2, [r3, #0]
      i++;
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	3301      	adds	r3, #1
 80093b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	3301      	adds	r3, #1
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093be:	8bfb      	ldrh	r3, [r7, #30]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093c4:	8bfb      	ldrh	r3, [r7, #30]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1ea      	bne.n	80093a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	372c      	adds	r7, #44	; 0x2c
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d12c      	bne.n	800944e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	db12      	blt.n	800942c <USB_EPSetStall+0x54>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00f      	beq.n	800942c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	440a      	add	r2, r1
 8009422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800942a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009446:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	e02b      	b.n	80094a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	db12      	blt.n	8009486 <USB_EPSetStall+0xae>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00f      	beq.n	8009486 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009484:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	440a      	add	r2, r1
 800949c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	785b      	ldrb	r3, [r3, #1]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d128      	bne.n	8009522 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	791b      	ldrb	r3, [r3, #4]
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d003      	beq.n	8009500 <USB_EPClearStall+0x4c>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	791b      	ldrb	r3, [r3, #4]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d138      	bne.n	8009572 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	0151      	lsls	r1, r2, #5
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	440a      	add	r2, r1
 8009516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e027      	b.n	8009572 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	440a      	add	r2, r1
 8009538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800953c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009540:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	791b      	ldrb	r3, [r3, #4]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d003      	beq.n	8009552 <USB_EPClearStall+0x9e>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	791b      	ldrb	r3, [r3, #4]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d10f      	bne.n	8009572 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	0151      	lsls	r1, r2, #5
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	440a      	add	r2, r1
 8009568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009570:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800959e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80095b4:	68f9      	ldr	r1, [r7, #12]
 80095b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095ba:	4313      	orrs	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095fa:	f023 0302 	bic.w	r3, r3, #2
 80095fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009628:	f023 0303 	bic.w	r3, r3, #3
 800962c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800963c:	f043 0302 	orr.w	r3, r3, #2
 8009640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4013      	ands	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009668:	68fb      	ldr	r3, [r7, #12]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	4013      	ands	r3, r2
 8009698:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	0c1b      	lsrs	r3, r3, #16
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	4013      	ands	r3, r2
 80096cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	b29b      	uxth	r3, r3
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	4013      	ands	r3, r2
 800970a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800970c:	68bb      	ldr	r3, [r7, #8]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800971a:	b480      	push	{r7}
 800971c:	b087      	sub	sp, #28
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	fa22 f303 	lsr.w	r3, r2, r3
 800974a:	01db      	lsls	r3, r3, #7
 800974c:	b2db      	uxtb	r3, r3
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	4313      	orrs	r3, r2
 8009752:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4013      	ands	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009768:	68bb      	ldr	r3, [r7, #8]
}
 800976a:	4618      	mov	r0, r3
 800976c:	371c      	adds	r7, #28
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f003 0301 	and.w	r3, r3, #1
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	460b      	mov	r3, r1
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	333c      	adds	r3, #60	; 0x3c
 80097ee:	3304      	adds	r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	4a26      	ldr	r2, [pc, #152]	; (8009890 <USB_EP0_OutStart+0xb8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d90a      	bls.n	8009812 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980c:	d101      	bne.n	8009812 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	e037      	b.n	8009882 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009818:	461a      	mov	r2, r3
 800981a:	2300      	movs	r3, #0
 800981c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009840:	f043 0318 	orr.w	r3, r3, #24
 8009844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009854:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009858:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d10f      	bne.n	8009880 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800987a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800987e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	4f54300a 	.word	0x4f54300a

08009894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4a13      	ldr	r2, [pc, #76]	; (80098f8 <USB_CoreReset+0x64>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d901      	bls.n	80098b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e01b      	b.n	80098ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	daf2      	bge.n	80098a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	f043 0201 	orr.w	r2, r3, #1
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3301      	adds	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a09      	ldr	r2, [pc, #36]	; (80098f8 <USB_CoreReset+0x64>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d901      	bls.n	80098dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e006      	b.n	80098ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d0f0      	beq.n	80098ca <USB_CoreReset+0x36>

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	00030d40 	.word	0x00030d40

080098fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009900:	4904      	ldr	r1, [pc, #16]	; (8009914 <MX_FATFS_Init+0x18>)
 8009902:	4805      	ldr	r0, [pc, #20]	; (8009918 <MX_FATFS_Init+0x1c>)
 8009904:	f004 fd90 	bl	800e428 <FATFS_LinkDriver>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <MX_FATFS_Init+0x20>)
 800990e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009910:	bf00      	nop
 8009912:	bd80      	pop	{r7, pc}
 8009914:	200023f4 	.word	0x200023f4
 8009918:	0800f048 	.word	0x0800f048
 800991c:	200023f0 	.word	0x200023f0

08009920 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009926:	4618      	mov	r0, r3
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800993a:	f000 f86d 	bl	8009a18 <BSP_SD_IsDetected>
 800993e:	4603      	mov	r3, r0
 8009940:	2b01      	cmp	r3, #1
 8009942:	d001      	beq.n	8009948 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e005      	b.n	8009954 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009948:	4804      	ldr	r0, [pc, #16]	; (800995c <BSP_SD_Init+0x2c>)
 800994a:	f7fc fb5d 	bl	8006008 <HAL_SD_Init>
 800994e:	4603      	mov	r3, r0
 8009950:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009952:	79fb      	ldrb	r3, [r7, #7]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	200001c0 	.word	0x200001c0

08009960 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	68f9      	ldr	r1, [r7, #12]
 8009976:	4806      	ldr	r0, [pc, #24]	; (8009990 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009978:	f7fc fbf6 	bl	8006168 <HAL_SD_ReadBlocks_DMA>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009986:	7dfb      	ldrb	r3, [r7, #23]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200001c0 	.word	0x200001c0

08009994 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	68f9      	ldr	r1, [r7, #12]
 80099aa:	4806      	ldr	r0, [pc, #24]	; (80099c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80099ac:	f7fc fcbe 	bl	800632c <HAL_SD_WriteBlocks_DMA>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200001c0 	.word	0x200001c0

080099c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80099cc:	4805      	ldr	r0, [pc, #20]	; (80099e4 <BSP_SD_GetCardState+0x1c>)
 80099ce:	f7fc ff6d 	bl	80068ac <HAL_SD_GetCardState>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	bf14      	ite	ne
 80099d8:	2301      	movne	r3, #1
 80099da:	2300      	moveq	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
}
 80099de:	4618      	mov	r0, r3
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	200001c0 	.word	0x200001c0

080099e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4803      	ldr	r0, [pc, #12]	; (8009a00 <BSP_SD_GetCardInfo+0x18>)
 80099f4:	f7fc ff2e 	bl	8006854 <HAL_SD_GetCardInfo>
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200001c0 	.word	0x200001c0

08009a04 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009a0c:	f000 f97a 	bl	8009d04 <BSP_SD_ReadCpltCallback>
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	b2db      	uxtb	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009a3a:	f7f8 fb03 	bl	8002044 <HAL_GetTick>
 8009a3e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009a40:	e006      	b.n	8009a50 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009a42:	f7ff ffc1 	bl	80099c8 <BSP_SD_GetCardState>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d101      	bne.n	8009a50 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e009      	b.n	8009a64 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009a50:	f7f8 faf8 	bl	8002044 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d8f0      	bhi.n	8009a42 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <SD_CheckStatus+0x38>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009a7c:	f7ff ffa4 	bl	80099c8 <BSP_SD_GetCardState>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d107      	bne.n	8009a96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009a86:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <SD_CheckStatus+0x38>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	b2da      	uxtb	r2, r3
 8009a92:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <SD_CheckStatus+0x38>)
 8009a94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009a96:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <SD_CheckStatus+0x38>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b2db      	uxtb	r3, r3
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	2000000d 	.word	0x2000000d

08009aa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009ab2:	f7ff ff3d 	bl	8009930 <BSP_SD_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d107      	bne.n	8009acc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff ffd4 	bl	8009a6c <SD_CheckStatus>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <SD_initialize+0x34>)
 8009aca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009acc:	4b03      	ldr	r3, [pc, #12]	; (8009adc <SD_initialize+0x34>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	2000000d 	.word	0x2000000d

08009ae0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009aea:	79fb      	ldrb	r3, [r7, #7]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff ffbd 	bl	8009a6c <SD_CheckStatus>
 8009af2:	4603      	mov	r3, r0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009b10:	f247 5030 	movw	r0, #30000	; 0x7530
 8009b14:	f7ff ff8d 	bl	8009a32 <SD_CheckStatusWithTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da01      	bge.n	8009b22 <SD_read+0x26>
  {
    return res;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	e03b      	b.n	8009b9a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	68b8      	ldr	r0, [r7, #8]
 8009b28:	f7ff ff1a 	bl	8009960 <BSP_SD_ReadBlocks_DMA>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d132      	bne.n	8009b98 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009b32:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <SD_read+0xa8>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009b38:	f7f8 fa84 	bl	8002044 <HAL_GetTick>
 8009b3c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009b3e:	bf00      	nop
 8009b40:	4b18      	ldr	r3, [pc, #96]	; (8009ba4 <SD_read+0xa8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <SD_read+0x5e>
 8009b48:	f7f8 fa7c 	bl	8002044 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d9f2      	bls.n	8009b40 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <SD_read+0xa8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	75fb      	strb	r3, [r7, #23]
 8009b66:	e017      	b.n	8009b98 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <SD_read+0xa8>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009b6e:	f7f8 fa69 	bl	8002044 <HAL_GetTick>
 8009b72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b74:	e007      	b.n	8009b86 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b76:	f7ff ff27 	bl	80099c8 <BSP_SD_GetCardState>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <SD_read+0x8a>
          {
            res = RES_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009b84:	e008      	b.n	8009b98 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009b86:	f7f8 fa5d 	bl	8002044 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	f247 522f 	movw	r2, #29999	; 0x752f
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d9ee      	bls.n	8009b76 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200023fc 	.word	0x200023fc

08009ba8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <SD_write+0xa8>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009bc2:	f247 5030 	movw	r0, #30000	; 0x7530
 8009bc6:	f7ff ff34 	bl	8009a32 <SD_CheckStatusWithTimeout>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	da01      	bge.n	8009bd4 <SD_write+0x2c>
  {
    return res;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	e038      	b.n	8009c46 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f7ff fedb 	bl	8009994 <BSP_SD_WriteBlocks_DMA>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d12f      	bne.n	8009c44 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009be4:	f7f8 fa2e 	bl	8002044 <HAL_GetTick>
 8009be8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009bea:	bf00      	nop
 8009bec:	4b18      	ldr	r3, [pc, #96]	; (8009c50 <SD_write+0xa8>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d108      	bne.n	8009c06 <SD_write+0x5e>
 8009bf4:	f7f8 fa26 	bl	8002044 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d9f2      	bls.n	8009bec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009c06:	4b12      	ldr	r3, [pc, #72]	; (8009c50 <SD_write+0xa8>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	75fb      	strb	r3, [r7, #23]
 8009c12:	e017      	b.n	8009c44 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009c14:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <SD_write+0xa8>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009c1a:	f7f8 fa13 	bl	8002044 <HAL_GetTick>
 8009c1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c20:	e007      	b.n	8009c32 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c22:	f7ff fed1 	bl	80099c8 <BSP_SD_GetCardState>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <SD_write+0x8a>
          {
            res = RES_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	75fb      	strb	r3, [r7, #23]
            break;
 8009c30:	e008      	b.n	8009c44 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c32:	f7f8 fa07 	bl	8002044 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d9ee      	bls.n	8009c22 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3718      	adds	r7, #24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200023f8 	.word	0x200023f8

08009c54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b08c      	sub	sp, #48	; 0x30
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	603a      	str	r2, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
 8009c60:	460b      	mov	r3, r1
 8009c62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c6a:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <SD_ioctl+0xac>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <SD_ioctl+0x28>
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e03c      	b.n	8009cf6 <SD_ioctl+0xa2>

  switch (cmd)
 8009c7c:	79bb      	ldrb	r3, [r7, #6]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d834      	bhi.n	8009cec <SD_ioctl+0x98>
 8009c82:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <SD_ioctl+0x34>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009c99 	.word	0x08009c99
 8009c8c:	08009ca1 	.word	0x08009ca1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cd3 	.word	0x08009cd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c9e:	e028      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ca0:	f107 030c 	add.w	r3, r7, #12
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe9f 	bl	80099e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cb6:	e01c      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fe93 	bl	80099e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cd0:	e00f      	b.n	8009cf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009cd2:	f107 030c 	add.w	r3, r7, #12
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fe86 	bl	80099e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	0a5a      	lsrs	r2, r3, #9
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cea:	e002      	b.n	8009cf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009cec:	2304      	movs	r3, #4
 8009cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3730      	adds	r7, #48	; 0x30
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	2000000d 	.word	0x2000000d

08009d04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009d04:	b480      	push	{r7}
 8009d06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009d08:	4b03      	ldr	r3, [pc, #12]	; (8009d18 <BSP_SD_ReadCpltCallback+0x14>)
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	200023fc 	.word	0x200023fc

08009d1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d2c:	f005 f862 	bl	800edf4 <USBD_static_malloc>
 8009d30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d109      	bne.n	8009d4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32b0      	adds	r2, #176	; 0xb0
 8009d42:	2100      	movs	r1, #0
 8009d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009d48:	2302      	movs	r3, #2
 8009d4a:	e0d4      	b.n	8009ef6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009d4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009d50:	2100      	movs	r1, #0
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f005 f8b6 	bl	800eec4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	32b0      	adds	r2, #176	; 0xb0
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	32b0      	adds	r2, #176	; 0xb0
 8009d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7c1b      	ldrb	r3, [r3, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d138      	bne.n	8009df6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d84:	4b5e      	ldr	r3, [pc, #376]	; (8009f00 <USBD_CDC_Init+0x1e4>)
 8009d86:	7819      	ldrb	r1, [r3, #0]
 8009d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f004 ff0d 	bl	800ebae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d94:	4b5a      	ldr	r3, [pc, #360]	; (8009f00 <USBD_CDC_Init+0x1e4>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 020f 	and.w	r2, r3, #15
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	440b      	add	r3, r1
 8009da8:	3324      	adds	r3, #36	; 0x24
 8009daa:	2201      	movs	r2, #1
 8009dac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009dae:	4b55      	ldr	r3, [pc, #340]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009db0:	7819      	ldrb	r1, [r3, #0]
 8009db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db6:	2202      	movs	r2, #2
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f004 fef8 	bl	800ebae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009dbe:	4b51      	ldr	r3, [pc, #324]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	f003 020f 	and.w	r2, r3, #15
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009dda:	4b4b      	ldr	r3, [pc, #300]	; (8009f08 <USBD_CDC_Init+0x1ec>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f003 020f 	and.w	r2, r3, #15
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	4613      	mov	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	3326      	adds	r3, #38	; 0x26
 8009df0:	2210      	movs	r2, #16
 8009df2:	801a      	strh	r2, [r3, #0]
 8009df4:	e035      	b.n	8009e62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009df6:	4b42      	ldr	r3, [pc, #264]	; (8009f00 <USBD_CDC_Init+0x1e4>)
 8009df8:	7819      	ldrb	r1, [r3, #0]
 8009dfa:	2340      	movs	r3, #64	; 0x40
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f004 fed5 	bl	800ebae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009e04:	4b3e      	ldr	r3, [pc, #248]	; (8009f00 <USBD_CDC_Init+0x1e4>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	3324      	adds	r3, #36	; 0x24
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009e1e:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009e20:	7819      	ldrb	r1, [r3, #0]
 8009e22:	2340      	movs	r3, #64	; 0x40
 8009e24:	2202      	movs	r2, #2
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f004 fec1 	bl	800ebae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	f003 020f 	and.w	r2, r3, #15
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	4613      	mov	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	440b      	add	r3, r1
 8009e40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e44:	2201      	movs	r2, #1
 8009e46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e48:	4b2f      	ldr	r3, [pc, #188]	; (8009f08 <USBD_CDC_Init+0x1ec>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	f003 020f 	and.w	r2, r3, #15
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	4613      	mov	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3326      	adds	r3, #38	; 0x26
 8009e5e:	2210      	movs	r2, #16
 8009e60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e62:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <USBD_CDC_Init+0x1ec>)
 8009e64:	7819      	ldrb	r1, [r3, #0]
 8009e66:	2308      	movs	r3, #8
 8009e68:	2203      	movs	r2, #3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f004 fe9f 	bl	800ebae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009e70:	4b25      	ldr	r3, [pc, #148]	; (8009f08 <USBD_CDC_Init+0x1ec>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 020f 	and.w	r2, r3, #15
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	440b      	add	r3, r1
 8009e84:	3324      	adds	r3, #36	; 0x24
 8009e86:	2201      	movs	r2, #1
 8009e88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	33b0      	adds	r3, #176	; 0xb0
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e018      	b.n	8009ef6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7c1b      	ldrb	r3, [r3, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10a      	bne.n	8009ee2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009ece:	7819      	ldrb	r1, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f004 ff56 	bl	800ed8c <USBD_LL_PrepareReceive>
 8009ee0:	e008      	b.n	8009ef4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ee2:	4b08      	ldr	r3, [pc, #32]	; (8009f04 <USBD_CDC_Init+0x1e8>)
 8009ee4:	7819      	ldrb	r1, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009eec:	2340      	movs	r3, #64	; 0x40
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f004 ff4c 	bl	800ed8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20000097 	.word	0x20000097
 8009f04:	20000098 	.word	0x20000098
 8009f08:	20000099 	.word	0x20000099

08009f0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009f18:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <USBD_CDC_DeInit+0xf8>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f004 fe6b 	bl	800ebfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009f24:	4b37      	ldr	r3, [pc, #220]	; (800a004 <USBD_CDC_DeInit+0xf8>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	f003 020f 	and.w	r2, r3, #15
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	440b      	add	r3, r1
 8009f38:	3324      	adds	r3, #36	; 0x24
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009f3e:	4b32      	ldr	r3, [pc, #200]	; (800a008 <USBD_CDC_DeInit+0xfc>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f004 fe58 	bl	800ebfa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009f4a:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <USBD_CDC_DeInit+0xfc>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	f003 020f 	and.w	r2, r3, #15
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f62:	2200      	movs	r2, #0
 8009f64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009f66:	4b29      	ldr	r3, [pc, #164]	; (800a00c <USBD_CDC_DeInit+0x100>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f004 fe44 	bl	800ebfa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009f72:	4b26      	ldr	r3, [pc, #152]	; (800a00c <USBD_CDC_DeInit+0x100>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	f003 020f 	and.w	r2, r3, #15
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	440b      	add	r3, r1
 8009f86:	3324      	adds	r3, #36	; 0x24
 8009f88:	2200      	movs	r2, #0
 8009f8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009f8c:	4b1f      	ldr	r3, [pc, #124]	; (800a00c <USBD_CDC_DeInit+0x100>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	f003 020f 	and.w	r2, r3, #15
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	3326      	adds	r3, #38	; 0x26
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	32b0      	adds	r2, #176	; 0xb0
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01f      	beq.n	8009ff8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	33b0      	adds	r3, #176	; 0xb0
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	32b0      	adds	r2, #176	; 0xb0
 8009fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f004 ff18 	bl	800ee10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32b0      	adds	r2, #176	; 0xb0
 8009fea:	2100      	movs	r1, #0
 8009fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000097 	.word	0x20000097
 800a008:	20000098 	.word	0x20000098
 800a00c:	20000099 	.word	0x20000099

0800a010 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	32b0      	adds	r2, #176	; 0xb0
 800a024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e0bf      	b.n	800a1c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d050      	beq.n	800a0ee <USBD_CDC_Setup+0xde>
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	f040 80af 	bne.w	800a1b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	88db      	ldrh	r3, [r3, #6]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d03a      	beq.n	800a0d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	b25b      	sxtb	r3, r3
 800a060:	2b00      	cmp	r3, #0
 800a062:	da1b      	bge.n	800a09c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	33b0      	adds	r3, #176	; 0xb0
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a07a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	88d2      	ldrh	r2, [r2, #6]
 800a080:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	88db      	ldrh	r3, [r3, #6]
 800a086:	2b07      	cmp	r3, #7
 800a088:	bf28      	it	cs
 800a08a:	2307      	movcs	r3, #7
 800a08c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	89fa      	ldrh	r2, [r7, #14]
 800a092:	4619      	mov	r1, r3
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 fd89 	bl	800bbac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a09a:	e090      	b.n	800a1be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	785a      	ldrb	r2, [r3, #1]
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	88db      	ldrh	r3, [r3, #6]
 800a0aa:	2b3f      	cmp	r3, #63	; 0x3f
 800a0ac:	d803      	bhi.n	800a0b6 <USBD_CDC_Setup+0xa6>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	e000      	b.n	800a0b8 <USBD_CDC_Setup+0xa8>
 800a0b6:	2240      	movs	r2, #64	; 0x40
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a0be:	6939      	ldr	r1, [r7, #16]
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 fd9b 	bl	800bc04 <USBD_CtlPrepareRx>
      break;
 800a0ce:	e076      	b.n	800a1be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	33b0      	adds	r3, #176	; 0xb0
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	7850      	ldrb	r0, [r2, #1]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	4798      	blx	r3
      break;
 800a0ec:	e067      	b.n	800a1be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	2b0b      	cmp	r3, #11
 800a0f4:	d851      	bhi.n	800a19a <USBD_CDC_Setup+0x18a>
 800a0f6:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <USBD_CDC_Setup+0xec>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a12d 	.word	0x0800a12d
 800a100:	0800a1a9 	.word	0x0800a1a9
 800a104:	0800a19b 	.word	0x0800a19b
 800a108:	0800a19b 	.word	0x0800a19b
 800a10c:	0800a19b 	.word	0x0800a19b
 800a110:	0800a19b 	.word	0x0800a19b
 800a114:	0800a19b 	.word	0x0800a19b
 800a118:	0800a19b 	.word	0x0800a19b
 800a11c:	0800a19b 	.word	0x0800a19b
 800a120:	0800a19b 	.word	0x0800a19b
 800a124:	0800a157 	.word	0x0800a157
 800a128:	0800a181 	.word	0x0800a181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b03      	cmp	r3, #3
 800a136:	d107      	bne.n	800a148 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a138:	f107 030a 	add.w	r3, r7, #10
 800a13c:	2202      	movs	r2, #2
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f001 fd33 	bl	800bbac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a146:	e032      	b.n	800a1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f001 fcbd 	bl	800baca <USBD_CtlError>
            ret = USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	75fb      	strb	r3, [r7, #23]
          break;
 800a154:	e02b      	b.n	800a1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d107      	bne.n	800a172 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a162:	f107 030d 	add.w	r3, r7, #13
 800a166:	2201      	movs	r2, #1
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 fd1e 	bl	800bbac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a170:	e01d      	b.n	800a1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 fca8 	bl	800baca <USBD_CtlError>
            ret = USBD_FAIL;
 800a17a:	2303      	movs	r3, #3
 800a17c:	75fb      	strb	r3, [r7, #23]
          break;
 800a17e:	e016      	b.n	800a1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d00f      	beq.n	800a1ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 fc9b 	bl	800baca <USBD_CtlError>
            ret = USBD_FAIL;
 800a194:	2303      	movs	r3, #3
 800a196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a198:	e008      	b.n	800a1ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 fc94 	bl	800baca <USBD_CtlError>
          ret = USBD_FAIL;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a1a6:	e002      	b.n	800a1ae <USBD_CDC_Setup+0x19e>
          break;
 800a1a8:	bf00      	nop
 800a1aa:	e008      	b.n	800a1be <USBD_CDC_Setup+0x1ae>
          break;
 800a1ac:	bf00      	nop
      }
      break;
 800a1ae:	e006      	b.n	800a1be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 fc89 	bl	800baca <USBD_CtlError>
      ret = USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a1bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	32b0      	adds	r2, #176	; 0xb0
 800a1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e065      	b.n	800a2be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32b0      	adds	r2, #176	; 0xb0
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	3318      	adds	r3, #24
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d02f      	beq.n	800a27c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a21c:	78fb      	ldrb	r3, [r7, #3]
 800a21e:	f003 020f 	and.w	r2, r3, #15
 800a222:	6879      	ldr	r1, [r7, #4]
 800a224:	4613      	mov	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	440b      	add	r3, r1
 800a22e:	3318      	adds	r3, #24
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f003 010f 	and.w	r1, r3, #15
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	460b      	mov	r3, r1
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	440b      	add	r3, r1
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4403      	add	r3, r0
 800a244:	3348      	adds	r3, #72	; 0x48
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	fbb2 f1f3 	udiv	r1, r2, r3
 800a24c:	fb01 f303 	mul.w	r3, r1, r3
 800a250:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a252:	2b00      	cmp	r3, #0
 800a254:	d112      	bne.n	800a27c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	f003 020f 	and.w	r2, r3, #15
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	440b      	add	r3, r1
 800a268:	3318      	adds	r3, #24
 800a26a:	2200      	movs	r2, #0
 800a26c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a26e:	78f9      	ldrb	r1, [r7, #3]
 800a270:	2300      	movs	r3, #0
 800a272:	2200      	movs	r2, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f004 fd68 	bl	800ed4a <USBD_LL_Transmit>
 800a27a:	e01f      	b.n	800a2bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	33b0      	adds	r3, #176	; 0xb0
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d010      	beq.n	800a2bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	33b0      	adds	r3, #176	; 0xb0
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	32b0      	adds	r2, #176	; 0xb0
 800a2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	32b0      	adds	r2, #176	; 0xb0
 800a2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e01a      	b.n	800a32e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f004 fd66 	bl	800edce <USBD_LL_GetRxDataSize>
 800a302:	4602      	mov	r2, r0
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	33b0      	adds	r3, #176	; 0xb0
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a328:	4611      	mov	r1, r2
 800a32a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	32b0      	adds	r2, #176	; 0xb0
 800a348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	e025      	b.n	800a3a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	33b0      	adds	r3, #176	; 0xb0
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d01a      	beq.n	800a3a2 <USBD_CDC_EP0_RxReady+0x6c>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a372:	2bff      	cmp	r3, #255	; 0xff
 800a374:	d015      	beq.n	800a3a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	33b0      	adds	r3, #176	; 0xb0
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a38e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a396:	b292      	uxth	r2, r2
 800a398:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	22ff      	movs	r2, #255	; 0xff
 800a39e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3b4:	2182      	movs	r1, #130	; 0x82
 800a3b6:	4818      	ldr	r0, [pc, #96]	; (800a418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3b8:	f000 fd4f 	bl	800ae5a <USBD_GetEpDesc>
 800a3bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4815      	ldr	r0, [pc, #84]	; (800a418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3c2:	f000 fd4a 	bl	800ae5a <USBD_GetEpDesc>
 800a3c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3c8:	2181      	movs	r1, #129	; 0x81
 800a3ca:	4813      	ldr	r0, [pc, #76]	; (800a418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a3cc:	f000 fd45 	bl	800ae5a <USBD_GetEpDesc>
 800a3d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2210      	movs	r2, #16
 800a3dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ec:	711a      	strb	r2, [r3, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d006      	beq.n	800a406 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a400:	711a      	strb	r2, [r3, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2243      	movs	r2, #67	; 0x43
 800a40a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a40c:	4b02      	ldr	r3, [pc, #8]	; (800a418 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000054 	.word	0x20000054

0800a41c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a424:	2182      	movs	r1, #130	; 0x82
 800a426:	4818      	ldr	r0, [pc, #96]	; (800a488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a428:	f000 fd17 	bl	800ae5a <USBD_GetEpDesc>
 800a42c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a42e:	2101      	movs	r1, #1
 800a430:	4815      	ldr	r0, [pc, #84]	; (800a488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a432:	f000 fd12 	bl	800ae5a <USBD_GetEpDesc>
 800a436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a438:	2181      	movs	r1, #129	; 0x81
 800a43a:	4813      	ldr	r0, [pc, #76]	; (800a488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a43c:	f000 fd0d 	bl	800ae5a <USBD_GetEpDesc>
 800a440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2210      	movs	r2, #16
 800a44c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2200      	movs	r2, #0
 800a458:	711a      	strb	r2, [r3, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f042 0202 	orr.w	r2, r2, #2
 800a460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d006      	beq.n	800a476 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	711a      	strb	r2, [r3, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f042 0202 	orr.w	r2, r2, #2
 800a474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2243      	movs	r2, #67	; 0x43
 800a47a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a47c:	4b02      	ldr	r3, [pc, #8]	; (800a488 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20000054 	.word	0x20000054

0800a48c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a494:	2182      	movs	r1, #130	; 0x82
 800a496:	4818      	ldr	r0, [pc, #96]	; (800a4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a498:	f000 fcdf 	bl	800ae5a <USBD_GetEpDesc>
 800a49c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a49e:	2101      	movs	r1, #1
 800a4a0:	4815      	ldr	r0, [pc, #84]	; (800a4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4a2:	f000 fcda 	bl	800ae5a <USBD_GetEpDesc>
 800a4a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a4a8:	2181      	movs	r1, #129	; 0x81
 800a4aa:	4813      	ldr	r0, [pc, #76]	; (800a4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a4ac:	f000 fcd5 	bl	800ae5a <USBD_GetEpDesc>
 800a4b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	2210      	movs	r2, #16
 800a4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d006      	beq.n	800a4d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4cc:	711a      	strb	r2, [r3, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d006      	beq.n	800a4e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4e0:	711a      	strb	r2, [r3, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2243      	movs	r2, #67	; 0x43
 800a4ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a4ec:	4b02      	ldr	r3, [pc, #8]	; (800a4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000054 	.word	0x20000054

0800a4fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	220a      	movs	r2, #10
 800a508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a50a:	4b03      	ldr	r3, [pc, #12]	; (800a518 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	20000010 	.word	0x20000010

0800a51c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e009      	b.n	800a544 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	33b0      	adds	r3, #176	; 0xb0
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	32b0      	adds	r2, #176	; 0xb0
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a572:	2303      	movs	r3, #3
 800a574:	e008      	b.n	800a588 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	32b0      	adds	r2, #176	; 0xb0
 800a5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e004      	b.n	800a5c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	32b0      	adds	r2, #176	; 0xb0
 800a5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32b0      	adds	r2, #176	; 0xb0
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e025      	b.n	800a64e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d11f      	bne.n	800a64c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2201      	movs	r2, #1
 800a610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a614:	4b10      	ldr	r3, [pc, #64]	; (800a658 <USBD_CDC_TransmitPacket+0x88>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	4613      	mov	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4403      	add	r3, r0
 800a62e:	3318      	adds	r3, #24
 800a630:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <USBD_CDC_TransmitPacket+0x88>)
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f004 fb81 	bl	800ed4a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000097 	.word	0x20000097

0800a65c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	32b0      	adds	r2, #176	; 0xb0
 800a66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a672:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	32b0      	adds	r2, #176	; 0xb0
 800a67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a686:	2303      	movs	r3, #3
 800a688:	e018      	b.n	800a6bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	7c1b      	ldrb	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <USBD_CDC_ReceivePacket+0x68>)
 800a694:	7819      	ldrb	r1, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a69c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f004 fb73 	bl	800ed8c <USBD_LL_PrepareReceive>
 800a6a6:	e008      	b.n	800a6ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6a8:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <USBD_CDC_ReceivePacket+0x68>)
 800a6aa:	7819      	ldrb	r1, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6b2:	2340      	movs	r3, #64	; 0x40
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f004 fb69 	bl	800ed8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20000098 	.word	0x20000098

0800a6c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e01f      	b.n	800a720 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	79fa      	ldrb	r2, [r7, #7]
 800a712:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f004 f9e3 	bl	800eae0 <USBD_LL_Init>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a732:	2300      	movs	r3, #0
 800a734:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a73c:	2303      	movs	r3, #3
 800a73e:	e025      	b.n	800a78c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	32ae      	adds	r2, #174	; 0xae
 800a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00f      	beq.n	800a77c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	; 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	f107 020e 	add.w	r2, r7, #14
 800a770:	4610      	mov	r0, r2
 800a772:	4798      	blx	r3
 800a774:	4602      	mov	r2, r0
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f004 f9eb 	bl	800eb78 <USBD_LL_Start>
 800a7a2:	4603      	mov	r3, r0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d009      	beq.n	800a7f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	78fa      	ldrb	r2, [r7, #3]
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	4611      	mov	r1, r2
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	4798      	blx	r3
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a820:	2303      	movs	r3, #3
 800a822:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f001 f908 	bl	800ba56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a854:	461a      	mov	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a862:	f003 031f 	and.w	r3, r3, #31
 800a866:	2b02      	cmp	r3, #2
 800a868:	d01a      	beq.n	800a8a0 <USBD_LL_SetupStage+0x72>
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d822      	bhi.n	800a8b4 <USBD_LL_SetupStage+0x86>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <USBD_LL_SetupStage+0x4a>
 800a872:	2b01      	cmp	r3, #1
 800a874:	d00a      	beq.n	800a88c <USBD_LL_SetupStage+0x5e>
 800a876:	e01d      	b.n	800a8b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fb5f 	bl	800af44 <USBD_StdDevReq>
 800a886:	4603      	mov	r3, r0
 800a888:	73fb      	strb	r3, [r7, #15]
      break;
 800a88a:	e020      	b.n	800a8ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fbc7 	bl	800b028 <USBD_StdItfReq>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]
      break;
 800a89e:	e016      	b.n	800a8ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fc29 	bl	800b100 <USBD_StdEPReq>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b2:	e00c      	b.n	800a8ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f004 f9b8 	bl	800ec38 <USBD_LL_StallEP>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a8cc:	bf00      	nop
  }

  return ret;
 800a8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d16e      	bne.n	800a9ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a8f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	f040 8098 	bne.w	800aa34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d913      	bls.n	800a938 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	1ad2      	subs	r2, r2, r3
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	4293      	cmp	r3, r2
 800a928:	bf28      	it	cs
 800a92a:	4613      	movcs	r3, r2
 800a92c:	461a      	mov	r2, r3
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f001 f984 	bl	800bc3e <USBD_CtlContinueRx>
 800a936:	e07d      	b.n	800aa34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a93e:	f003 031f 	and.w	r3, r3, #31
 800a942:	2b02      	cmp	r3, #2
 800a944:	d014      	beq.n	800a970 <USBD_LL_DataOutStage+0x98>
 800a946:	2b02      	cmp	r3, #2
 800a948:	d81d      	bhi.n	800a986 <USBD_LL_DataOutStage+0xae>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <USBD_LL_DataOutStage+0x7c>
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d003      	beq.n	800a95a <USBD_LL_DataOutStage+0x82>
 800a952:	e018      	b.n	800a986 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	75bb      	strb	r3, [r7, #22]
            break;
 800a958:	e018      	b.n	800a98c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a960:	b2db      	uxtb	r3, r3
 800a962:	4619      	mov	r1, r3
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fa5e 	bl	800ae26 <USBD_CoreFindIF>
 800a96a:	4603      	mov	r3, r0
 800a96c:	75bb      	strb	r3, [r7, #22]
            break;
 800a96e:	e00d      	b.n	800a98c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a976:	b2db      	uxtb	r3, r3
 800a978:	4619      	mov	r1, r3
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fa60 	bl	800ae40 <USBD_CoreFindEP>
 800a980:	4603      	mov	r3, r0
 800a982:	75bb      	strb	r3, [r7, #22]
            break;
 800a984:	e002      	b.n	800a98c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	75bb      	strb	r3, [r7, #22]
            break;
 800a98a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a98c:	7dbb      	ldrb	r3, [r7, #22]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d119      	bne.n	800a9c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d113      	bne.n	800a9c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a99e:	7dba      	ldrb	r2, [r7, #22]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	32ae      	adds	r2, #174	; 0xae
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00b      	beq.n	800a9c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a9ae:	7dba      	ldrb	r2, [r7, #22]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a9b6:	7dba      	ldrb	r2, [r7, #22]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	32ae      	adds	r2, #174	; 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f001 f94a 	bl	800bc60 <USBD_CtlSendStatus>
 800a9cc:	e032      	b.n	800aa34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 fa31 	bl	800ae40 <USBD_CoreFindEP>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
 800a9e4:	2bff      	cmp	r3, #255	; 0xff
 800a9e6:	d025      	beq.n	800aa34 <USBD_LL_DataOutStage+0x15c>
 800a9e8:	7dbb      	ldrb	r3, [r7, #22]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d122      	bne.n	800aa34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d117      	bne.n	800aa2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a9fa:	7dba      	ldrb	r2, [r7, #22]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	32ae      	adds	r2, #174	; 0xae
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00f      	beq.n	800aa2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa0a:	7dba      	ldrb	r2, [r7, #22]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa12:	7dba      	ldrb	r2, [r7, #22]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	32ae      	adds	r2, #174	; 0xae
 800aa18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	7afa      	ldrb	r2, [r7, #11]
 800aa20:	4611      	mov	r1, r2
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	4798      	blx	r3
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	e000      	b.n	800aa36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	460b      	mov	r3, r1
 800aa48:	607a      	str	r2, [r7, #4]
 800aa4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa4c:	7afb      	ldrb	r3, [r7, #11]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d16f      	bne.n	800ab32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3314      	adds	r3, #20
 800aa56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d15a      	bne.n	800ab18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	689a      	ldr	r2, [r3, #8]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d914      	bls.n	800aa98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	1ad2      	subs	r2, r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	461a      	mov	r2, r3
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f001 f8ac 	bl	800bbe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f004 f97b 	bl	800ed8c <USBD_LL_PrepareReceive>
 800aa96:	e03f      	b.n	800ab18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	68da      	ldr	r2, [r3, #12]
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d11c      	bne.n	800aade <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d316      	bcc.n	800aade <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d20f      	bcs.n	800aade <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aabe:	2200      	movs	r2, #0
 800aac0:	2100      	movs	r1, #0
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f001 f88d 	bl	800bbe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aad0:	2300      	movs	r3, #0
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f004 f958 	bl	800ed8c <USBD_LL_PrepareReceive>
 800aadc:	e01c      	b.n	800ab18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d10f      	bne.n	800ab0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d009      	beq.n	800ab0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab0a:	2180      	movs	r1, #128	; 0x80
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f004 f893 	bl	800ec38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f001 f8b7 	bl	800bc86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d03a      	beq.n	800ab98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff fe42 	bl	800a7ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab30:	e032      	b.n	800ab98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab32:	7afb      	ldrb	r3, [r7, #11]
 800ab34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 f97f 	bl	800ae40 <USBD_CoreFindEP>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	2bff      	cmp	r3, #255	; 0xff
 800ab4a:	d025      	beq.n	800ab98 <USBD_LL_DataInStage+0x15a>
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d122      	bne.n	800ab98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d11c      	bne.n	800ab98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab5e:	7dfa      	ldrb	r2, [r7, #23]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	32ae      	adds	r2, #174	; 0xae
 800ab64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d014      	beq.n	800ab98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab6e:	7dfa      	ldrb	r2, [r7, #23]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab76:	7dfa      	ldrb	r2, [r7, #23]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	32ae      	adds	r2, #174	; 0xae
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	7afa      	ldrb	r2, [r7, #11]
 800ab84:	4611      	mov	r1, r2
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	4798      	blx	r3
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab8e:	7dbb      	ldrb	r3, [r7, #22]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab94:	7dbb      	ldrb	r3, [r7, #22]
 800ab96:	e000      	b.n	800ab9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2201      	movs	r2, #1
 800abb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d014      	beq.n	800ac08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00e      	beq.n	800ac08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	6852      	ldr	r2, [r2, #4]
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	4611      	mov	r1, r2
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac04:	2303      	movs	r3, #3
 800ac06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac08:	2340      	movs	r3, #64	; 0x40
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f003 ffcd 	bl	800ebae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	2200      	movs	r2, #0
 800ac28:	2180      	movs	r1, #128	; 0x80
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f003 ffbf 	bl	800ebae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2240      	movs	r2, #64	; 0x40
 800ac3a:	621a      	str	r2, [r3, #32]

  return ret;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	460b      	mov	r3, r1
 800ac50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	78fa      	ldrb	r2, [r7, #3]
 800ac56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2204      	movs	r2, #4
 800ac80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	d106      	bne.n	800acb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acac:	b2da      	uxtb	r2, r3
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d110      	bne.n	800acf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	32ae      	adds	r2, #174	; 0xae
 800ad18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e01c      	b.n	800ad5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d115      	bne.n	800ad5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	32ae      	adds	r2, #174	; 0xae
 800ad3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	32ae      	adds	r2, #174	; 0xae
 800ad4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	78fa      	ldrb	r2, [r7, #3]
 800ad56:	4611      	mov	r1, r2
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	32ae      	adds	r2, #174	; 0xae
 800ad7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e01c      	b.n	800adc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	d115      	bne.n	800adc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	32ae      	adds	r2, #174	; 0xae
 800ad9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	32ae      	adds	r2, #174	; 0xae
 800adb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	78fa      	ldrb	r2, [r7, #3]
 800adba:	4611      	mov	r1, r2
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800adca:	b480      	push	{r7}
 800adcc:	b083      	sub	sp, #12
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	370c      	adds	r7, #12
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00e      	beq.n	800ae1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6852      	ldr	r2, [r2, #4]
 800ae0a:	b2d2      	uxtb	r2, r2
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	370c      	adds	r7, #12
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr

0800ae5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	460b      	mov	r3, r1
 800ae64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	885b      	ldrh	r3, [r3, #2]
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d920      	bls.n	800aec4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae8a:	e013      	b.n	800aeb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae8c:	f107 030a 	add.w	r3, r7, #10
 800ae90:	4619      	mov	r1, r3
 800ae92:	6978      	ldr	r0, [r7, #20]
 800ae94:	f000 f81b 	bl	800aece <USBD_GetNextDesc>
 800ae98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	d108      	bne.n	800aeb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	789b      	ldrb	r3, [r3, #2]
 800aeaa:	78fa      	ldrb	r2, [r7, #3]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d008      	beq.n	800aec2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	885b      	ldrh	r3, [r3, #2]
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	897b      	ldrh	r3, [r7, #10]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d8e5      	bhi.n	800ae8c <USBD_GetEpDesc+0x32>
 800aec0:	e000      	b.n	800aec4 <USBD_GetEpDesc+0x6a>
          break;
 800aec2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aec4:	693b      	ldr	r3, [r7, #16]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
 800aed6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	881a      	ldrh	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4413      	add	r3, r2
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4413      	add	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aefa:	68fb      	ldr	r3, [r7, #12]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	3301      	adds	r3, #1
 800af1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800af26:	8a3b      	ldrh	r3, [r7, #16]
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	b21a      	sxth	r2, r3
 800af2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af30:	4313      	orrs	r3, r2
 800af32:	b21b      	sxth	r3, r3
 800af34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800af36:	89fb      	ldrh	r3, [r7, #14]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	371c      	adds	r7, #28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af5a:	2b40      	cmp	r3, #64	; 0x40
 800af5c:	d005      	beq.n	800af6a <USBD_StdDevReq+0x26>
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d857      	bhi.n	800b012 <USBD_StdDevReq+0xce>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00f      	beq.n	800af86 <USBD_StdDevReq+0x42>
 800af66:	2b20      	cmp	r3, #32
 800af68:	d153      	bne.n	800b012 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	32ae      	adds	r2, #174	; 0xae
 800af74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
      break;
 800af84:	e04a      	b.n	800b01c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	2b09      	cmp	r3, #9
 800af8c:	d83b      	bhi.n	800b006 <USBD_StdDevReq+0xc2>
 800af8e:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <USBD_StdDevReq+0x50>)
 800af90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af94:	0800afe9 	.word	0x0800afe9
 800af98:	0800affd 	.word	0x0800affd
 800af9c:	0800b007 	.word	0x0800b007
 800afa0:	0800aff3 	.word	0x0800aff3
 800afa4:	0800b007 	.word	0x0800b007
 800afa8:	0800afc7 	.word	0x0800afc7
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800b007 	.word	0x0800b007
 800afb4:	0800afdf 	.word	0x0800afdf
 800afb8:	0800afd1 	.word	0x0800afd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa3c 	bl	800b43c <USBD_GetDescriptor>
          break;
 800afc4:	e024      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fba1 	bl	800b710 <USBD_SetAddress>
          break;
 800afce:	e01f      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fbe0 	bl	800b798 <USBD_SetConfig>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
          break;
 800afdc:	e018      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fc83 	bl	800b8ec <USBD_GetConfig>
          break;
 800afe6:	e013      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fcb4 	bl	800b958 <USBD_GetStatus>
          break;
 800aff0:	e00e      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fce3 	bl	800b9c0 <USBD_SetFeature>
          break;
 800affa:	e009      	b.n	800b010 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fd07 	bl	800ba12 <USBD_ClrFeature>
          break;
 800b004:	e004      	b.n	800b010 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fd5e 	bl	800baca <USBD_CtlError>
          break;
 800b00e:	bf00      	nop
      }
      break;
 800b010:	e004      	b.n	800b01c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fd58 	bl	800baca <USBD_CtlError>
      break;
 800b01a:	bf00      	nop
  }

  return ret;
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop

0800b028 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b03e:	2b40      	cmp	r3, #64	; 0x40
 800b040:	d005      	beq.n	800b04e <USBD_StdItfReq+0x26>
 800b042:	2b40      	cmp	r3, #64	; 0x40
 800b044:	d852      	bhi.n	800b0ec <USBD_StdItfReq+0xc4>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <USBD_StdItfReq+0x26>
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d14e      	bne.n	800b0ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b054:	b2db      	uxtb	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d840      	bhi.n	800b0de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	889b      	ldrh	r3, [r3, #4]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b01      	cmp	r3, #1
 800b064:	d836      	bhi.n	800b0d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	889b      	ldrh	r3, [r3, #4]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fed9 	bl	800ae26 <USBD_CoreFindIF>
 800b074:	4603      	mov	r3, r0
 800b076:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b078:	7bbb      	ldrb	r3, [r7, #14]
 800b07a:	2bff      	cmp	r3, #255	; 0xff
 800b07c:	d01d      	beq.n	800b0ba <USBD_StdItfReq+0x92>
 800b07e:	7bbb      	ldrb	r3, [r7, #14]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d11a      	bne.n	800b0ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b084:	7bba      	ldrb	r2, [r7, #14]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	32ae      	adds	r2, #174	; 0xae
 800b08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00f      	beq.n	800b0b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b094:	7bba      	ldrb	r2, [r7, #14]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b09c:	7bba      	ldrb	r2, [r7, #14]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	32ae      	adds	r2, #174	; 0xae
 800b0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0b2:	e004      	b.n	800b0be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b0b8:	e001      	b.n	800b0be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	88db      	ldrh	r3, [r3, #6]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d110      	bne.n	800b0e8 <USBD_StdItfReq+0xc0>
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10d      	bne.n	800b0e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fdc7 	bl	800bc60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b0d2:	e009      	b.n	800b0e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fcf7 	bl	800baca <USBD_CtlError>
          break;
 800b0dc:	e004      	b.n	800b0e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b0de:	6839      	ldr	r1, [r7, #0]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fcf2 	bl	800baca <USBD_CtlError>
          break;
 800b0e6:	e000      	b.n	800b0ea <USBD_StdItfReq+0xc2>
          break;
 800b0e8:	bf00      	nop
      }
      break;
 800b0ea:	e004      	b.n	800b0f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fceb 	bl	800baca <USBD_CtlError>
      break;
 800b0f4:	bf00      	nop
  }

  return ret;
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	889b      	ldrh	r3, [r3, #4]
 800b112:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b11c:	2b40      	cmp	r3, #64	; 0x40
 800b11e:	d007      	beq.n	800b130 <USBD_StdEPReq+0x30>
 800b120:	2b40      	cmp	r3, #64	; 0x40
 800b122:	f200 817f 	bhi.w	800b424 <USBD_StdEPReq+0x324>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d02a      	beq.n	800b180 <USBD_StdEPReq+0x80>
 800b12a:	2b20      	cmp	r3, #32
 800b12c:	f040 817a 	bne.w	800b424 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b130:	7bbb      	ldrb	r3, [r7, #14]
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff fe83 	bl	800ae40 <USBD_CoreFindEP>
 800b13a:	4603      	mov	r3, r0
 800b13c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b13e:	7b7b      	ldrb	r3, [r7, #13]
 800b140:	2bff      	cmp	r3, #255	; 0xff
 800b142:	f000 8174 	beq.w	800b42e <USBD_StdEPReq+0x32e>
 800b146:	7b7b      	ldrb	r3, [r7, #13]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f040 8170 	bne.w	800b42e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b14e:	7b7a      	ldrb	r2, [r7, #13]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b156:	7b7a      	ldrb	r2, [r7, #13]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	32ae      	adds	r2, #174	; 0xae
 800b15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 8163 	beq.w	800b42e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b168:	7b7a      	ldrb	r2, [r7, #13]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32ae      	adds	r2, #174	; 0xae
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b17e:	e156      	b.n	800b42e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b03      	cmp	r3, #3
 800b186:	d008      	beq.n	800b19a <USBD_StdEPReq+0x9a>
 800b188:	2b03      	cmp	r3, #3
 800b18a:	f300 8145 	bgt.w	800b418 <USBD_StdEPReq+0x318>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 809b 	beq.w	800b2ca <USBD_StdEPReq+0x1ca>
 800b194:	2b01      	cmp	r3, #1
 800b196:	d03c      	beq.n	800b212 <USBD_StdEPReq+0x112>
 800b198:	e13e      	b.n	800b418 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d002      	beq.n	800b1ac <USBD_StdEPReq+0xac>
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d016      	beq.n	800b1d8 <USBD_StdEPReq+0xd8>
 800b1aa:	e02c      	b.n	800b206 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00d      	beq.n	800b1ce <USBD_StdEPReq+0xce>
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	2b80      	cmp	r3, #128	; 0x80
 800b1b6:	d00a      	beq.n	800b1ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f003 fd3b 	bl	800ec38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1c2:	2180      	movs	r1, #128	; 0x80
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f003 fd37 	bl	800ec38 <USBD_LL_StallEP>
 800b1ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1cc:	e020      	b.n	800b210 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fc7a 	bl	800baca <USBD_CtlError>
              break;
 800b1d6:	e01b      	b.n	800b210 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	885b      	ldrh	r3, [r3, #2]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10e      	bne.n	800b1fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <USBD_StdEPReq+0xfe>
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d008      	beq.n	800b1fe <USBD_StdEPReq+0xfe>
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d104      	bne.n	800b1fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f003 fd1d 	bl	800ec38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fd2e 	bl	800bc60 <USBD_CtlSendStatus>

              break;
 800b204:	e004      	b.n	800b210 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fc5e 	bl	800baca <USBD_CtlError>
              break;
 800b20e:	bf00      	nop
          }
          break;
 800b210:	e107      	b.n	800b422 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d002      	beq.n	800b224 <USBD_StdEPReq+0x124>
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d016      	beq.n	800b250 <USBD_StdEPReq+0x150>
 800b222:	e04b      	b.n	800b2bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00d      	beq.n	800b246 <USBD_StdEPReq+0x146>
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	2b80      	cmp	r3, #128	; 0x80
 800b22e:	d00a      	beq.n	800b246 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f003 fcff 	bl	800ec38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b23a:	2180      	movs	r1, #128	; 0x80
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f003 fcfb 	bl	800ec38 <USBD_LL_StallEP>
 800b242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b244:	e040      	b.n	800b2c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc3e 	bl	800baca <USBD_CtlError>
              break;
 800b24e:	e03b      	b.n	800b2c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	885b      	ldrh	r3, [r3, #2]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d136      	bne.n	800b2c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d004      	beq.n	800b26c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	4619      	mov	r1, r3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f003 fd05 	bl	800ec76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fcf7 	bl	800bc60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	4619      	mov	r1, r3
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff fde2 	bl	800ae40 <USBD_CoreFindEP>
 800b27c:	4603      	mov	r3, r0
 800b27e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b280:	7b7b      	ldrb	r3, [r7, #13]
 800b282:	2bff      	cmp	r3, #255	; 0xff
 800b284:	d01f      	beq.n	800b2c6 <USBD_StdEPReq+0x1c6>
 800b286:	7b7b      	ldrb	r3, [r7, #13]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d11c      	bne.n	800b2c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b28c:	7b7a      	ldrb	r2, [r7, #13]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b294:	7b7a      	ldrb	r2, [r7, #13]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	32ae      	adds	r2, #174	; 0xae
 800b29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d010      	beq.n	800b2c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b2a4:	7b7a      	ldrb	r2, [r7, #13]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	32ae      	adds	r2, #174	; 0xae
 800b2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	4798      	blx	r3
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b2ba:	e004      	b.n	800b2c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fc03 	bl	800baca <USBD_CtlError>
              break;
 800b2c4:	e000      	b.n	800b2c8 <USBD_StdEPReq+0x1c8>
              break;
 800b2c6:	bf00      	nop
          }
          break;
 800b2c8:	e0ab      	b.n	800b422 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d002      	beq.n	800b2dc <USBD_StdEPReq+0x1dc>
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d032      	beq.n	800b340 <USBD_StdEPReq+0x240>
 800b2da:	e097      	b.n	800b40c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d007      	beq.n	800b2f2 <USBD_StdEPReq+0x1f2>
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	2b80      	cmp	r3, #128	; 0x80
 800b2e6:	d004      	beq.n	800b2f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fbed 	bl	800baca <USBD_CtlError>
                break;
 800b2f0:	e091      	b.n	800b416 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	da0b      	bge.n	800b312 <USBD_StdEPReq+0x212>
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	3310      	adds	r3, #16
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	3304      	adds	r3, #4
 800b310:	e00b      	b.n	800b32a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	4413      	add	r3, r2
 800b328:	3304      	adds	r3, #4
 800b32a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2200      	movs	r2, #0
 800b330:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2202      	movs	r2, #2
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc37 	bl	800bbac <USBD_CtlSendData>
              break;
 800b33e:	e06a      	b.n	800b416 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b344:	2b00      	cmp	r3, #0
 800b346:	da11      	bge.n	800b36c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	f003 020f 	and.w	r2, r3, #15
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	3324      	adds	r3, #36	; 0x24
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d117      	bne.n	800b392 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fbb0 	bl	800baca <USBD_CtlError>
                  break;
 800b36a:	e054      	b.n	800b416 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b36c:	7bbb      	ldrb	r3, [r7, #14]
 800b36e:	f003 020f 	and.w	r2, r3, #15
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	440b      	add	r3, r1
 800b37e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fb9d 	bl	800baca <USBD_CtlError>
                  break;
 800b390:	e041      	b.n	800b416 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b392:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b396:	2b00      	cmp	r3, #0
 800b398:	da0b      	bge.n	800b3b2 <USBD_StdEPReq+0x2b2>
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4413      	add	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	3310      	adds	r3, #16
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	e00b      	b.n	800b3ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <USBD_StdEPReq+0x2d8>
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	2b80      	cmp	r3, #128	; 0x80
 800b3d6:	d103      	bne.n	800b3e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e00e      	b.n	800b3fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f003 fc65 	bl	800ecb4 <USBD_LL_IsStallEP>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	e002      	b.n	800b3fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2202      	movs	r2, #2
 800b402:	4619      	mov	r1, r3
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fbd1 	bl	800bbac <USBD_CtlSendData>
              break;
 800b40a:	e004      	b.n	800b416 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fb5b 	bl	800baca <USBD_CtlError>
              break;
 800b414:	bf00      	nop
          }
          break;
 800b416:	e004      	b.n	800b422 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fb55 	bl	800baca <USBD_CtlError>
          break;
 800b420:	bf00      	nop
      }
      break;
 800b422:	e005      	b.n	800b430 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b424:	6839      	ldr	r1, [r7, #0]
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 fb4f 	bl	800baca <USBD_CtlError>
      break;
 800b42c:	e000      	b.n	800b430 <USBD_StdEPReq+0x330>
      break;
 800b42e:	bf00      	nop
  }

  return ret;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
	...

0800b43c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b446:	2300      	movs	r3, #0
 800b448:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b44e:	2300      	movs	r3, #0
 800b450:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	885b      	ldrh	r3, [r3, #2]
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	b29b      	uxth	r3, r3
 800b45a:	3b01      	subs	r3, #1
 800b45c:	2b06      	cmp	r3, #6
 800b45e:	f200 8128 	bhi.w	800b6b2 <USBD_GetDescriptor+0x276>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <USBD_GetDescriptor+0x2c>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b49d 	.word	0x0800b49d
 800b470:	0800b4dd 	.word	0x0800b4dd
 800b474:	0800b6b3 	.word	0x0800b6b3
 800b478:	0800b6b3 	.word	0x0800b6b3
 800b47c:	0800b653 	.word	0x0800b653
 800b480:	0800b67f 	.word	0x0800b67f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	7c12      	ldrb	r2, [r2, #16]
 800b490:	f107 0108 	add.w	r1, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
      break;
 800b49a:	e112      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7c1b      	ldrb	r3, [r3, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10d      	bne.n	800b4c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ac:	f107 0208 	add.w	r2, r7, #8
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4798      	blx	r3
 800b4b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4be:	e100      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	f107 0208 	add.w	r2, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	701a      	strb	r2, [r3, #0]
      break;
 800b4da:	e0f2      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	f200 80ac 	bhi.w	800b640 <USBD_GetDescriptor+0x204>
 800b4e8:	a201      	add	r2, pc, #4	; (adr r2, 800b4f0 <USBD_GetDescriptor+0xb4>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b571 	.word	0x0800b571
 800b4fc:	0800b5a5 	.word	0x0800b5a5
 800b500:	0800b5d9 	.word	0x0800b5d9
 800b504:	0800b60d 	.word	0x0800b60d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00b      	beq.n	800b52c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	7c12      	ldrb	r2, [r2, #16]
 800b520:	f107 0108 	add.w	r1, r7, #8
 800b524:	4610      	mov	r0, r2
 800b526:	4798      	blx	r3
 800b528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b52a:	e091      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 facb 	bl	800baca <USBD_CtlError>
            err++;
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	3301      	adds	r3, #1
 800b538:	72fb      	strb	r3, [r7, #11]
          break;
 800b53a:	e089      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00b      	beq.n	800b560 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	7c12      	ldrb	r2, [r2, #16]
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
 800b55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b55e:	e077      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 fab1 	bl	800baca <USBD_CtlError>
            err++;
 800b568:	7afb      	ldrb	r3, [r7, #11]
 800b56a:	3301      	adds	r3, #1
 800b56c:	72fb      	strb	r3, [r7, #11]
          break;
 800b56e:	e06f      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00b      	beq.n	800b594 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	7c12      	ldrb	r2, [r2, #16]
 800b588:	f107 0108 	add.w	r1, r7, #8
 800b58c:	4610      	mov	r0, r2
 800b58e:	4798      	blx	r3
 800b590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b592:	e05d      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fa97 	bl	800baca <USBD_CtlError>
            err++;
 800b59c:	7afb      	ldrb	r3, [r7, #11]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b5a2:	e055      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00b      	beq.n	800b5c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	7c12      	ldrb	r2, [r2, #16]
 800b5bc:	f107 0108 	add.w	r1, r7, #8
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
 800b5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5c6:	e043      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fa7d 	bl	800baca <USBD_CtlError>
            err++;
 800b5d0:	7afb      	ldrb	r3, [r7, #11]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b5d6:	e03b      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	7c12      	ldrb	r2, [r2, #16]
 800b5f0:	f107 0108 	add.w	r1, r7, #8
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	4798      	blx	r3
 800b5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5fa:	e029      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa63 	bl	800baca <USBD_CtlError>
            err++;
 800b604:	7afb      	ldrb	r3, [r7, #11]
 800b606:	3301      	adds	r3, #1
 800b608:	72fb      	strb	r3, [r7, #11]
          break;
 800b60a:	e021      	b.n	800b650 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00b      	beq.n	800b630 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	7c12      	ldrb	r2, [r2, #16]
 800b624:	f107 0108 	add.w	r1, r7, #8
 800b628:	4610      	mov	r0, r2
 800b62a:	4798      	blx	r3
 800b62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b62e:	e00f      	b.n	800b650 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fa49 	bl	800baca <USBD_CtlError>
            err++;
 800b638:	7afb      	ldrb	r3, [r7, #11]
 800b63a:	3301      	adds	r3, #1
 800b63c:	72fb      	strb	r3, [r7, #11]
          break;
 800b63e:	e007      	b.n	800b650 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fa41 	bl	800baca <USBD_CtlError>
          err++;
 800b648:	7afb      	ldrb	r3, [r7, #11]
 800b64a:	3301      	adds	r3, #1
 800b64c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b64e:	bf00      	nop
      }
      break;
 800b650:	e037      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	7c1b      	ldrb	r3, [r3, #16]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d109      	bne.n	800b66e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b662:	f107 0208 	add.w	r2, r7, #8
 800b666:	4610      	mov	r0, r2
 800b668:	4798      	blx	r3
 800b66a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b66c:	e029      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fa2a 	bl	800baca <USBD_CtlError>
        err++;
 800b676:	7afb      	ldrb	r3, [r7, #11]
 800b678:	3301      	adds	r3, #1
 800b67a:	72fb      	strb	r3, [r7, #11]
      break;
 800b67c:	e021      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7c1b      	ldrb	r3, [r3, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10d      	bne.n	800b6a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	f107 0208 	add.w	r2, r7, #8
 800b692:	4610      	mov	r0, r2
 800b694:	4798      	blx	r3
 800b696:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3301      	adds	r3, #1
 800b69c:	2207      	movs	r2, #7
 800b69e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6a0:	e00f      	b.n	800b6c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fa10 	bl	800baca <USBD_CtlError>
        err++;
 800b6aa:	7afb      	ldrb	r3, [r7, #11]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b0:	e007      	b.n	800b6c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fa08 	bl	800baca <USBD_CtlError>
      err++;
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c0:	bf00      	nop
  }

  if (err != 0U)
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11e      	bne.n	800b706 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	88db      	ldrh	r3, [r3, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d016      	beq.n	800b6fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b6d0:	893b      	ldrh	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00e      	beq.n	800b6f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	88da      	ldrh	r2, [r3, #6]
 800b6da:	893b      	ldrh	r3, [r7, #8]
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	bf28      	it	cs
 800b6e0:	4613      	movcs	r3, r2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6e6:	893b      	ldrh	r3, [r7, #8]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	68f9      	ldr	r1, [r7, #12]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa5d 	bl	800bbac <USBD_CtlSendData>
 800b6f2:	e009      	b.n	800b708 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9e7 	bl	800baca <USBD_CtlError>
 800b6fc:	e004      	b.n	800b708 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 faae 	bl	800bc60 <USBD_CtlSendStatus>
 800b704:	e000      	b.n	800b708 <USBD_GetDescriptor+0x2cc>
    return;
 800b706:	bf00      	nop
  }
}
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop

0800b710 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	889b      	ldrh	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d131      	bne.n	800b786 <USBD_SetAddress+0x76>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	88db      	ldrh	r3, [r3, #6]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d12d      	bne.n	800b786 <USBD_SetAddress+0x76>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	885b      	ldrh	r3, [r3, #2]
 800b72e:	2b7f      	cmp	r3, #127	; 0x7f
 800b730:	d829      	bhi.n	800b786 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	885b      	ldrh	r3, [r3, #2]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b73c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	d104      	bne.n	800b754 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f9bc 	bl	800baca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b752:	e01d      	b.n	800b790 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7bfa      	ldrb	r2, [r7, #15]
 800b758:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f003 fad3 	bl	800ed0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fa7a 	bl	800bc60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d004      	beq.n	800b77c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2202      	movs	r2, #2
 800b776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b77a:	e009      	b.n	800b790 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b784:	e004      	b.n	800b790 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f99e 	bl	800baca <USBD_CtlError>
  }
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	885b      	ldrh	r3, [r3, #2]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	4b4e      	ldr	r3, [pc, #312]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b7ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7b0:	4b4d      	ldr	r3, [pc, #308]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	d905      	bls.n	800b7c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f985 	bl	800baca <USBD_CtlError>
    return USBD_FAIL;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e08c      	b.n	800b8de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d002      	beq.n	800b7d6 <USBD_SetConfig+0x3e>
 800b7d0:	2b03      	cmp	r3, #3
 800b7d2:	d029      	beq.n	800b828 <USBD_SetConfig+0x90>
 800b7d4:	e075      	b.n	800b8c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7d6:	4b44      	ldr	r3, [pc, #272]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d020      	beq.n	800b820 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7de:	4b42      	ldr	r3, [pc, #264]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7e8:	4b3f      	ldr	r3, [pc, #252]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7fe ffe7 	bl	800a7c2 <USBD_SetClassConfig>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f962 	bl	800baca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2202      	movs	r2, #2
 800b80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b80e:	e065      	b.n	800b8dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fa25 	bl	800bc60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2203      	movs	r2, #3
 800b81a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b81e:	e05d      	b.n	800b8dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fa1d 	bl	800bc60 <USBD_CtlSendStatus>
      break;
 800b826:	e059      	b.n	800b8dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b828:	4b2f      	ldr	r3, [pc, #188]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d112      	bne.n	800b856 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b838:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b842:	4b29      	ldr	r3, [pc, #164]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fe ffd6 	bl	800a7fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa06 	bl	800bc60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b854:	e042      	b.n	800b8dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b856:	4b24      	ldr	r3, [pc, #144]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d02a      	beq.n	800b8ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7fe ffc4 	bl	800a7fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b872:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b87c:	4b1a      	ldr	r3, [pc, #104]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7fe ff9d 	bl	800a7c2 <USBD_SetClassConfig>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00f      	beq.n	800b8b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f918 	bl	800baca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7fe ffa9 	bl	800a7fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8b0:	e014      	b.n	800b8dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9d4 	bl	800bc60 <USBD_CtlSendStatus>
      break;
 800b8b8:	e010      	b.n	800b8dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9d0 	bl	800bc60 <USBD_CtlSendStatus>
      break;
 800b8c0:	e00c      	b.n	800b8dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f900 	bl	800baca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8ca:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <USBD_SetConfig+0x150>)
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7fe ff92 	bl	800a7fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b8da:	bf00      	nop
  }

  return ret;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20002400 	.word	0x20002400

0800b8ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	88db      	ldrh	r3, [r3, #6]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d004      	beq.n	800b908 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f8e2 	bl	800baca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b906:	e023      	b.n	800b950 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	dc02      	bgt.n	800b91a <USBD_GetConfig+0x2e>
 800b914:	2b00      	cmp	r3, #0
 800b916:	dc03      	bgt.n	800b920 <USBD_GetConfig+0x34>
 800b918:	e015      	b.n	800b946 <USBD_GetConfig+0x5a>
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d00b      	beq.n	800b936 <USBD_GetConfig+0x4a>
 800b91e:	e012      	b.n	800b946 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	3308      	adds	r3, #8
 800b92a:	2201      	movs	r2, #1
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f93c 	bl	800bbac <USBD_CtlSendData>
        break;
 800b934:	e00c      	b.n	800b950 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3304      	adds	r3, #4
 800b93a:	2201      	movs	r2, #1
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f000 f934 	bl	800bbac <USBD_CtlSendData>
        break;
 800b944:	e004      	b.n	800b950 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f8be 	bl	800baca <USBD_CtlError>
        break;
 800b94e:	bf00      	nop
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	3b01      	subs	r3, #1
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d81e      	bhi.n	800b9ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	88db      	ldrh	r3, [r3, #6]
 800b974:	2b02      	cmp	r3, #2
 800b976:	d004      	beq.n	800b982 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f8a5 	bl	800baca <USBD_CtlError>
        break;
 800b980:	e01a      	b.n	800b9b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d005      	beq.n	800b99e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f043 0202 	orr.w	r2, r3, #2
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	330c      	adds	r3, #12
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f900 	bl	800bbac <USBD_CtlSendData>
      break;
 800b9ac:	e004      	b.n	800b9b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f88a 	bl	800baca <USBD_CtlError>
      break;
 800b9b6:	bf00      	nop
  }
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	885b      	ldrh	r3, [r3, #2]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d107      	bne.n	800b9e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f940 	bl	800bc60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9e0:	e013      	b.n	800ba0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	885b      	ldrh	r3, [r3, #2]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d10b      	bne.n	800ba02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	889b      	ldrh	r3, [r3, #4]
 800b9ee:	0a1b      	lsrs	r3, r3, #8
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f930 	bl	800bc60 <USBD_CtlSendStatus>
}
 800ba00:	e003      	b.n	800ba0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba02:	6839      	ldr	r1, [r7, #0]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f860 	bl	800baca <USBD_CtlError>
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d80b      	bhi.n	800ba42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	885b      	ldrh	r3, [r3, #2]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d10c      	bne.n	800ba4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f910 	bl	800bc60 <USBD_CtlSendStatus>
      }
      break;
 800ba40:	e004      	b.n	800ba4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f840 	bl	800baca <USBD_CtlError>
      break;
 800ba4a:	e000      	b.n	800ba4e <USBD_ClrFeature+0x3c>
      break;
 800ba4c:	bf00      	nop
  }
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	781a      	ldrb	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	781a      	ldrb	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fa41 	bl	800af08 <SWAPBYTE>
 800ba86:	4603      	mov	r3, r0
 800ba88:	461a      	mov	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3301      	adds	r3, #1
 800ba92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3301      	adds	r3, #1
 800ba98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fa34 	bl	800af08 <SWAPBYTE>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3301      	adds	r3, #1
 800baac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	3301      	adds	r3, #1
 800bab2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fa27 	bl	800af08 <SWAPBYTE>
 800baba:	4603      	mov	r3, r0
 800babc:	461a      	mov	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	80da      	strh	r2, [r3, #6]
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad4:	2180      	movs	r1, #128	; 0x80
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f003 f8ae 	bl	800ec38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800badc:	2100      	movs	r1, #0
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f003 f8aa 	bl	800ec38 <USBD_LL_StallEP>
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d036      	beq.n	800bb70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb06:	6938      	ldr	r0, [r7, #16]
 800bb08:	f000 f836 	bl	800bb78 <USBD_GetLen>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	4413      	add	r3, r2
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	7812      	ldrb	r2, [r2, #0]
 800bb24:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	2203      	movs	r2, #3
 800bb34:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb36:	7dfb      	ldrb	r3, [r7, #23]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb3c:	e013      	b.n	800bb66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4413      	add	r3, r2
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	7812      	ldrb	r2, [r2, #0]
 800bb48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	613b      	str	r3, [r7, #16]
    idx++;
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	3301      	adds	r3, #1
 800bb54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	3301      	adds	r3, #1
 800bb64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1e7      	bne.n	800bb3e <USBD_GetString+0x52>
 800bb6e:	e000      	b.n	800bb72 <USBD_GetString+0x86>
    return;
 800bb70:	bf00      	nop
  }
}
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb88:	e005      	b.n	800bb96 <USBD_GetLen+0x1e>
  {
    len++;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3301      	adds	r3, #1
 800bb94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1f5      	bne.n	800bb8a <USBD_GetLen+0x12>
  }

  return len;
 800bb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3714      	adds	r7, #20
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f003 f8b9 	bl	800ed4a <USBD_LL_Transmit>

  return USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	60b9      	str	r1, [r7, #8]
 800bbec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f003 f8a8 	bl	800ed4a <USBD_LL_Transmit>

  return USBD_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2203      	movs	r2, #3
 800bc14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f003 f8ac 	bl	800ed8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	2100      	movs	r1, #0
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f003 f89b 	bl	800ed8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc70:	2300      	movs	r3, #0
 800bc72:	2200      	movs	r2, #0
 800bc74:	2100      	movs	r1, #0
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f003 f867 	bl	800ed4a <USBD_LL_Transmit>

  return USBD_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2205      	movs	r2, #5
 800bc92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc96:	2300      	movs	r3, #0
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f003 f875 	bl	800ed8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	4a08      	ldr	r2, [pc, #32]	; (800bcdc <disk_status+0x30>)
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4413      	add	r3, r2
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	79fa      	ldrb	r2, [r7, #7]
 800bcc4:	4905      	ldr	r1, [pc, #20]	; (800bcdc <disk_status+0x30>)
 800bcc6:	440a      	add	r2, r1
 800bcc8:	7a12      	ldrb	r2, [r2, #8]
 800bcca:	4610      	mov	r0, r2
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	2000242c 	.word	0x2000242c

0800bce0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	4a0d      	ldr	r2, [pc, #52]	; (800bd28 <disk_initialize+0x48>)
 800bcf2:	5cd3      	ldrb	r3, [r2, r3]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d111      	bne.n	800bd1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	4a0b      	ldr	r2, [pc, #44]	; (800bd28 <disk_initialize+0x48>)
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	4a09      	ldr	r2, [pc, #36]	; (800bd28 <disk_initialize+0x48>)
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	79fa      	ldrb	r2, [r7, #7]
 800bd0e:	4906      	ldr	r1, [pc, #24]	; (800bd28 <disk_initialize+0x48>)
 800bd10:	440a      	add	r2, r1
 800bd12:	7a12      	ldrb	r2, [r2, #8]
 800bd14:	4610      	mov	r0, r2
 800bd16:	4798      	blx	r3
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	2000242c 	.word	0x2000242c

0800bd2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
 800bd3e:	4a0a      	ldr	r2, [pc, #40]	; (800bd68 <disk_read+0x3c>)
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	689c      	ldr	r4, [r3, #8]
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	4a07      	ldr	r2, [pc, #28]	; (800bd68 <disk_read+0x3c>)
 800bd4c:	4413      	add	r3, r2
 800bd4e:	7a18      	ldrb	r0, [r3, #8]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	68b9      	ldr	r1, [r7, #8]
 800bd56:	47a0      	blx	r4
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd90      	pop	{r4, r7, pc}
 800bd66:	bf00      	nop
 800bd68:	2000242c 	.word	0x2000242c

0800bd6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	607a      	str	r2, [r7, #4]
 800bd76:	603b      	str	r3, [r7, #0]
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd7c:	7bfb      	ldrb	r3, [r7, #15]
 800bd7e:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <disk_write+0x3c>)
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	68dc      	ldr	r4, [r3, #12]
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
 800bd8a:	4a07      	ldr	r2, [pc, #28]	; (800bda8 <disk_write+0x3c>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	7a18      	ldrb	r0, [r3, #8]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	47a0      	blx	r4
 800bd98:	4603      	mov	r3, r0
 800bd9a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd90      	pop	{r4, r7, pc}
 800bda6:	bf00      	nop
 800bda8:	2000242c 	.word	0x2000242c

0800bdac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	603a      	str	r2, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	4a09      	ldr	r2, [pc, #36]	; (800bde4 <disk_ioctl+0x38>)
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	79fa      	ldrb	r2, [r7, #7]
 800bdca:	4906      	ldr	r1, [pc, #24]	; (800bde4 <disk_ioctl+0x38>)
 800bdcc:	440a      	add	r2, r1
 800bdce:	7a10      	ldrb	r0, [r2, #8]
 800bdd0:	79b9      	ldrb	r1, [r7, #6]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	4798      	blx	r3
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	2000242c 	.word	0x2000242c

0800bde8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bdf8:	89fb      	ldrh	r3, [r7, #14]
 800bdfa:	021b      	lsls	r3, r3, #8
 800bdfc:	b21a      	sxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b21b      	sxth	r3, r3
 800be04:	4313      	orrs	r3, r2
 800be06:	b21b      	sxth	r3, r3
 800be08:	81fb      	strh	r3, [r7, #14]
	return rv;
 800be0a:	89fb      	ldrh	r3, [r7, #14]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3303      	adds	r3, #3
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	3202      	adds	r2, #2
 800be30:	7812      	ldrb	r2, [r2, #0]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	3201      	adds	r2, #1
 800be3e:	7812      	ldrb	r2, [r2, #0]
 800be40:	4313      	orrs	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	7812      	ldrb	r2, [r2, #0]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
	return rv;
 800be50:	68fb      	ldr	r3, [r7, #12]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800be5e:	b480      	push	{r7}
 800be60:	b083      	sub	sp, #12
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	1c5a      	adds	r2, r3, #1
 800be6e:	607a      	str	r2, [r7, #4]
 800be70:	887a      	ldrh	r2, [r7, #2]
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	887b      	ldrh	r3, [r7, #2]
 800be78:	0a1b      	lsrs	r3, r3, #8
 800be7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	607a      	str	r2, [r7, #4]
 800be82:	887a      	ldrh	r2, [r7, #2]
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	b2d2      	uxtb	r2, r2
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	0a1b      	lsrs	r3, r3, #8
 800beae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	607a      	str	r2, [r7, #4]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	b2d2      	uxtb	r2, r2
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	0a1b      	lsrs	r3, r3, #8
 800bec0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	701a      	strb	r2, [r3, #0]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	0a1b      	lsrs	r3, r3, #8
 800bed2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	607a      	str	r2, [r7, #4]
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	701a      	strb	r2, [r3, #0]
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800beec:	b480      	push	{r7}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00d      	beq.n	800bf22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	1c53      	adds	r3, r2, #1
 800bf0a:	613b      	str	r3, [r7, #16]
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	6179      	str	r1, [r7, #20]
 800bf12:	7812      	ldrb	r2, [r2, #0]
 800bf14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1f1      	bne.n	800bf06 <mem_cpy+0x1a>
	}
}
 800bf22:	bf00      	nop
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bf2e:	b480      	push	{r7}
 800bf30:	b087      	sub	sp, #28
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	617a      	str	r2, [r7, #20]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	b2d2      	uxtb	r2, r2
 800bf48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1f3      	bne.n	800bf3e <mem_set+0x10>
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	371c      	adds	r7, #28
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bf64:	b480      	push	{r7}
 800bf66:	b089      	sub	sp, #36	; 0x24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	61fa      	str	r2, [r7, #28]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	4619      	mov	r1, r3
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	61ba      	str	r2, [r7, #24]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	1acb      	subs	r3, r1, r3
 800bf90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	607b      	str	r3, [r7, #4]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <mem_cmp+0x40>
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0eb      	beq.n	800bf7c <mem_cmp+0x18>

	return r;
 800bfa4:	697b      	ldr	r3, [r7, #20]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3724      	adds	r7, #36	; 0x24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr

0800bfb2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bfb2:	b480      	push	{r7}
 800bfb4:	b083      	sub	sp, #12
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bfbc:	e002      	b.n	800bfc4 <chk_chr+0x12>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	607b      	str	r3, [r7, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <chk_chr+0x26>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d1f2      	bne.n	800bfbe <chk_chr+0xc>
	return *str;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	781b      	ldrb	r3, [r3, #0]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bff2:	2300      	movs	r3, #0
 800bff4:	60bb      	str	r3, [r7, #8]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	e029      	b.n	800c050 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bffc:	4a27      	ldr	r2, [pc, #156]	; (800c09c <chk_lock+0xb4>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	4413      	add	r3, r2
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d01d      	beq.n	800c046 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c00a:	4a24      	ldr	r2, [pc, #144]	; (800c09c <chk_lock+0xb4>)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	4413      	add	r3, r2
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d116      	bne.n	800c04a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c01c:	4a1f      	ldr	r2, [pc, #124]	; (800c09c <chk_lock+0xb4>)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	4413      	add	r3, r2
 800c024:	3304      	adds	r3, #4
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d10c      	bne.n	800c04a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c030:	4a1a      	ldr	r2, [pc, #104]	; (800c09c <chk_lock+0xb4>)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	4413      	add	r3, r2
 800c038:	3308      	adds	r3, #8
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c040:	429a      	cmp	r2, r3
 800c042:	d102      	bne.n	800c04a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c044:	e007      	b.n	800c056 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c046:	2301      	movs	r3, #1
 800c048:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3301      	adds	r3, #1
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d9d2      	bls.n	800bffc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d109      	bne.n	800c070 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <chk_lock+0x80>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b02      	cmp	r3, #2
 800c066:	d101      	bne.n	800c06c <chk_lock+0x84>
 800c068:	2300      	movs	r3, #0
 800c06a:	e010      	b.n	800c08e <chk_lock+0xa6>
 800c06c:	2312      	movs	r3, #18
 800c06e:	e00e      	b.n	800c08e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d108      	bne.n	800c088 <chk_lock+0xa0>
 800c076:	4a09      	ldr	r2, [pc, #36]	; (800c09c <chk_lock+0xb4>)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	011b      	lsls	r3, r3, #4
 800c07c:	4413      	add	r3, r2
 800c07e:	330c      	adds	r3, #12
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c086:	d101      	bne.n	800c08c <chk_lock+0xa4>
 800c088:	2310      	movs	r3, #16
 800c08a:	e000      	b.n	800c08e <chk_lock+0xa6>
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
 800c09a:	bf00      	nop
 800c09c:	2000240c 	.word	0x2000240c

0800c0a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]
 800c0aa:	e002      	b.n	800c0b2 <enq_lock+0x12>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	607b      	str	r3, [r7, #4]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d806      	bhi.n	800c0c6 <enq_lock+0x26>
 800c0b8:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <enq_lock+0x40>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	4413      	add	r3, r2
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1f2      	bne.n	800c0ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	bf14      	ite	ne
 800c0cc:	2301      	movne	r3, #1
 800c0ce:	2300      	moveq	r3, #0
 800c0d0:	b2db      	uxtb	r3, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	2000240c 	.word	0x2000240c

0800c0e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e01f      	b.n	800c134 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c0f4:	4a41      	ldr	r2, [pc, #260]	; (800c1fc <inc_lock+0x118>)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	011b      	lsls	r3, r3, #4
 800c0fa:	4413      	add	r3, r2
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	d113      	bne.n	800c12e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c106:	4a3d      	ldr	r2, [pc, #244]	; (800c1fc <inc_lock+0x118>)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	011b      	lsls	r3, r3, #4
 800c10c:	4413      	add	r3, r2
 800c10e:	3304      	adds	r3, #4
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c116:	429a      	cmp	r2, r3
 800c118:	d109      	bne.n	800c12e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c11a:	4a38      	ldr	r2, [pc, #224]	; (800c1fc <inc_lock+0x118>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	011b      	lsls	r3, r3, #4
 800c120:	4413      	add	r3, r2
 800c122:	3308      	adds	r3, #8
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d006      	beq.n	800c13c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d9dc      	bls.n	800c0f4 <inc_lock+0x10>
 800c13a:	e000      	b.n	800c13e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c13c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b02      	cmp	r3, #2
 800c142:	d132      	bne.n	800c1aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c144:	2300      	movs	r3, #0
 800c146:	60fb      	str	r3, [r7, #12]
 800c148:	e002      	b.n	800c150 <inc_lock+0x6c>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3301      	adds	r3, #1
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d806      	bhi.n	800c164 <inc_lock+0x80>
 800c156:	4a29      	ldr	r2, [pc, #164]	; (800c1fc <inc_lock+0x118>)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	4413      	add	r3, r2
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f2      	bne.n	800c14a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d101      	bne.n	800c16e <inc_lock+0x8a>
 800c16a:	2300      	movs	r3, #0
 800c16c:	e040      	b.n	800c1f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4922      	ldr	r1, [pc, #136]	; (800c1fc <inc_lock+0x118>)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	011b      	lsls	r3, r3, #4
 800c178:	440b      	add	r3, r1
 800c17a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	491e      	ldr	r1, [pc, #120]	; (800c1fc <inc_lock+0x118>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	011b      	lsls	r3, r3, #4
 800c186:	440b      	add	r3, r1
 800c188:	3304      	adds	r3, #4
 800c18a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695a      	ldr	r2, [r3, #20]
 800c190:	491a      	ldr	r1, [pc, #104]	; (800c1fc <inc_lock+0x118>)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	440b      	add	r3, r1
 800c198:	3308      	adds	r3, #8
 800c19a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c19c:	4a17      	ldr	r2, [pc, #92]	; (800c1fc <inc_lock+0x118>)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	4413      	add	r3, r2
 800c1a4:	330c      	adds	r3, #12
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <inc_lock+0xe0>
 800c1b0:	4a12      	ldr	r2, [pc, #72]	; (800c1fc <inc_lock+0x118>)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	011b      	lsls	r3, r3, #4
 800c1b6:	4413      	add	r3, r2
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <inc_lock+0xe0>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e015      	b.n	800c1f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d108      	bne.n	800c1dc <inc_lock+0xf8>
 800c1ca:	4a0c      	ldr	r2, [pc, #48]	; (800c1fc <inc_lock+0x118>)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	4413      	add	r3, r2
 800c1d2:	330c      	adds	r3, #12
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	e001      	b.n	800c1e0 <inc_lock+0xfc>
 800c1dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1e0:	4906      	ldr	r1, [pc, #24]	; (800c1fc <inc_lock+0x118>)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	011b      	lsls	r3, r3, #4
 800c1e6:	440b      	add	r3, r1
 800c1e8:	330c      	adds	r3, #12
 800c1ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3301      	adds	r3, #1
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3714      	adds	r7, #20
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	2000240c 	.word	0x2000240c

0800c200 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3b01      	subs	r3, #1
 800c20c:	607b      	str	r3, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d825      	bhi.n	800c260 <dec_lock+0x60>
		n = Files[i].ctr;
 800c214:	4a17      	ldr	r2, [pc, #92]	; (800c274 <dec_lock+0x74>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	4413      	add	r3, r2
 800c21c:	330c      	adds	r3, #12
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c222:	89fb      	ldrh	r3, [r7, #14]
 800c224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c228:	d101      	bne.n	800c22e <dec_lock+0x2e>
 800c22a:	2300      	movs	r3, #0
 800c22c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c22e:	89fb      	ldrh	r3, [r7, #14]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <dec_lock+0x3a>
 800c234:	89fb      	ldrh	r3, [r7, #14]
 800c236:	3b01      	subs	r3, #1
 800c238:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c23a:	4a0e      	ldr	r2, [pc, #56]	; (800c274 <dec_lock+0x74>)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	011b      	lsls	r3, r3, #4
 800c240:	4413      	add	r3, r2
 800c242:	330c      	adds	r3, #12
 800c244:	89fa      	ldrh	r2, [r7, #14]
 800c246:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d105      	bne.n	800c25a <dec_lock+0x5a>
 800c24e:	4a09      	ldr	r2, [pc, #36]	; (800c274 <dec_lock+0x74>)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	011b      	lsls	r3, r3, #4
 800c254:	4413      	add	r3, r2
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	737b      	strb	r3, [r7, #13]
 800c25e:	e001      	b.n	800c264 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c260:	2302      	movs	r3, #2
 800c262:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c264:	7b7b      	ldrb	r3, [r7, #13]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	2000240c 	.word	0x2000240c

0800c278 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e010      	b.n	800c2a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c286:	4a0d      	ldr	r2, [pc, #52]	; (800c2bc <clear_lock+0x44>)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	011b      	lsls	r3, r3, #4
 800c28c:	4413      	add	r3, r2
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	429a      	cmp	r2, r3
 800c294:	d105      	bne.n	800c2a2 <clear_lock+0x2a>
 800c296:	4a09      	ldr	r2, [pc, #36]	; (800c2bc <clear_lock+0x44>)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	011b      	lsls	r3, r3, #4
 800c29c:	4413      	add	r3, r2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	60fb      	str	r3, [r7, #12]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d9eb      	bls.n	800c286 <clear_lock+0xe>
	}
}
 800c2ae:	bf00      	nop
 800c2b0:	bf00      	nop
 800c2b2:	3714      	adds	r7, #20
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	2000240c 	.word	0x2000240c

0800c2c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	78db      	ldrb	r3, [r3, #3]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d034      	beq.n	800c33e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	7858      	ldrb	r0, [r3, #1]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	f7ff fd40 	bl	800bd6c <disk_write>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	73fb      	strb	r3, [r7, #15]
 800c2f6:	e022      	b.n	800c33e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	1ad2      	subs	r2, r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d217      	bcs.n	800c33e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	789b      	ldrb	r3, [r3, #2]
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	e010      	b.n	800c338 <sync_window+0x78>
					wsect += fs->fsize;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	69db      	ldr	r3, [r3, #28]
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	4413      	add	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	7858      	ldrb	r0, [r3, #1]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c32a:	2301      	movs	r3, #1
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	f7ff fd1d 	bl	800bd6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3b01      	subs	r3, #1
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d8eb      	bhi.n	800c316 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d01b      	beq.n	800c398 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff ffad 	bl	800c2c0 <sync_window>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d113      	bne.n	800c398 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7858      	ldrb	r0, [r3, #1]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c37a:	2301      	movs	r3, #1
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	f7ff fcd5 	bl	800bd2c <disk_read>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d004      	beq.n	800c392 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c388:	f04f 33ff 	mov.w	r3, #4294967295
 800c38c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c38e:	2301      	movs	r3, #1
 800c390:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ff87 	bl	800c2c0 <sync_window>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d159      	bne.n	800c470 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d149      	bne.n	800c458 <sync_fs+0xb4>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	791b      	ldrb	r3, [r3, #4]
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d145      	bne.n	800c458 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	899b      	ldrh	r3, [r3, #12]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	2100      	movs	r1, #0
 800c3da:	f7ff fda8 	bl	800bf2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3334      	adds	r3, #52	; 0x34
 800c3e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c3e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fd37 	bl	800be5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3334      	adds	r3, #52	; 0x34
 800c3f4:	4921      	ldr	r1, [pc, #132]	; (800c47c <sync_fs+0xd8>)
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff fd4c 	bl	800be94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3334      	adds	r3, #52	; 0x34
 800c400:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c404:	491e      	ldr	r1, [pc, #120]	; (800c480 <sync_fs+0xdc>)
 800c406:	4618      	mov	r0, r3
 800c408:	f7ff fd44 	bl	800be94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3334      	adds	r3, #52	; 0x34
 800c410:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7ff fd3a 	bl	800be94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3334      	adds	r3, #52	; 0x34
 800c424:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f7ff fd30 	bl	800be94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7858      	ldrb	r0, [r3, #1]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44c:	2301      	movs	r3, #1
 800c44e:	f7ff fc8d 	bl	800bd6c <disk_write>
			fs->fsi_flag = 0;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	785b      	ldrb	r3, [r3, #1]
 800c45c:	2200      	movs	r2, #0
 800c45e:	2100      	movs	r1, #0
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fca3 	bl	800bdac <disk_ioctl>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <sync_fs+0xcc>
 800c46c:	2301      	movs	r3, #1
 800c46e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	41615252 	.word	0x41615252
 800c480:	61417272 	.word	0x61417272

0800c484 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	3b02      	subs	r3, #2
 800c492:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	3b02      	subs	r3, #2
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d301      	bcc.n	800c4a4 <clust2sect+0x20>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e008      	b.n	800c4b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	895b      	ldrh	r3, [r3, #10]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	fb03 f202 	mul.w	r2, r3, r2
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	4413      	add	r3, r2
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b086      	sub	sp, #24
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d904      	bls.n	800c4e2 <get_fat+0x20>
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d302      	bcc.n	800c4e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	617b      	str	r3, [r7, #20]
 800c4e6:	e0bb      	b.n	800c660 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	f000 8083 	beq.w	800c5fe <get_fat+0x13c>
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	f300 80a7 	bgt.w	800c64c <get_fat+0x18a>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d002      	beq.n	800c508 <get_fat+0x46>
 800c502:	2b02      	cmp	r3, #2
 800c504:	d056      	beq.n	800c5b4 <get_fat+0xf2>
 800c506:	e0a1      	b.n	800c64c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	085b      	lsrs	r3, r3, #1
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	4413      	add	r3, r2
 800c514:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	899b      	ldrh	r3, [r3, #12]
 800c51e:	4619      	mov	r1, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	fbb3 f3f1 	udiv	r3, r3, r1
 800c526:	4413      	add	r3, r2
 800c528:	4619      	mov	r1, r3
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f7ff ff0c 	bl	800c348 <move_window>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	f040 808d 	bne.w	800c652 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	60fa      	str	r2, [r7, #12]
 800c53e:	693a      	ldr	r2, [r7, #16]
 800c540:	8992      	ldrh	r2, [r2, #12]
 800c542:	fbb3 f1f2 	udiv	r1, r3, r2
 800c546:	fb01 f202 	mul.w	r2, r1, r2
 800c54a:	1a9b      	subs	r3, r3, r2
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	4413      	add	r3, r2
 800c550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c554:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	899b      	ldrh	r3, [r3, #12]
 800c55e:	4619      	mov	r1, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	fbb3 f3f1 	udiv	r3, r3, r1
 800c566:	4413      	add	r3, r2
 800c568:	4619      	mov	r1, r3
 800c56a:	6938      	ldr	r0, [r7, #16]
 800c56c:	f7ff feec 	bl	800c348 <move_window>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d16f      	bne.n	800c656 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	899b      	ldrh	r3, [r3, #12]
 800c57a:	461a      	mov	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c582:	fb01 f202 	mul.w	r2, r1, r2
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	4413      	add	r3, r2
 800c58c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	461a      	mov	r2, r3
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4313      	orrs	r3, r2
 800c598:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <get_fat+0xe8>
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	091b      	lsrs	r3, r3, #4
 800c5a8:	e002      	b.n	800c5b0 <get_fat+0xee>
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5b0:	617b      	str	r3, [r7, #20]
			break;
 800c5b2:	e055      	b.n	800c660 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	899b      	ldrh	r3, [r3, #12]
 800c5bc:	085b      	lsrs	r3, r3, #1
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5c8:	4413      	add	r3, r2
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	6938      	ldr	r0, [r7, #16]
 800c5ce:	f7ff febb 	bl	800c348 <move_window>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d140      	bne.n	800c65a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	693a      	ldr	r2, [r7, #16]
 800c5e4:	8992      	ldrh	r2, [r2, #12]
 800c5e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5ea:	fb00 f202 	mul.w	r2, r0, r2
 800c5ee:	1a9b      	subs	r3, r3, r2
 800c5f0:	440b      	add	r3, r1
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7ff fbf8 	bl	800bde8 <ld_word>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	617b      	str	r3, [r7, #20]
			break;
 800c5fc:	e030      	b.n	800c660 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	899b      	ldrh	r3, [r3, #12]
 800c606:	089b      	lsrs	r3, r3, #2
 800c608:	b29b      	uxth	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c612:	4413      	add	r3, r2
 800c614:	4619      	mov	r1, r3
 800c616:	6938      	ldr	r0, [r7, #16]
 800c618:	f7ff fe96 	bl	800c348 <move_window>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d11d      	bne.n	800c65e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	693a      	ldr	r2, [r7, #16]
 800c62e:	8992      	ldrh	r2, [r2, #12]
 800c630:	fbb3 f0f2 	udiv	r0, r3, r2
 800c634:	fb00 f202 	mul.w	r2, r0, r2
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	440b      	add	r3, r1
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7ff fbeb 	bl	800be18 <ld_dword>
 800c642:	4603      	mov	r3, r0
 800c644:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c648:	617b      	str	r3, [r7, #20]
			break;
 800c64a:	e009      	b.n	800c660 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c64c:	2301      	movs	r3, #1
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	e006      	b.n	800c660 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c652:	bf00      	nop
 800c654:	e004      	b.n	800c660 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c656:	bf00      	nop
 800c658:	e002      	b.n	800c660 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c65a:	bf00      	nop
 800c65c:	e000      	b.n	800c660 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c65e:	bf00      	nop
		}
	}

	return val;
 800c660:	697b      	ldr	r3, [r7, #20]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c66a:	b590      	push	{r4, r7, lr}
 800c66c:	b089      	sub	sp, #36	; 0x24
 800c66e:	af00      	add	r7, sp, #0
 800c670:	60f8      	str	r0, [r7, #12]
 800c672:	60b9      	str	r1, [r7, #8]
 800c674:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c676:	2302      	movs	r3, #2
 800c678:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	f240 8102 	bls.w	800c886 <put_fat+0x21c>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	429a      	cmp	r2, r3
 800c68a:	f080 80fc 	bcs.w	800c886 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b03      	cmp	r3, #3
 800c694:	f000 80b6 	beq.w	800c804 <put_fat+0x19a>
 800c698:	2b03      	cmp	r3, #3
 800c69a:	f300 80fd 	bgt.w	800c898 <put_fat+0x22e>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d003      	beq.n	800c6aa <put_fat+0x40>
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	f000 8083 	beq.w	800c7ae <put_fat+0x144>
 800c6a8:	e0f6      	b.n	800c898 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	61bb      	str	r3, [r7, #24]
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	085b      	lsrs	r3, r3, #1
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	899b      	ldrh	r3, [r3, #12]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6c8:	4413      	add	r3, r2
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f7ff fe3b 	bl	800c348 <move_window>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6d6:	7ffb      	ldrb	r3, [r7, #31]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f040 80d6 	bne.w	800c88a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	61ba      	str	r2, [r7, #24]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	8992      	ldrh	r2, [r2, #12]
 800c6ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6f2:	fb00 f202 	mul.w	r2, r0, r2
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	440b      	add	r3, r1
 800c6fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00d      	beq.n	800c722 <put_fat+0xb8>
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	b25b      	sxtb	r3, r3
 800c70c:	f003 030f 	and.w	r3, r3, #15
 800c710:	b25a      	sxtb	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	b2db      	uxtb	r3, r3
 800c716:	011b      	lsls	r3, r3, #4
 800c718:	b25b      	sxtb	r3, r3
 800c71a:	4313      	orrs	r3, r2
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	e001      	b.n	800c726 <put_fat+0xbc>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	b2db      	uxtb	r3, r3
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2201      	movs	r2, #1
 800c72e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	899b      	ldrh	r3, [r3, #12]
 800c738:	4619      	mov	r1, r3
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c740:	4413      	add	r3, r2
 800c742:	4619      	mov	r1, r3
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff fdff 	bl	800c348 <move_window>
 800c74a:	4603      	mov	r3, r0
 800c74c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c74e:	7ffb      	ldrb	r3, [r7, #31]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f040 809c 	bne.w	800c88e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	461a      	mov	r2, r3
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	fbb3 f0f2 	udiv	r0, r3, r2
 800c768:	fb00 f202 	mul.w	r2, r0, r2
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	440b      	add	r3, r1
 800c770:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <put_fat+0x11a>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	091b      	lsrs	r3, r3, #4
 800c780:	b2db      	uxtb	r3, r3
 800c782:	e00e      	b.n	800c7a2 <put_fat+0x138>
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	b25b      	sxtb	r3, r3
 800c78a:	f023 030f 	bic.w	r3, r3, #15
 800c78e:	b25a      	sxtb	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	0a1b      	lsrs	r3, r3, #8
 800c794:	b25b      	sxtb	r3, r3
 800c796:	f003 030f 	and.w	r3, r3, #15
 800c79a:	b25b      	sxtb	r3, r3
 800c79c:	4313      	orrs	r3, r2
 800c79e:	b25b      	sxtb	r3, r3
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	70da      	strb	r2, [r3, #3]
			break;
 800c7ac:	e074      	b.n	800c898 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	085b      	lsrs	r3, r3, #1
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7c2:	4413      	add	r3, r2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f7ff fdbe 	bl	800c348 <move_window>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7d0:	7ffb      	ldrb	r3, [r7, #31]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d15d      	bne.n	800c892 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	8992      	ldrh	r2, [r2, #12]
 800c7e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7e8:	fb00 f202 	mul.w	r2, r0, r2
 800c7ec:	1a9b      	subs	r3, r3, r2
 800c7ee:	440b      	add	r3, r1
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	b292      	uxth	r2, r2
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fb31 	bl	800be5e <st_word>
			fs->wflag = 1;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2201      	movs	r2, #1
 800c800:	70da      	strb	r2, [r3, #3]
			break;
 800c802:	e049      	b.n	800c898 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	899b      	ldrh	r3, [r3, #12]
 800c80c:	089b      	lsrs	r3, r3, #2
 800c80e:	b29b      	uxth	r3, r3
 800c810:	4619      	mov	r1, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	fbb3 f3f1 	udiv	r3, r3, r1
 800c818:	4413      	add	r3, r2
 800c81a:	4619      	mov	r1, r3
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f7ff fd93 	bl	800c348 <move_window>
 800c822:	4603      	mov	r3, r0
 800c824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c826:	7ffb      	ldrb	r3, [r7, #31]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d134      	bne.n	800c896 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	8992      	ldrh	r2, [r2, #12]
 800c840:	fbb3 f0f2 	udiv	r0, r3, r2
 800c844:	fb00 f202 	mul.w	r2, r0, r2
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	440b      	add	r3, r1
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fae3 	bl	800be18 <ld_dword>
 800c852:	4603      	mov	r3, r0
 800c854:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c858:	4323      	orrs	r3, r4
 800c85a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	8992      	ldrh	r2, [r2, #12]
 800c86a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c86e:	fb00 f202 	mul.w	r2, r0, r2
 800c872:	1a9b      	subs	r3, r3, r2
 800c874:	440b      	add	r3, r1
 800c876:	6879      	ldr	r1, [r7, #4]
 800c878:	4618      	mov	r0, r3
 800c87a:	f7ff fb0b 	bl	800be94 <st_dword>
			fs->wflag = 1;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2201      	movs	r2, #1
 800c882:	70da      	strb	r2, [r3, #3]
			break;
 800c884:	e008      	b.n	800c898 <put_fat+0x22e>
		}
	}
 800c886:	bf00      	nop
 800c888:	e006      	b.n	800c898 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c88a:	bf00      	nop
 800c88c:	e004      	b.n	800c898 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c88e:	bf00      	nop
 800c890:	e002      	b.n	800c898 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c892:	bf00      	nop
 800c894:	e000      	b.n	800c898 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c896:	bf00      	nop
	return res;
 800c898:	7ffb      	ldrb	r3, [r7, #31]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3724      	adds	r7, #36	; 0x24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}

0800c8a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b088      	sub	sp, #32
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d904      	bls.n	800c8c8 <remove_chain+0x26>
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	68ba      	ldr	r2, [r7, #8]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d301      	bcc.n	800c8cc <remove_chain+0x2a>
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	e04b      	b.n	800c964 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00c      	beq.n	800c8ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d6:	6879      	ldr	r1, [r7, #4]
 800c8d8:	69b8      	ldr	r0, [r7, #24]
 800c8da:	f7ff fec6 	bl	800c66a <put_fat>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c8e2:	7ffb      	ldrb	r3, [r7, #31]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <remove_chain+0x4a>
 800c8e8:	7ffb      	ldrb	r3, [r7, #31]
 800c8ea:	e03b      	b.n	800c964 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f7ff fde7 	bl	800c4c2 <get_fat>
 800c8f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d031      	beq.n	800c960 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d101      	bne.n	800c906 <remove_chain+0x64>
 800c902:	2302      	movs	r3, #2
 800c904:	e02e      	b.n	800c964 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90c:	d101      	bne.n	800c912 <remove_chain+0x70>
 800c90e:	2301      	movs	r3, #1
 800c910:	e028      	b.n	800c964 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c912:	2200      	movs	r2, #0
 800c914:	68b9      	ldr	r1, [r7, #8]
 800c916:	69b8      	ldr	r0, [r7, #24]
 800c918:	f7ff fea7 	bl	800c66a <put_fat>
 800c91c:	4603      	mov	r3, r0
 800c91e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c920:	7ffb      	ldrb	r3, [r7, #31]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <remove_chain+0x88>
 800c926:	7ffb      	ldrb	r3, [r7, #31]
 800c928:	e01c      	b.n	800c964 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	695a      	ldr	r2, [r3, #20]
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	699b      	ldr	r3, [r3, #24]
 800c932:	3b02      	subs	r3, #2
 800c934:	429a      	cmp	r2, r3
 800c936:	d20b      	bcs.n	800c950 <remove_chain+0xae>
			fs->free_clst++;
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	791b      	ldrb	r3, [r3, #4]
 800c946:	f043 0301 	orr.w	r3, r3, #1
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	699b      	ldr	r3, [r3, #24]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d3c6      	bcc.n	800c8ec <remove_chain+0x4a>
 800c95e:	e000      	b.n	800c962 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c960:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3720      	adds	r7, #32
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10d      	bne.n	800c99e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d004      	beq.n	800c998 <create_chain+0x2c>
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	69ba      	ldr	r2, [r7, #24]
 800c994:	429a      	cmp	r2, r3
 800c996:	d31b      	bcc.n	800c9d0 <create_chain+0x64>
 800c998:	2301      	movs	r3, #1
 800c99a:	61bb      	str	r3, [r7, #24]
 800c99c:	e018      	b.n	800c9d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff fd8e 	bl	800c4c2 <get_fat>
 800c9a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d801      	bhi.n	800c9b2 <create_chain+0x46>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e070      	b.n	800ca94 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b8:	d101      	bne.n	800c9be <create_chain+0x52>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	e06a      	b.n	800ca94 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d201      	bcs.n	800c9cc <create_chain+0x60>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	e063      	b.n	800ca94 <create_chain+0x128>
		scl = clst;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d307      	bcc.n	800c9f4 <create_chain+0x88>
				ncl = 2;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c9e8:	69fa      	ldr	r2, [r7, #28]
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d901      	bls.n	800c9f4 <create_chain+0x88>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	e04f      	b.n	800ca94 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c9f4:	69f9      	ldr	r1, [r7, #28]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7ff fd63 	bl	800c4c2 <get_fat>
 800c9fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00e      	beq.n	800ca22 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d003      	beq.n	800ca12 <create_chain+0xa6>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca10:	d101      	bne.n	800ca16 <create_chain+0xaa>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	e03e      	b.n	800ca94 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d1da      	bne.n	800c9d4 <create_chain+0x68>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e038      	b.n	800ca94 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ca22:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295
 800ca28:	69f9      	ldr	r1, [r7, #28]
 800ca2a:	6938      	ldr	r0, [r7, #16]
 800ca2c:	f7ff fe1d 	bl	800c66a <put_fat>
 800ca30:	4603      	mov	r3, r0
 800ca32:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d109      	bne.n	800ca4e <create_chain+0xe2>
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d006      	beq.n	800ca4e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ca40:	69fa      	ldr	r2, [r7, #28]
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6938      	ldr	r0, [r7, #16]
 800ca46:	f7ff fe10 	bl	800c66a <put_fat>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d116      	bne.n	800ca82 <create_chain+0x116>
		fs->last_clst = ncl;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	69fa      	ldr	r2, [r7, #28]
 800ca58:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	695a      	ldr	r2, [r3, #20]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	3b02      	subs	r3, #2
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d804      	bhi.n	800ca72 <create_chain+0x106>
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	791b      	ldrb	r3, [r3, #4]
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	711a      	strb	r2, [r3, #4]
 800ca80:	e007      	b.n	800ca92 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d102      	bne.n	800ca8e <create_chain+0x122>
 800ca88:	f04f 33ff 	mov.w	r3, #4294967295
 800ca8c:	e000      	b.n	800ca90 <create_chain+0x124>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ca92:	69fb      	ldr	r3, [r7, #28]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b087      	sub	sp, #28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	3304      	adds	r3, #4
 800cab2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	899b      	ldrh	r3, [r3, #12]
 800cab8:	461a      	mov	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	8952      	ldrh	r2, [r2, #10]
 800cac4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cac8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1d1a      	adds	r2, r3, #4
 800cace:	613a      	str	r2, [r7, #16]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <clmt_clust+0x42>
 800cada:	2300      	movs	r3, #0
 800cadc:	e010      	b.n	800cb00 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d307      	bcc.n	800caf6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	617b      	str	r3, [r7, #20]
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	3304      	adds	r3, #4
 800caf2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800caf4:	e7e9      	b.n	800caca <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800caf6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	4413      	add	r3, r2
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	371c      	adds	r7, #28
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb22:	d204      	bcs.n	800cb2e <dir_sdi+0x22>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	f003 031f 	and.w	r3, r3, #31
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d001      	beq.n	800cb32 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	e071      	b.n	800cc16 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <dir_sdi+0x46>
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d902      	bls.n	800cb52 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb50:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10c      	bne.n	800cb72 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	095b      	lsrs	r3, r3, #5
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	8912      	ldrh	r2, [r2, #8]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d301      	bcc.n	800cb68 <dir_sdi+0x5c>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e056      	b.n	800cc16 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	61da      	str	r2, [r3, #28]
 800cb70:	e02d      	b.n	800cbce <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	895b      	ldrh	r3, [r3, #10]
 800cb76:	461a      	mov	r2, r3
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	fb02 f303 	mul.w	r3, r2, r3
 800cb80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cb82:	e019      	b.n	800cbb8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6979      	ldr	r1, [r7, #20]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff fc9a 	bl	800c4c2 <get_fat>
 800cb8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb96:	d101      	bne.n	800cb9c <dir_sdi+0x90>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e03c      	b.n	800cc16 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d904      	bls.n	800cbac <dir_sdi+0xa0>
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d301      	bcc.n	800cbb0 <dir_sdi+0xa4>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e032      	b.n	800cc16 <dir_sdi+0x10a>
			ofs -= csz;
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d2e1      	bcs.n	800cb84 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cbc0:	6979      	ldr	r1, [r7, #20]
 800cbc2:	6938      	ldr	r0, [r7, #16]
 800cbc4:	f7ff fc5e 	bl	800c484 <clust2sect>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <dir_sdi+0xd4>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	e01a      	b.n	800cc16 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	69da      	ldr	r2, [r3, #28]
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	899b      	ldrh	r3, [r3, #12]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbf0:	441a      	add	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	899b      	ldrh	r3, [r3, #12]
 800cc00:	461a      	mov	r2, r3
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc08:	fb00 f202 	mul.w	r2, r0, r2
 800cc0c:	1a9b      	subs	r3, r3, r2
 800cc0e:	18ca      	adds	r2, r1, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	695b      	ldr	r3, [r3, #20]
 800cc32:	3320      	adds	r3, #32
 800cc34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	69db      	ldr	r3, [r3, #28]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <dir_next+0x28>
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc44:	d301      	bcc.n	800cc4a <dir_next+0x2c>
 800cc46:	2304      	movs	r3, #4
 800cc48:	e0bb      	b.n	800cdc2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	899b      	ldrh	r3, [r3, #12]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc56:	fb01 f202 	mul.w	r2, r1, r2
 800cc5a:	1a9b      	subs	r3, r3, r2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f040 809d 	bne.w	800cd9c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10b      	bne.n	800cc8c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	095b      	lsrs	r3, r3, #5
 800cc78:	68fa      	ldr	r2, [r7, #12]
 800cc7a:	8912      	ldrh	r2, [r2, #8]
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	f0c0 808d 	bcc.w	800cd9c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	61da      	str	r2, [r3, #28]
 800cc88:	2304      	movs	r3, #4
 800cc8a:	e09a      	b.n	800cdc2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	899b      	ldrh	r3, [r3, #12]
 800cc90:	461a      	mov	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	8952      	ldrh	r2, [r2, #10]
 800cc9c:	3a01      	subs	r2, #1
 800cc9e:	4013      	ands	r3, r2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d17b      	bne.n	800cd9c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7ff fc08 	bl	800c4c2 <get_fat>
 800ccb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d801      	bhi.n	800ccbe <dir_next+0xa0>
 800ccba:	2302      	movs	r3, #2
 800ccbc:	e081      	b.n	800cdc2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d101      	bne.n	800ccca <dir_next+0xac>
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e07b      	b.n	800cdc2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d359      	bcc.n	800cd88 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d104      	bne.n	800cce4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	61da      	str	r2, [r3, #28]
 800cce0:	2304      	movs	r3, #4
 800cce2:	e06e      	b.n	800cdc2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	699b      	ldr	r3, [r3, #24]
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f7ff fe3d 	bl	800c96c <create_chain>
 800ccf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <dir_next+0xe0>
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e061      	b.n	800cdc2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d101      	bne.n	800cd08 <dir_next+0xea>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e05c      	b.n	800cdc2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d101      	bne.n	800cd14 <dir_next+0xf6>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e056      	b.n	800cdc2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f7ff fad3 	bl	800c2c0 <sync_window>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d001      	beq.n	800cd24 <dir_next+0x106>
 800cd20:	2301      	movs	r3, #1
 800cd22:	e04e      	b.n	800cdc2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	2100      	movs	r1, #0
 800cd32:	f7ff f8fc 	bl	800bf2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	6979      	ldr	r1, [r7, #20]
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff fba1 	bl	800c484 <clust2sect>
 800cd42:	4602      	mov	r2, r0
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	631a      	str	r2, [r3, #48]	; 0x30
 800cd48:	e012      	b.n	800cd70 <dir_next+0x152>
						fs->wflag = 1;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fab5 	bl	800c2c0 <sync_window>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <dir_next+0x142>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e030      	b.n	800cdc2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	3301      	adds	r3, #1
 800cd64:	613b      	str	r3, [r7, #16]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	631a      	str	r2, [r3, #48]	; 0x30
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	895b      	ldrh	r3, [r3, #10]
 800cd74:	461a      	mov	r2, r3
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d3e6      	bcc.n	800cd4a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	1ad2      	subs	r2, r2, r3
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cd8e:	6979      	ldr	r1, [r7, #20]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7ff fb77 	bl	800c484 <clust2sect>
 800cd96:	4602      	mov	r2, r0
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	899b      	ldrh	r3, [r3, #12]
 800cdac:	461a      	mov	r2, r3
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdb4:	fb00 f202 	mul.w	r2, r0, r2
 800cdb8:	1a9b      	subs	r3, r3, r2
 800cdba:	18ca      	adds	r2, r1, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b086      	sub	sp, #24
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cdda:	2100      	movs	r1, #0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff fe95 	bl	800cb0c <dir_sdi>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d12b      	bne.n	800ce44 <dir_alloc+0x7a>
		n = 0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff faa6 	bl	800c348 <move_window>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d11d      	bne.n	800ce42 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2be5      	cmp	r3, #229	; 0xe5
 800ce0e:	d004      	beq.n	800ce1a <dir_alloc+0x50>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a1b      	ldr	r3, [r3, #32]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d107      	bne.n	800ce2a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	613b      	str	r3, [r7, #16]
 800ce20:	693a      	ldr	r2, [r7, #16]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d102      	bne.n	800ce2e <dir_alloc+0x64>
 800ce28:	e00c      	b.n	800ce44 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ce2e:	2101      	movs	r1, #1
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff fef4 	bl	800cc1e <dir_next>
 800ce36:	4603      	mov	r3, r0
 800ce38:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d0d7      	beq.n	800cdf0 <dir_alloc+0x26>
 800ce40:	e000      	b.n	800ce44 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ce42:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ce44:	7dfb      	ldrb	r3, [r7, #23]
 800ce46:	2b04      	cmp	r3, #4
 800ce48:	d101      	bne.n	800ce4e <dir_alloc+0x84>
 800ce4a:	2307      	movs	r3, #7
 800ce4c:	75fb      	strb	r3, [r7, #23]
	return res;
 800ce4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	331a      	adds	r3, #26
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fe ffbe 	bl	800bde8 <ld_word>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d109      	bne.n	800ce8c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	3314      	adds	r3, #20
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe ffb3 	bl	800bde8 <ld_word>
 800ce82:	4603      	mov	r3, r0
 800ce84:	041b      	lsls	r3, r3, #16
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	60f8      	str	r0, [r7, #12]
 800ce9e:	60b9      	str	r1, [r7, #8]
 800cea0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	331a      	adds	r3, #26
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	b292      	uxth	r2, r2
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe ffd6 	bl	800be5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d109      	bne.n	800cece <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	f103 0214 	add.w	r2, r3, #20
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	0c1b      	lsrs	r3, r3, #16
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	4619      	mov	r1, r3
 800cec8:	4610      	mov	r0, r2
 800ceca:	f7fe ffc8 	bl	800be5e <st_word>
	}
}
 800cece:	bf00      	nop
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b086      	sub	sp, #24
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cee4:	2100      	movs	r1, #0
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff fe10 	bl	800cb0c <dir_sdi>
 800ceec:	4603      	mov	r3, r0
 800ceee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d001      	beq.n	800cefa <dir_find+0x24>
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	e03e      	b.n	800cf78 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6938      	ldr	r0, [r7, #16]
 800cf02:	f7ff fa21 	bl	800c348 <move_window>
 800cf06:	4603      	mov	r3, r0
 800cf08:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d12f      	bne.n	800cf70 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <dir_find+0x4e>
 800cf1e:	2304      	movs	r3, #4
 800cf20:	75fb      	strb	r3, [r7, #23]
 800cf22:	e028      	b.n	800cf76 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a1b      	ldr	r3, [r3, #32]
 800cf28:	330b      	adds	r3, #11
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	330b      	adds	r3, #11
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	f003 0308 	and.w	r3, r3, #8
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10a      	bne.n	800cf5c <dir_find+0x86>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a18      	ldr	r0, [r3, #32]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3324      	adds	r3, #36	; 0x24
 800cf4e:	220b      	movs	r2, #11
 800cf50:	4619      	mov	r1, r3
 800cf52:	f7ff f807 	bl	800bf64 <mem_cmp>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00b      	beq.n	800cf74 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf5c:	2100      	movs	r1, #0
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff fe5d 	bl	800cc1e <dir_next>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0c5      	beq.n	800cefa <dir_find+0x24>
 800cf6e:	e002      	b.n	800cf76 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cf70:	bf00      	nop
 800cf72:	e000      	b.n	800cf76 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cf74:	bf00      	nop

	return res;
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cf8e:	2101      	movs	r1, #1
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff ff1a 	bl	800cdca <dir_alloc>
 800cf96:	4603      	mov	r3, r0
 800cf98:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cf9a:	7bfb      	ldrb	r3, [r7, #15]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d11c      	bne.n	800cfda <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	68b8      	ldr	r0, [r7, #8]
 800cfa8:	f7ff f9ce 	bl	800c348 <move_window>
 800cfac:	4603      	mov	r3, r0
 800cfae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d111      	bne.n	800cfda <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	2220      	movs	r2, #32
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe ffb5 	bl	800bf2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a18      	ldr	r0, [r3, #32]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3324      	adds	r3, #36	; 0x24
 800cfcc:	220b      	movs	r2, #11
 800cfce:	4619      	mov	r1, r3
 800cfd0:	f7fe ff8c 	bl	800beec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2200      	movs	r2, #0
 800cff2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d04e      	beq.n	800d09a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	613b      	str	r3, [r7, #16]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800d004:	e021      	b.n	800d04a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6a1a      	ldr	r2, [r3, #32]
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	1c59      	adds	r1, r3, #1
 800d00e:	6179      	str	r1, [r7, #20]
 800d010:	4413      	add	r3, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b20      	cmp	r3, #32
 800d01a:	d100      	bne.n	800d01e <get_fileinfo+0x3a>
 800d01c:	e015      	b.n	800d04a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
 800d020:	2b05      	cmp	r3, #5
 800d022:	d101      	bne.n	800d028 <get_fileinfo+0x44>
 800d024:	23e5      	movs	r3, #229	; 0xe5
 800d026:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2b09      	cmp	r3, #9
 800d02c:	d106      	bne.n	800d03c <get_fileinfo+0x58>
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	613a      	str	r2, [r7, #16]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	4413      	add	r3, r2
 800d038:	222e      	movs	r2, #46	; 0x2e
 800d03a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	613a      	str	r2, [r7, #16]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	4413      	add	r3, r2
 800d046:	7bfa      	ldrb	r2, [r7, #15]
 800d048:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2b0a      	cmp	r3, #10
 800d04e:	d9da      	bls.n	800d006 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	4413      	add	r3, r2
 800d056:	3309      	adds	r3, #9
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	7ada      	ldrb	r2, [r3, #11]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	331c      	adds	r3, #28
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fe fed3 	bl	800be18 <ld_dword>
 800d072:	4602      	mov	r2, r0
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6a1b      	ldr	r3, [r3, #32]
 800d07c:	3316      	adds	r3, #22
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe feca 	bl	800be18 <ld_dword>
 800d084:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	b29a      	uxth	r2, r3
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	80da      	strh	r2, [r3, #6]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	0c1b      	lsrs	r3, r3, #16
 800d092:	b29a      	uxth	r2, r3
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	809a      	strh	r2, [r3, #4]
 800d098:	e000      	b.n	800d09c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d09a:	bf00      	nop
}
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	3324      	adds	r3, #36	; 0x24
 800d0b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d0ba:	220b      	movs	r2, #11
 800d0bc:	2120      	movs	r1, #32
 800d0be:	68b8      	ldr	r0, [r7, #8]
 800d0c0:	f7fe ff35 	bl	800bf2e <mem_set>
	si = i = 0; ni = 8;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	613b      	str	r3, [r7, #16]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	61fb      	str	r3, [r7, #28]
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	61fa      	str	r2, [r7, #28]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	4413      	add	r3, r2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0de:	7efb      	ldrb	r3, [r7, #27]
 800d0e0:	2b20      	cmp	r3, #32
 800d0e2:	d94e      	bls.n	800d182 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d0e4:	7efb      	ldrb	r3, [r7, #27]
 800d0e6:	2b2f      	cmp	r3, #47	; 0x2f
 800d0e8:	d006      	beq.n	800d0f8 <create_name+0x54>
 800d0ea:	7efb      	ldrb	r3, [r7, #27]
 800d0ec:	2b5c      	cmp	r3, #92	; 0x5c
 800d0ee:	d110      	bne.n	800d112 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0f0:	e002      	b.n	800d0f8 <create_name+0x54>
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	61fb      	str	r3, [r7, #28]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2b2f      	cmp	r3, #47	; 0x2f
 800d102:	d0f6      	beq.n	800d0f2 <create_name+0x4e>
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	4413      	add	r3, r2
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b5c      	cmp	r3, #92	; 0x5c
 800d10e:	d0f0      	beq.n	800d0f2 <create_name+0x4e>
			break;
 800d110:	e038      	b.n	800d184 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d112:	7efb      	ldrb	r3, [r7, #27]
 800d114:	2b2e      	cmp	r3, #46	; 0x2e
 800d116:	d003      	beq.n	800d120 <create_name+0x7c>
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d30c      	bcc.n	800d13a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2b0b      	cmp	r3, #11
 800d124:	d002      	beq.n	800d12c <create_name+0x88>
 800d126:	7efb      	ldrb	r3, [r7, #27]
 800d128:	2b2e      	cmp	r3, #46	; 0x2e
 800d12a:	d001      	beq.n	800d130 <create_name+0x8c>
 800d12c:	2306      	movs	r3, #6
 800d12e:	e044      	b.n	800d1ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d130:	2308      	movs	r3, #8
 800d132:	613b      	str	r3, [r7, #16]
 800d134:	230b      	movs	r3, #11
 800d136:	617b      	str	r3, [r7, #20]
			continue;
 800d138:	e022      	b.n	800d180 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d13a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da04      	bge.n	800d14c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d142:	7efb      	ldrb	r3, [r7, #27]
 800d144:	3b80      	subs	r3, #128	; 0x80
 800d146:	4a1f      	ldr	r2, [pc, #124]	; (800d1c4 <create_name+0x120>)
 800d148:	5cd3      	ldrb	r3, [r2, r3]
 800d14a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d14c:	7efb      	ldrb	r3, [r7, #27]
 800d14e:	4619      	mov	r1, r3
 800d150:	481d      	ldr	r0, [pc, #116]	; (800d1c8 <create_name+0x124>)
 800d152:	f7fe ff2e 	bl	800bfb2 <chk_chr>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <create_name+0xbc>
 800d15c:	2306      	movs	r3, #6
 800d15e:	e02c      	b.n	800d1ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d160:	7efb      	ldrb	r3, [r7, #27]
 800d162:	2b60      	cmp	r3, #96	; 0x60
 800d164:	d905      	bls.n	800d172 <create_name+0xce>
 800d166:	7efb      	ldrb	r3, [r7, #27]
 800d168:	2b7a      	cmp	r3, #122	; 0x7a
 800d16a:	d802      	bhi.n	800d172 <create_name+0xce>
 800d16c:	7efb      	ldrb	r3, [r7, #27]
 800d16e:	3b20      	subs	r3, #32
 800d170:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	1c5a      	adds	r2, r3, #1
 800d176:	613a      	str	r2, [r7, #16]
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	4413      	add	r3, r2
 800d17c:	7efa      	ldrb	r2, [r7, #27]
 800d17e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d180:	e7a6      	b.n	800d0d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d182:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	441a      	add	r2, r3
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <create_name+0xf4>
 800d194:	2306      	movs	r3, #6
 800d196:	e010      	b.n	800d1ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2be5      	cmp	r3, #229	; 0xe5
 800d19e:	d102      	bne.n	800d1a6 <create_name+0x102>
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	2205      	movs	r2, #5
 800d1a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d1a6:	7efb      	ldrb	r3, [r7, #27]
 800d1a8:	2b20      	cmp	r3, #32
 800d1aa:	d801      	bhi.n	800d1b0 <create_name+0x10c>
 800d1ac:	2204      	movs	r2, #4
 800d1ae:	e000      	b.n	800d1b2 <create_name+0x10e>
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	330b      	adds	r3, #11
 800d1b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d1b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3720      	adds	r7, #32
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0800f05c 	.word	0x0800f05c
 800d1c8:	0800ef9c 	.word	0x0800ef9c

0800d1cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d1e0:	e002      	b.n	800d1e8 <follow_path+0x1c>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	603b      	str	r3, [r7, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b2f      	cmp	r3, #47	; 0x2f
 800d1ee:	d0f8      	beq.n	800d1e2 <follow_path+0x16>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d1f6:	d0f4      	beq.n	800d1e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	2b1f      	cmp	r3, #31
 800d204:	d80a      	bhi.n	800d21c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2280      	movs	r2, #128	; 0x80
 800d20a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d20e:	2100      	movs	r1, #0
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7ff fc7b 	bl	800cb0c <dir_sdi>
 800d216:	4603      	mov	r3, r0
 800d218:	75fb      	strb	r3, [r7, #23]
 800d21a:	e048      	b.n	800d2ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d21c:	463b      	mov	r3, r7
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ff3f 	bl	800d0a4 <create_name>
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d139      	bne.n	800d2a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff fe50 	bl	800ced6 <dir_find>
 800d236:	4603      	mov	r3, r0
 800d238:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d240:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00a      	beq.n	800d25e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d248:	7dfb      	ldrb	r3, [r7, #23]
 800d24a:	2b04      	cmp	r3, #4
 800d24c:	d12c      	bne.n	800d2a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d24e:	7afb      	ldrb	r3, [r7, #11]
 800d250:	f003 0304 	and.w	r3, r3, #4
 800d254:	2b00      	cmp	r3, #0
 800d256:	d127      	bne.n	800d2a8 <follow_path+0xdc>
 800d258:	2305      	movs	r3, #5
 800d25a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d25c:	e024      	b.n	800d2a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d25e:	7afb      	ldrb	r3, [r7, #11]
 800d260:	f003 0304 	and.w	r3, r3, #4
 800d264:	2b00      	cmp	r3, #0
 800d266:	d121      	bne.n	800d2ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	799b      	ldrb	r3, [r3, #6]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b00      	cmp	r3, #0
 800d272:	d102      	bne.n	800d27a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d274:	2305      	movs	r3, #5
 800d276:	75fb      	strb	r3, [r7, #23]
 800d278:	e019      	b.n	800d2ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	68fa      	ldr	r2, [r7, #12]
 800d286:	8992      	ldrh	r2, [r2, #12]
 800d288:	fbb3 f0f2 	udiv	r0, r3, r2
 800d28c:	fb00 f202 	mul.w	r2, r0, r2
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	440b      	add	r3, r1
 800d294:	4619      	mov	r1, r3
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7ff fdde 	bl	800ce58 <ld_clust>
 800d29c:	4602      	mov	r2, r0
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2a2:	e7bb      	b.n	800d21c <follow_path+0x50>
			if (res != FR_OK) break;
 800d2a4:	bf00      	nop
 800d2a6:	e002      	b.n	800d2ae <follow_path+0xe2>
				break;
 800d2a8:	bf00      	nop
 800d2aa:	e000      	b.n	800d2ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2ac:	bf00      	nop
			}
		}
	}

	return res;
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d031      	beq.n	800d332 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	e002      	b.n	800d2dc <get_ldnumber+0x24>
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b20      	cmp	r3, #32
 800d2e2:	d903      	bls.n	800d2ec <get_ldnumber+0x34>
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b3a      	cmp	r3, #58	; 0x3a
 800d2ea:	d1f4      	bne.n	800d2d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	781b      	ldrb	r3, [r3, #0]
 800d2f0:	2b3a      	cmp	r3, #58	; 0x3a
 800d2f2:	d11c      	bne.n	800d32e <get_ldnumber+0x76>
			tp = *path;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	1c5a      	adds	r2, r3, #1
 800d2fe:	60fa      	str	r2, [r7, #12]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	3b30      	subs	r3, #48	; 0x30
 800d304:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b09      	cmp	r3, #9
 800d30a:	d80e      	bhi.n	800d32a <get_ldnumber+0x72>
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	429a      	cmp	r2, r3
 800d312:	d10a      	bne.n	800d32a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d107      	bne.n	800d32a <get_ldnumber+0x72>
					vol = (int)i;
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	3301      	adds	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	e002      	b.n	800d334 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d32e:	2300      	movs	r3, #0
 800d330:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d332:	693b      	ldr	r3, [r7, #16]
}
 800d334:	4618      	mov	r0, r3
 800d336:	371c      	adds	r7, #28
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	70da      	strb	r2, [r3, #3]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f04f 32ff 	mov.w	r2, #4294967295
 800d356:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d358:	6839      	ldr	r1, [r7, #0]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7fe fff4 	bl	800c348 <move_window>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <check_fs+0x2a>
 800d366:	2304      	movs	r3, #4
 800d368:	e038      	b.n	800d3dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3334      	adds	r3, #52	; 0x34
 800d36e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d372:	4618      	mov	r0, r3
 800d374:	f7fe fd38 	bl	800bde8 <ld_word>
 800d378:	4603      	mov	r3, r0
 800d37a:	461a      	mov	r2, r3
 800d37c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d380:	429a      	cmp	r2, r3
 800d382:	d001      	beq.n	800d388 <check_fs+0x48>
 800d384:	2303      	movs	r3, #3
 800d386:	e029      	b.n	800d3dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d38e:	2be9      	cmp	r3, #233	; 0xe9
 800d390:	d009      	beq.n	800d3a6 <check_fs+0x66>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d398:	2beb      	cmp	r3, #235	; 0xeb
 800d39a:	d11e      	bne.n	800d3da <check_fs+0x9a>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d3a2:	2b90      	cmp	r3, #144	; 0x90
 800d3a4:	d119      	bne.n	800d3da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3334      	adds	r3, #52	; 0x34
 800d3aa:	3336      	adds	r3, #54	; 0x36
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe fd33 	bl	800be18 <ld_dword>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d3b8:	4a0a      	ldr	r2, [pc, #40]	; (800d3e4 <check_fs+0xa4>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d101      	bne.n	800d3c2 <check_fs+0x82>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e00c      	b.n	800d3dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3334      	adds	r3, #52	; 0x34
 800d3c6:	3352      	adds	r3, #82	; 0x52
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fd25 	bl	800be18 <ld_dword>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	4a05      	ldr	r2, [pc, #20]	; (800d3e8 <check_fs+0xa8>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d101      	bne.n	800d3da <check_fs+0x9a>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e000      	b.n	800d3dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d3da:	2302      	movs	r3, #2
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	00544146 	.word	0x00544146
 800d3e8:	33544146 	.word	0x33544146

0800d3ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b096      	sub	sp, #88	; 0x58
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7ff ff59 	bl	800d2b8 <get_ldnumber>
 800d406:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	da01      	bge.n	800d412 <find_volume+0x26>
 800d40e:	230b      	movs	r3, #11
 800d410:	e262      	b.n	800d8d8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d412:	4a9f      	ldr	r2, [pc, #636]	; (800d690 <find_volume+0x2a4>)
 800d414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d41a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d101      	bne.n	800d426 <find_volume+0x3a>
 800d422:	230c      	movs	r3, #12
 800d424:	e258      	b.n	800d8d8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d42a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	f023 0301 	bic.w	r3, r3, #1
 800d432:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01a      	beq.n	800d472 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	785b      	ldrb	r3, [r3, #1]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe fc33 	bl	800bcac <disk_status>
 800d446:	4603      	mov	r3, r0
 800d448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d44c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <find_volume+0x82>
 800d45e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d462:	f003 0304 	and.w	r3, r3, #4
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d46a:	230a      	movs	r3, #10
 800d46c:	e234      	b.n	800d8d8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800d46e:	2300      	movs	r3, #0
 800d470:	e232      	b.n	800d8d8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	2200      	movs	r2, #0
 800d476:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d47a:	b2da      	uxtb	r2, r3
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	785b      	ldrb	r3, [r3, #1]
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fc2b 	bl	800bce0 <disk_initialize>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d49c:	2303      	movs	r3, #3
 800d49e:	e21b      	b.n	800d8d8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <find_volume+0xca>
 800d4a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d4b2:	230a      	movs	r3, #10
 800d4b4:	e210      	b.n	800d8d8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	7858      	ldrb	r0, [r3, #1]
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	330c      	adds	r3, #12
 800d4be:	461a      	mov	r2, r3
 800d4c0:	2102      	movs	r1, #2
 800d4c2:	f7fe fc73 	bl	800bdac <disk_ioctl>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <find_volume+0xe4>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e203      	b.n	800d8d8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	899b      	ldrh	r3, [r3, #12]
 800d4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4d8:	d80d      	bhi.n	800d4f6 <find_volume+0x10a>
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	899b      	ldrh	r3, [r3, #12]
 800d4de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4e2:	d308      	bcc.n	800d4f6 <find_volume+0x10a>
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e6:	899b      	ldrh	r3, [r3, #12]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	899b      	ldrh	r3, [r3, #12]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <find_volume+0x10e>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e1ee      	b.n	800d8d8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d4fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d502:	f7ff ff1d 	bl	800d340 <check_fs>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d50c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d510:	2b02      	cmp	r3, #2
 800d512:	d149      	bne.n	800d5a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d514:	2300      	movs	r3, #0
 800d516:	643b      	str	r3, [r7, #64]	; 0x40
 800d518:	e01e      	b.n	800d558 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d522:	011b      	lsls	r3, r3, #4
 800d524:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d528:	4413      	add	r3, r2
 800d52a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52e:	3304      	adds	r3, #4
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d006      	beq.n	800d544 <find_volume+0x158>
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	3308      	adds	r3, #8
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fc6c 	bl	800be18 <ld_dword>
 800d540:	4602      	mov	r2, r0
 800d542:	e000      	b.n	800d546 <find_volume+0x15a>
 800d544:	2200      	movs	r2, #0
 800d546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	3358      	adds	r3, #88	; 0x58
 800d54c:	443b      	add	r3, r7
 800d54e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d554:	3301      	adds	r3, #1
 800d556:	643b      	str	r3, [r7, #64]	; 0x40
 800d558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d9dd      	bls.n	800d51a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d55e:	2300      	movs	r3, #0
 800d560:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <find_volume+0x182>
 800d568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56a:	3b01      	subs	r3, #1
 800d56c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	3358      	adds	r3, #88	; 0x58
 800d574:	443b      	add	r3, r7
 800d576:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d57a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d005      	beq.n	800d58e <find_volume+0x1a2>
 800d582:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d586:	f7ff fedb 	bl	800d340 <check_fs>
 800d58a:	4603      	mov	r3, r0
 800d58c:	e000      	b.n	800d590 <find_volume+0x1a4>
 800d58e:	2303      	movs	r3, #3
 800d590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d905      	bls.n	800d5a8 <find_volume+0x1bc>
 800d59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59e:	3301      	adds	r3, #1
 800d5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800d5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d9e2      	bls.n	800d56e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d101      	bne.n	800d5b4 <find_volume+0x1c8>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e191      	b.n	800d8d8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d901      	bls.n	800d5c0 <find_volume+0x1d4>
 800d5bc:	230d      	movs	r3, #13
 800d5be:	e18b      	b.n	800d8d8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c2:	3334      	adds	r3, #52	; 0x34
 800d5c4:	330b      	adds	r3, #11
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fc0e 	bl	800bde8 <ld_word>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	899b      	ldrh	r3, [r3, #12]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d001      	beq.n	800d5dc <find_volume+0x1f0>
 800d5d8:	230d      	movs	r3, #13
 800d5da:	e17d      	b.n	800d8d8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	3334      	adds	r3, #52	; 0x34
 800d5e0:	3316      	adds	r3, #22
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fc00 	bl	800bde8 <ld_word>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d106      	bne.n	800d600 <find_volume+0x214>
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	3334      	adds	r3, #52	; 0x34
 800d5f6:	3324      	adds	r3, #36	; 0x24
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fc0d 	bl	800be18 <ld_dword>
 800d5fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d604:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d608:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	789b      	ldrb	r3, [r3, #2]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d005      	beq.n	800d624 <find_volume+0x238>
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	789b      	ldrb	r3, [r3, #2]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d001      	beq.n	800d624 <find_volume+0x238>
 800d620:	230d      	movs	r3, #13
 800d622:	e159      	b.n	800d8d8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	789b      	ldrb	r3, [r3, #2]
 800d628:	461a      	mov	r2, r3
 800d62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62c:	fb02 f303 	mul.w	r3, r2, r3
 800d630:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d638:	b29a      	uxth	r2, r3
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	895b      	ldrh	r3, [r3, #10]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d008      	beq.n	800d658 <find_volume+0x26c>
 800d646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d648:	895b      	ldrh	r3, [r3, #10]
 800d64a:	461a      	mov	r2, r3
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	895b      	ldrh	r3, [r3, #10]
 800d650:	3b01      	subs	r3, #1
 800d652:	4013      	ands	r3, r2
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <find_volume+0x270>
 800d658:	230d      	movs	r3, #13
 800d65a:	e13d      	b.n	800d8d8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65e:	3334      	adds	r3, #52	; 0x34
 800d660:	3311      	adds	r3, #17
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fbc0 	bl	800bde8 <ld_word>
 800d668:	4603      	mov	r3, r0
 800d66a:	461a      	mov	r2, r3
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d672:	891b      	ldrh	r3, [r3, #8]
 800d674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d676:	8992      	ldrh	r2, [r2, #12]
 800d678:	0952      	lsrs	r2, r2, #5
 800d67a:	b292      	uxth	r2, r2
 800d67c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d680:	fb01 f202 	mul.w	r2, r1, r2
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	b29b      	uxth	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <find_volume+0x2a8>
 800d68c:	230d      	movs	r3, #13
 800d68e:	e123      	b.n	800d8d8 <find_volume+0x4ec>
 800d690:	20002404 	.word	0x20002404

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d696:	3334      	adds	r3, #52	; 0x34
 800d698:	3313      	adds	r3, #19
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe fba4 	bl	800bde8 <ld_word>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d106      	bne.n	800d6b8 <find_volume+0x2cc>
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ac:	3334      	adds	r3, #52	; 0x34
 800d6ae:	3320      	adds	r3, #32
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fbb1 	bl	800be18 <ld_dword>
 800d6b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	3334      	adds	r3, #52	; 0x34
 800d6bc:	330e      	adds	r3, #14
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fb92 	bl	800bde8 <ld_word>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d6c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d101      	bne.n	800d6d2 <find_volume+0x2e6>
 800d6ce:	230d      	movs	r3, #13
 800d6d0:	e102      	b.n	800d8d8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d6d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d6:	4413      	add	r3, r2
 800d6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6da:	8911      	ldrh	r1, [r2, #8]
 800d6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6de:	8992      	ldrh	r2, [r2, #12]
 800d6e0:	0952      	lsrs	r2, r2, #5
 800d6e2:	b292      	uxth	r2, r2
 800d6e4:	fbb1 f2f2 	udiv	r2, r1, r2
 800d6e8:	b292      	uxth	r2, r2
 800d6ea:	4413      	add	r3, r2
 800d6ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d201      	bcs.n	800d6fa <find_volume+0x30e>
 800d6f6:	230d      	movs	r3, #13
 800d6f8:	e0ee      	b.n	800d8d8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d6fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fe:	1ad3      	subs	r3, r2, r3
 800d700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d702:	8952      	ldrh	r2, [r2, #10]
 800d704:	fbb3 f3f2 	udiv	r3, r3, r2
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <find_volume+0x328>
 800d710:	230d      	movs	r3, #13
 800d712:	e0e1      	b.n	800d8d8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800d714:	2303      	movs	r3, #3
 800d716:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d720:	4293      	cmp	r3, r2
 800d722:	d802      	bhi.n	800d72a <find_volume+0x33e>
 800d724:	2302      	movs	r3, #2
 800d726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d730:	4293      	cmp	r3, r2
 800d732:	d802      	bhi.n	800d73a <find_volume+0x34e>
 800d734:	2301      	movs	r3, #1
 800d736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	1c9a      	adds	r2, r3, #2
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d746:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d748:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d74c:	441a      	add	r2, r3
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d756:	441a      	add	r2, r3
 800d758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d760:	2b03      	cmp	r3, #3
 800d762:	d11e      	bne.n	800d7a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	3334      	adds	r3, #52	; 0x34
 800d768:	332a      	adds	r3, #42	; 0x2a
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe fb3c 	bl	800bde8 <ld_word>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d001      	beq.n	800d77a <find_volume+0x38e>
 800d776:	230d      	movs	r3, #13
 800d778:	e0ae      	b.n	800d8d8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77c:	891b      	ldrh	r3, [r3, #8]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <find_volume+0x39a>
 800d782:	230d      	movs	r3, #13
 800d784:	e0a8      	b.n	800d8d8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	3334      	adds	r3, #52	; 0x34
 800d78a:	332c      	adds	r3, #44	; 0x2c
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fb43 	bl	800be18 <ld_dword>
 800d792:	4602      	mov	r2, r0
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	647b      	str	r3, [r7, #68]	; 0x44
 800d7a0:	e01f      	b.n	800d7e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	891b      	ldrh	r3, [r3, #8]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d101      	bne.n	800d7ae <find_volume+0x3c2>
 800d7aa:	230d      	movs	r3, #13
 800d7ac:	e094      	b.n	800d8d8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b4:	441a      	add	r2, r3
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d103      	bne.n	800d7ca <find_volume+0x3de>
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	e00a      	b.n	800d7e0 <find_volume+0x3f4>
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7cc:	699a      	ldr	r2, [r3, #24]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	085a      	lsrs	r2, r3, #1
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d7e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	69da      	ldr	r2, [r3, #28]
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	899b      	ldrh	r3, [r3, #12]
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ee:	440b      	add	r3, r1
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7f4:	8989      	ldrh	r1, [r1, #12]
 800d7f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d201      	bcs.n	800d802 <find_volume+0x416>
 800d7fe:	230d      	movs	r3, #13
 800d800:	e06a      	b.n	800d8d8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	f04f 32ff 	mov.w	r2, #4294967295
 800d808:	615a      	str	r2, [r3, #20]
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	695a      	ldr	r2, [r3, #20]
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d814:	2280      	movs	r2, #128	; 0x80
 800d816:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d149      	bne.n	800d8b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d822:	3334      	adds	r3, #52	; 0x34
 800d824:	3330      	adds	r3, #48	; 0x30
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe fade 	bl	800bde8 <ld_word>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d140      	bne.n	800d8b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d834:	3301      	adds	r3, #1
 800d836:	4619      	mov	r1, r3
 800d838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d83a:	f7fe fd85 	bl	800c348 <move_window>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d137      	bne.n	800d8b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	2200      	movs	r2, #0
 800d848:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84c:	3334      	adds	r3, #52	; 0x34
 800d84e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fac8 	bl	800bde8 <ld_word>
 800d858:	4603      	mov	r3, r0
 800d85a:	461a      	mov	r2, r3
 800d85c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d860:	429a      	cmp	r2, r3
 800d862:	d127      	bne.n	800d8b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	3334      	adds	r3, #52	; 0x34
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fe fad5 	bl	800be18 <ld_dword>
 800d86e:	4603      	mov	r3, r0
 800d870:	4a1b      	ldr	r2, [pc, #108]	; (800d8e0 <find_volume+0x4f4>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d11e      	bne.n	800d8b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d878:	3334      	adds	r3, #52	; 0x34
 800d87a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe faca 	bl	800be18 <ld_dword>
 800d884:	4603      	mov	r3, r0
 800d886:	4a17      	ldr	r2, [pc, #92]	; (800d8e4 <find_volume+0x4f8>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d113      	bne.n	800d8b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88e:	3334      	adds	r3, #52	; 0x34
 800d890:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d894:	4618      	mov	r0, r3
 800d896:	f7fe fabf 	bl	800be18 <ld_dword>
 800d89a:	4602      	mov	r2, r0
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	3334      	adds	r3, #52	; 0x34
 800d8a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe fab5 	bl	800be18 <ld_dword>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d8ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <find_volume+0x4fc>)
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	4b08      	ldr	r3, [pc, #32]	; (800d8e8 <find_volume+0x4fc>)
 800d8c6:	801a      	strh	r2, [r3, #0]
 800d8c8:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <find_volume+0x4fc>)
 800d8ca:	881a      	ldrh	r2, [r3, #0]
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8d2:	f7fe fcd1 	bl	800c278 <clear_lock>
#endif
	return FR_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3758      	adds	r7, #88	; 0x58
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	41615252 	.word	0x41615252
 800d8e4:	61417272 	.word	0x61417272
 800d8e8:	20002408 	.word	0x20002408

0800d8ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d8f6:	2309      	movs	r3, #9
 800d8f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d01c      	beq.n	800d93a <validate+0x4e>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d018      	beq.n	800d93a <validate+0x4e>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d013      	beq.n	800d93a <validate+0x4e>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	889a      	ldrh	r2, [r3, #4]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	88db      	ldrh	r3, [r3, #6]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d10c      	bne.n	800d93a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe f9c0 	bl	800bcac <disk_status>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <validate+0x4e>
			res = FR_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d93a:	7bfb      	ldrb	r3, [r7, #15]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d102      	bne.n	800d946 <validate+0x5a>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	e000      	b.n	800d948 <validate+0x5c>
 800d946:	2300      	movs	r3, #0
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	6013      	str	r3, [r2, #0]
	return res;
 800d94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
	...

0800d958 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b088      	sub	sp, #32
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d96a:	f107 0310 	add.w	r3, r7, #16
 800d96e:	4618      	mov	r0, r3
 800d970:	f7ff fca2 	bl	800d2b8 <get_ldnumber>
 800d974:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	da01      	bge.n	800d980 <f_mount+0x28>
 800d97c:	230b      	movs	r3, #11
 800d97e:	e02b      	b.n	800d9d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d980:	4a17      	ldr	r2, [pc, #92]	; (800d9e0 <f_mount+0x88>)
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d988:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d005      	beq.n	800d99c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d990:	69b8      	ldr	r0, [r7, #24]
 800d992:	f7fe fc71 	bl	800c278 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	2200      	movs	r2, #0
 800d99a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	490d      	ldr	r1, [pc, #52]	; (800d9e0 <f_mount+0x88>)
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <f_mount+0x66>
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d001      	beq.n	800d9c2 <f_mount+0x6a>
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e00a      	b.n	800d9d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d9c2:	f107 010c 	add.w	r1, r7, #12
 800d9c6:	f107 0308 	add.w	r3, r7, #8
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7ff fd0d 	bl	800d3ec <find_volume>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3720      	adds	r7, #32
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	20002404 	.word	0x20002404

0800d9e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b098      	sub	sp, #96	; 0x60
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <f_open+0x18>
 800d9f8:	2309      	movs	r3, #9
 800d9fa:	e1bb      	b.n	800dd74 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da04:	79fa      	ldrb	r2, [r7, #7]
 800da06:	f107 0110 	add.w	r1, r7, #16
 800da0a:	f107 0308 	add.w	r3, r7, #8
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fcec 	bl	800d3ec <find_volume>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800da1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f040 819f 	bne.w	800dd62 <f_open+0x37e>
		dj.obj.fs = fs;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	f107 0314 	add.w	r3, r7, #20
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fbcb 	bl	800d1cc <follow_path>
 800da36:	4603      	mov	r3, r0
 800da38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da40:	2b00      	cmp	r3, #0
 800da42:	d11a      	bne.n	800da7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800da44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da48:	b25b      	sxtb	r3, r3
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	da03      	bge.n	800da56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800da4e:	2306      	movs	r3, #6
 800da50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da54:	e011      	b.n	800da7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	f023 0301 	bic.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	bf14      	ite	ne
 800da60:	2301      	movne	r3, #1
 800da62:	2300      	moveq	r3, #0
 800da64:	b2db      	uxtb	r3, r3
 800da66:	461a      	mov	r2, r3
 800da68:	f107 0314 	add.w	r3, r7, #20
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fe faba 	bl	800bfe8 <chk_lock>
 800da74:	4603      	mov	r3, r0
 800da76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	f003 031c 	and.w	r3, r3, #28
 800da80:	2b00      	cmp	r3, #0
 800da82:	d07f      	beq.n	800db84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800da84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d017      	beq.n	800dabc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da90:	2b04      	cmp	r3, #4
 800da92:	d10e      	bne.n	800dab2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da94:	f7fe fb04 	bl	800c0a0 <enq_lock>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d006      	beq.n	800daac <f_open+0xc8>
 800da9e:	f107 0314 	add.w	r3, r7, #20
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff fa6c 	bl	800cf80 <dir_register>
 800daa8:	4603      	mov	r3, r0
 800daaa:	e000      	b.n	800daae <f_open+0xca>
 800daac:	2312      	movs	r3, #18
 800daae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dab2:	79fb      	ldrb	r3, [r7, #7]
 800dab4:	f043 0308 	orr.w	r3, r3, #8
 800dab8:	71fb      	strb	r3, [r7, #7]
 800daba:	e010      	b.n	800dade <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dabc:	7ebb      	ldrb	r3, [r7, #26]
 800dabe:	f003 0311 	and.w	r3, r3, #17
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d003      	beq.n	800dace <f_open+0xea>
					res = FR_DENIED;
 800dac6:	2307      	movs	r3, #7
 800dac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dacc:	e007      	b.n	800dade <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <f_open+0xfa>
 800dad8:	2308      	movs	r3, #8
 800dada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d168      	bne.n	800dbb8 <f_open+0x1d4>
 800dae6:	79fb      	ldrb	r3, [r7, #7]
 800dae8:	f003 0308 	and.w	r3, r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	d063      	beq.n	800dbb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800daf0:	f7fb ff16 	bl	8009920 <get_fattime>
 800daf4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800daf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf8:	330e      	adds	r3, #14
 800dafa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe f9c9 	bl	800be94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	3316      	adds	r3, #22
 800db06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe f9c3 	bl	800be94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db10:	330b      	adds	r3, #11
 800db12:	2220      	movs	r2, #32
 800db14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff f99b 	bl	800ce58 <ld_clust>
 800db22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db28:	2200      	movs	r2, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff f9b3 	bl	800ce96 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db32:	331c      	adds	r3, #28
 800db34:	2100      	movs	r1, #0
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe f9ac 	bl	800be94 <st_dword>
					fs->wflag = 1;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2201      	movs	r2, #1
 800db40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db44:	2b00      	cmp	r3, #0
 800db46:	d037      	beq.n	800dbb8 <f_open+0x1d4>
						dw = fs->winsect;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800db4e:	f107 0314 	add.w	r3, r7, #20
 800db52:	2200      	movs	r2, #0
 800db54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db56:	4618      	mov	r0, r3
 800db58:	f7fe fea3 	bl	800c8a2 <remove_chain>
 800db5c:	4603      	mov	r3, r0
 800db5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800db62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db66:	2b00      	cmp	r3, #0
 800db68:	d126      	bne.n	800dbb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fbea 	bl	800c348 <move_window>
 800db74:	4603      	mov	r3, r0
 800db76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db7e:	3a01      	subs	r2, #1
 800db80:	611a      	str	r2, [r3, #16]
 800db82:	e019      	b.n	800dbb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d115      	bne.n	800dbb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db8c:	7ebb      	ldrb	r3, [r7, #26]
 800db8e:	f003 0310 	and.w	r3, r3, #16
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <f_open+0x1ba>
					res = FR_NO_FILE;
 800db96:	2304      	movs	r3, #4
 800db98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db9c:	e00c      	b.n	800dbb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	f003 0302 	and.w	r3, r3, #2
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d007      	beq.n	800dbb8 <f_open+0x1d4>
 800dba8:	7ebb      	ldrb	r3, [r7, #26]
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d002      	beq.n	800dbb8 <f_open+0x1d4>
						res = FR_DENIED;
 800dbb2:	2307      	movs	r3, #7
 800dbb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d128      	bne.n	800dc12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	f003 0308 	and.w	r3, r3, #8
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dbda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	f023 0301 	bic.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bf14      	ite	ne
 800dbea:	2301      	movne	r3, #1
 800dbec:	2300      	moveq	r3, #0
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f107 0314 	add.w	r3, r7, #20
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fa73 	bl	800c0e4 <inc_lock>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d102      	bne.n	800dc12 <f_open+0x22e>
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f040 80a3 	bne.w	800dd62 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc20:	4611      	mov	r1, r2
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff f918 	bl	800ce58 <ld_clust>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc30:	331c      	adds	r3, #28
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe f8f0 	bl	800be18 <ld_dword>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	88da      	ldrh	r2, [r3, #6]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	79fa      	ldrb	r2, [r7, #7]
 800dc56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2200      	movs	r2, #0
 800dc62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3330      	adds	r3, #48	; 0x30
 800dc6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc72:	2100      	movs	r1, #0
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe f95a 	bl	800bf2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	f003 0320 	and.w	r3, r3, #32
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d06e      	beq.n	800dd62 <f_open+0x37e>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d06a      	beq.n	800dd62 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68da      	ldr	r2, [r3, #12]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	895b      	ldrh	r3, [r3, #10]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	899b      	ldrh	r3, [r3, #12]
 800dc9e:	fb02 f303 	mul.w	r3, r2, r3
 800dca2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	657b      	str	r3, [r7, #84]	; 0x54
 800dcb0:	e016      	b.n	800dce0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fe fc03 	bl	800c4c2 <get_fat>
 800dcbc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dcbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d802      	bhi.n	800dcca <f_open+0x2e6>
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dcca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d102      	bne.n	800dcd8 <f_open+0x2f4>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	657b      	str	r3, [r7, #84]	; 0x54
 800dce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d103      	bne.n	800dcf0 <f_open+0x30c>
 800dce8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d8e0      	bhi.n	800dcb2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcf4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dcf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d131      	bne.n	800dd62 <f_open+0x37e>
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	899b      	ldrh	r3, [r3, #12]
 800dd02:	461a      	mov	r2, r3
 800dd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd06:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd0a:	fb01 f202 	mul.w	r2, r1, r2
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d026      	beq.n	800dd62 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe fbb3 	bl	800c484 <clust2sect>
 800dd1e:	6478      	str	r0, [r7, #68]	; 0x44
 800dd20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d103      	bne.n	800dd2e <f_open+0x34a>
						res = FR_INT_ERR;
 800dd26:	2302      	movs	r3, #2
 800dd28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd2c:	e019      	b.n	800dd62 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	899b      	ldrh	r3, [r3, #12]
 800dd32:	461a      	mov	r2, r3
 800dd34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd36:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	7858      	ldrb	r0, [r3, #1]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6a1a      	ldr	r2, [r3, #32]
 800dd50:	2301      	movs	r3, #1
 800dd52:	f7fd ffeb 	bl	800bd2c <disk_read>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <f_open+0x37e>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <f_open+0x38c>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3760      	adds	r7, #96	; 0x60
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b08c      	sub	sp, #48	; 0x30
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2200      	movs	r2, #0
 800dd92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f107 0210 	add.w	r2, r7, #16
 800dd9a:	4611      	mov	r1, r2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fda5 	bl	800d8ec <validate>
 800dda2:	4603      	mov	r3, r0
 800dda4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dda8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d107      	bne.n	800ddc0 <f_write+0x44>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	7d5b      	ldrb	r3, [r3, #21]
 800ddb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ddb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <f_write+0x4a>
 800ddc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddc4:	e16a      	b.n	800e09c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	7d1b      	ldrb	r3, [r3, #20]
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <f_write+0x5a>
 800ddd2:	2307      	movs	r3, #7
 800ddd4:	e162      	b.n	800e09c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	699a      	ldr	r2, [r3, #24]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	441a      	add	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	f080 814c 	bcs.w	800e080 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	43db      	mvns	r3, r3
 800ddee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ddf0:	e146      	b.n	800e080 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	8992      	ldrh	r2, [r2, #12]
 800ddfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddfe:	fb01 f202 	mul.w	r2, r1, r2
 800de02:	1a9b      	subs	r3, r3, r2
 800de04:	2b00      	cmp	r3, #0
 800de06:	f040 80f1 	bne.w	800dfec <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	8992      	ldrh	r2, [r2, #12]
 800de12:	fbb3 f3f2 	udiv	r3, r3, r2
 800de16:	693a      	ldr	r2, [r7, #16]
 800de18:	8952      	ldrh	r2, [r2, #10]
 800de1a:	3a01      	subs	r2, #1
 800de1c:	4013      	ands	r3, r2
 800de1e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d143      	bne.n	800deae <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10c      	bne.n	800de48 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	2b00      	cmp	r3, #0
 800de38:	d11a      	bne.n	800de70 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2100      	movs	r1, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fd94 	bl	800c96c <create_chain>
 800de44:	62b8      	str	r0, [r7, #40]	; 0x28
 800de46:	e013      	b.n	800de70 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d007      	beq.n	800de60 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	4619      	mov	r1, r3
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7fe fe20 	bl	800ca9c <clmt_clust>
 800de5c:	62b8      	str	r0, [r7, #40]	; 0x28
 800de5e:	e007      	b.n	800de70 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	69db      	ldr	r3, [r3, #28]
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f7fe fd7f 	bl	800c96c <create_chain>
 800de6e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 8109 	beq.w	800e08a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d104      	bne.n	800de88 <f_write+0x10c>
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2202      	movs	r2, #2
 800de82:	755a      	strb	r2, [r3, #21]
 800de84:	2302      	movs	r3, #2
 800de86:	e109      	b.n	800e09c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8e:	d104      	bne.n	800de9a <f_write+0x11e>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2201      	movs	r2, #1
 800de94:	755a      	strb	r2, [r3, #21]
 800de96:	2301      	movs	r3, #1
 800de98:	e100      	b.n	800e09c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de9e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d102      	bne.n	800deae <f_write+0x132>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800deac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	7d1b      	ldrb	r3, [r3, #20]
 800deb2:	b25b      	sxtb	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	da18      	bge.n	800deea <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	7858      	ldrb	r0, [r3, #1]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6a1a      	ldr	r2, [r3, #32]
 800dec6:	2301      	movs	r3, #1
 800dec8:	f7fd ff50 	bl	800bd6c <disk_write>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d004      	beq.n	800dedc <f_write+0x160>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2201      	movs	r2, #1
 800ded6:	755a      	strb	r2, [r3, #21]
 800ded8:	2301      	movs	r3, #1
 800deda:	e0df      	b.n	800e09c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800deea:	693a      	ldr	r2, [r7, #16]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	4619      	mov	r1, r3
 800def2:	4610      	mov	r0, r2
 800def4:	f7fe fac6 	bl	800c484 <clust2sect>
 800def8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d104      	bne.n	800df0a <f_write+0x18e>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2202      	movs	r2, #2
 800df04:	755a      	strb	r2, [r3, #21]
 800df06:	2302      	movs	r3, #2
 800df08:	e0c8      	b.n	800e09c <f_write+0x320>
			sect += csect;
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	4413      	add	r3, r2
 800df10:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	899b      	ldrh	r3, [r3, #12]
 800df16:	461a      	mov	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df1e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d043      	beq.n	800dfae <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df26:	69ba      	ldr	r2, [r7, #24]
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	4413      	add	r3, r2
 800df2c:	693a      	ldr	r2, [r7, #16]
 800df2e:	8952      	ldrh	r2, [r2, #10]
 800df30:	4293      	cmp	r3, r2
 800df32:	d905      	bls.n	800df40 <f_write+0x1c4>
					cc = fs->csize - csect;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	895b      	ldrh	r3, [r3, #10]
 800df38:	461a      	mov	r2, r3
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	7858      	ldrb	r0, [r3, #1]
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	69f9      	ldr	r1, [r7, #28]
 800df4a:	f7fd ff0f 	bl	800bd6c <disk_write>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d004      	beq.n	800df5e <f_write+0x1e2>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2201      	movs	r2, #1
 800df58:	755a      	strb	r2, [r3, #21]
 800df5a:	2301      	movs	r3, #1
 800df5c:	e09e      	b.n	800e09c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6a1a      	ldr	r2, [r3, #32]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	6a3a      	ldr	r2, [r7, #32]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d918      	bls.n	800df9e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6a1a      	ldr	r2, [r3, #32]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	8992      	ldrh	r2, [r2, #12]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	69fa      	ldr	r2, [r7, #28]
 800df84:	18d1      	adds	r1, r2, r3
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	899b      	ldrh	r3, [r3, #12]
 800df8a:	461a      	mov	r2, r3
 800df8c:	f7fd ffae 	bl	800beec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	899b      	ldrh	r3, [r3, #12]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	fb02 f303 	mul.w	r3, r2, r3
 800dfaa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dfac:	e04b      	b.n	800e046 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d016      	beq.n	800dfe6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	699a      	ldr	r2, [r3, #24]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d210      	bcs.n	800dfe6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	7858      	ldrb	r0, [r3, #1]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfce:	2301      	movs	r3, #1
 800dfd0:	697a      	ldr	r2, [r7, #20]
 800dfd2:	f7fd feab 	bl	800bd2c <disk_read>
 800dfd6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d004      	beq.n	800dfe6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	755a      	strb	r2, [r3, #21]
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e05a      	b.n	800e09c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	697a      	ldr	r2, [r7, #20]
 800dfea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	899b      	ldrh	r3, [r3, #12]
 800dff0:	4618      	mov	r0, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	699b      	ldr	r3, [r3, #24]
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	8992      	ldrh	r2, [r2, #12]
 800dffa:	fbb3 f1f2 	udiv	r1, r3, r2
 800dffe:	fb01 f202 	mul.w	r2, r1, r2
 800e002:	1a9b      	subs	r3, r3, r2
 800e004:	1ac3      	subs	r3, r0, r3
 800e006:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d901      	bls.n	800e014 <f_write+0x298>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	8992      	ldrh	r2, [r2, #12]
 800e022:	fbb3 f0f2 	udiv	r0, r3, r2
 800e026:	fb00 f202 	mul.w	r2, r0, r2
 800e02a:	1a9b      	subs	r3, r3, r2
 800e02c:	440b      	add	r3, r1
 800e02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e030:	69f9      	ldr	r1, [r7, #28]
 800e032:	4618      	mov	r0, r3
 800e034:	f7fd ff5a 	bl	800beec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e040:	b2da      	uxtb	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e046:	69fa      	ldr	r2, [r7, #28]
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	4413      	add	r3, r2
 800e04c:	61fb      	str	r3, [r7, #28]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	699a      	ldr	r2, [r3, #24]
 800e052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e054:	441a      	add	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	619a      	str	r2, [r3, #24]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	68da      	ldr	r2, [r3, #12]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	429a      	cmp	r2, r3
 800e064:	bf38      	it	cc
 800e066:	461a      	movcc	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	60da      	str	r2, [r3, #12]
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681a      	ldr	r2, [r3, #0]
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	441a      	add	r2, r3
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	601a      	str	r2, [r3, #0]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	f47f aeb5 	bne.w	800ddf2 <f_write+0x76>
 800e088:	e000      	b.n	800e08c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e08a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
 800e090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e094:	b2da      	uxtb	r2, r3
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3730      	adds	r7, #48	; 0x30
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f107 0208 	add.w	r2, r7, #8
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7ff fc19 	bl	800d8ec <validate>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d168      	bne.n	800e196 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d062      	beq.n	800e196 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	7d1b      	ldrb	r3, [r3, #20]
 800e0d4:	b25b      	sxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	da15      	bge.n	800e106 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	7858      	ldrb	r0, [r3, #1]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1a      	ldr	r2, [r3, #32]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	f7fd fe3f 	bl	800bd6c <disk_write>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <f_sync+0x54>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e04f      	b.n	800e198 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e100:	b2da      	uxtb	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e106:	f7fb fc0b 	bl	8009920 <get_fattime>
 800e10a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	4619      	mov	r1, r3
 800e114:	4610      	mov	r0, r2
 800e116:	f7fe f917 	bl	800c348 <move_window>
 800e11a:	4603      	mov	r3, r0
 800e11c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e11e:	7dfb      	ldrb	r3, [r7, #23]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d138      	bne.n	800e196 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e128:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	330b      	adds	r3, #11
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	330b      	adds	r3, #11
 800e134:	f042 0220 	orr.w	r2, r2, #32
 800e138:	b2d2      	uxtb	r2, r2
 800e13a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6818      	ldr	r0, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	461a      	mov	r2, r3
 800e146:	68f9      	ldr	r1, [r7, #12]
 800e148:	f7fe fea5 	bl	800ce96 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f103 021c 	add.w	r2, r3, #28
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f7fd fe9b 	bl	800be94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3316      	adds	r3, #22
 800e162:	6939      	ldr	r1, [r7, #16]
 800e164:	4618      	mov	r0, r3
 800e166:	f7fd fe95 	bl	800be94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	3312      	adds	r3, #18
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f7fd fe74 	bl	800be5e <st_word>
					fs->wflag = 1;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2201      	movs	r2, #1
 800e17a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fe f910 	bl	800c3a4 <sync_fs>
 800e184:	4603      	mov	r3, r0
 800e186:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e190:	b2da      	uxtb	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e196:	7dfb      	ldrb	r3, [r7, #23]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff ff7b 	bl	800e0a4 <f_sync>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d118      	bne.n	800e1ea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f107 0208 	add.w	r2, r7, #8
 800e1be:	4611      	mov	r1, r2
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff fb93 	bl	800d8ec <validate>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10c      	bne.n	800e1ea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fe f813 	bl	800c200 <dec_lock>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e1de:	7bfb      	ldrb	r3, [r7, #15]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b090      	sub	sp, #64	; 0x40
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e1fe:	f107 010c 	add.w	r1, r7, #12
 800e202:	1d3b      	adds	r3, r7, #4
 800e204:	2200      	movs	r2, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f7ff f8f0 	bl	800d3ec <find_volume>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800e212:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e216:	2b00      	cmp	r3, #0
 800e218:	d11f      	bne.n	800e25a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	f107 030c 	add.w	r3, r7, #12
 800e220:	4611      	mov	r1, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f7fe ffd2 	bl	800d1cc <follow_path>
 800e228:	4603      	mov	r3, r0
 800e22a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e22e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e232:	2b00      	cmp	r3, #0
 800e234:	d111      	bne.n	800e25a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e236:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e23a:	b25b      	sxtb	r3, r3
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da03      	bge.n	800e248 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e240:	2306      	movs	r3, #6
 800e242:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e246:	e008      	b.n	800e25a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d005      	beq.n	800e25a <f_stat+0x66>
 800e24e:	f107 030c 	add.w	r3, r7, #12
 800e252:	6839      	ldr	r1, [r7, #0]
 800e254:	4618      	mov	r0, r3
 800e256:	f7fe fec5 	bl	800cfe4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e25a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3740      	adds	r7, #64	; 0x40
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b084      	sub	sp, #16
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	db25      	blt.n	800e2ca <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	60fa      	str	r2, [r7, #12]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	4413      	add	r3, r2
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b3c      	cmp	r3, #60	; 0x3c
 800e290:	dd12      	ble.n	800e2b8 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f103 010c 	add.w	r1, r3, #12
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	f107 0308 	add.w	r3, r7, #8
 800e2a2:	f7ff fd6b 	bl	800dd7c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d101      	bne.n	800e2b2 <putc_bfd+0x4c>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e001      	b.n	800e2b6 <putc_bfd+0x50>
 800e2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	1c5a      	adds	r2, r3, #1
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	609a      	str	r2, [r3, #8]
 800e2c8:	e000      	b.n	800e2cc <putc_bfd+0x66>
	if (i < 0) return;
 800e2ca:	bf00      	nop
}
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	db16      	blt.n	800e310 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6818      	ldr	r0, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f103 010c 	add.w	r1, r3, #12
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	f107 030c 	add.w	r3, r7, #12
 800e2f6:	f7ff fd41 	bl	800dd7c <f_write>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d107      	bne.n	800e310 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	4293      	cmp	r3, r2
 800e308:	d102      	bne.n	800e310 <putc_flush+0x3e>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	e001      	b.n	800e314 <putc_flush+0x42>
	return EOF;
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	605a      	str	r2, [r3, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685a      	ldr	r2, [r3, #4]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	609a      	str	r2, [r3, #8]
}
 800e33a:	bf00      	nop
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b096      	sub	sp, #88	; 0x58
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e350:	f107 030c 	add.w	r3, r7, #12
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ffe0 	bl	800e31c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e35c:	e009      	b.n	800e372 <f_puts+0x2c>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	781a      	ldrb	r2, [r3, #0]
 800e366:	f107 030c 	add.w	r3, r7, #12
 800e36a:	4611      	mov	r1, r2
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff ff7a 	bl	800e266 <putc_bfd>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1f1      	bne.n	800e35e <f_puts+0x18>
	return putc_flush(&pb);
 800e37a:	f107 030c 	add.w	r3, r7, #12
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff ffa7 	bl	800e2d2 <putc_flush>
 800e384:	4603      	mov	r3, r0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3758      	adds	r7, #88	; 0x58
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	4613      	mov	r3, r2
 800e39c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e3a6:	4b1f      	ldr	r3, [pc, #124]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3a8:	7a5b      	ldrb	r3, [r3, #9]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d131      	bne.n	800e414 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3b0:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3b2:	7a5b      	ldrb	r3, [r3, #9]
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4b1a      	ldr	r3, [pc, #104]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e3be:	4b19      	ldr	r3, [pc, #100]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3c0:	7a5b      	ldrb	r3, [r3, #9]
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	4a17      	ldr	r2, [pc, #92]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e3ce:	4b15      	ldr	r3, [pc, #84]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3d0:	7a5b      	ldrb	r3, [r3, #9]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4b13      	ldr	r3, [pc, #76]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3d8:	4413      	add	r3, r2
 800e3da:	79fa      	ldrb	r2, [r7, #7]
 800e3dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3de:	4b11      	ldr	r3, [pc, #68]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3e0:	7a5b      	ldrb	r3, [r3, #9]
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	b2d1      	uxtb	r1, r2
 800e3e8:	4a0e      	ldr	r2, [pc, #56]	; (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3ea:	7251      	strb	r1, [r2, #9]
 800e3ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3ee:	7dbb      	ldrb	r3, [r7, #22]
 800e3f0:	3330      	adds	r3, #48	; 0x30
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	223a      	movs	r2, #58	; 0x3a
 800e3fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	3302      	adds	r3, #2
 800e404:	222f      	movs	r2, #47	; 0x2f
 800e406:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	3303      	adds	r3, #3
 800e40c:	2200      	movs	r2, #0
 800e40e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e410:	2300      	movs	r3, #0
 800e412:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e414:	7dfb      	ldrb	r3, [r7, #23]
}
 800e416:	4618      	mov	r0, r3
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	2000242c 	.word	0x2000242c

0800e428 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e432:	2200      	movs	r2, #0
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff ffaa 	bl	800e390 <FATFS_LinkDriverEx>
 800e43c:	4603      	mov	r3, r0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e44c:	2200      	movs	r2, #0
 800e44e:	4912      	ldr	r1, [pc, #72]	; (800e498 <MX_USB_DEVICE_Init+0x50>)
 800e450:	4812      	ldr	r0, [pc, #72]	; (800e49c <MX_USB_DEVICE_Init+0x54>)
 800e452:	f7fc f939 	bl	800a6c8 <USBD_Init>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d001      	beq.n	800e460 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e45c:	f7f3 fb6a 	bl	8001b34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e460:	490f      	ldr	r1, [pc, #60]	; (800e4a0 <MX_USB_DEVICE_Init+0x58>)
 800e462:	480e      	ldr	r0, [pc, #56]	; (800e49c <MX_USB_DEVICE_Init+0x54>)
 800e464:	f7fc f960 	bl	800a728 <USBD_RegisterClass>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e46e:	f7f3 fb61 	bl	8001b34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e472:	490c      	ldr	r1, [pc, #48]	; (800e4a4 <MX_USB_DEVICE_Init+0x5c>)
 800e474:	4809      	ldr	r0, [pc, #36]	; (800e49c <MX_USB_DEVICE_Init+0x54>)
 800e476:	f7fc f851 	bl	800a51c <USBD_CDC_RegisterInterface>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e480:	f7f3 fb58 	bl	8001b34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e484:	4805      	ldr	r0, [pc, #20]	; (800e49c <MX_USB_DEVICE_Init+0x54>)
 800e486:	f7fc f985 	bl	800a794 <USBD_Start>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d001      	beq.n	800e494 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e490:	f7f3 fb50 	bl	8001b34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e494:	bf00      	nop
 800e496:	bd80      	pop	{r7, pc}
 800e498:	200000b0 	.word	0x200000b0
 800e49c:	20002438 	.word	0x20002438
 800e4a0:	2000001c 	.word	0x2000001c
 800e4a4:	2000009c 	.word	0x2000009c

0800e4a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	4905      	ldr	r1, [pc, #20]	; (800e4c4 <CDC_Init_FS+0x1c>)
 800e4b0:	4805      	ldr	r0, [pc, #20]	; (800e4c8 <CDC_Init_FS+0x20>)
 800e4b2:	f7fc f84d 	bl	800a550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e4b6:	4905      	ldr	r1, [pc, #20]	; (800e4cc <CDC_Init_FS+0x24>)
 800e4b8:	4803      	ldr	r0, [pc, #12]	; (800e4c8 <CDC_Init_FS+0x20>)
 800e4ba:	f7fc f86b 	bl	800a594 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e4be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	20002f14 	.word	0x20002f14
 800e4c8:	20002438 	.word	0x20002438
 800e4cc:	20002714 	.word	0x20002714

0800e4d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e4d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6039      	str	r1, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	2b23      	cmp	r3, #35	; 0x23
 800e4f4:	d84a      	bhi.n	800e58c <CDC_Control_FS+0xac>
 800e4f6:	a201      	add	r2, pc, #4	; (adr r2, 800e4fc <CDC_Control_FS+0x1c>)
 800e4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fc:	0800e58d 	.word	0x0800e58d
 800e500:	0800e58d 	.word	0x0800e58d
 800e504:	0800e58d 	.word	0x0800e58d
 800e508:	0800e58d 	.word	0x0800e58d
 800e50c:	0800e58d 	.word	0x0800e58d
 800e510:	0800e58d 	.word	0x0800e58d
 800e514:	0800e58d 	.word	0x0800e58d
 800e518:	0800e58d 	.word	0x0800e58d
 800e51c:	0800e58d 	.word	0x0800e58d
 800e520:	0800e58d 	.word	0x0800e58d
 800e524:	0800e58d 	.word	0x0800e58d
 800e528:	0800e58d 	.word	0x0800e58d
 800e52c:	0800e58d 	.word	0x0800e58d
 800e530:	0800e58d 	.word	0x0800e58d
 800e534:	0800e58d 	.word	0x0800e58d
 800e538:	0800e58d 	.word	0x0800e58d
 800e53c:	0800e58d 	.word	0x0800e58d
 800e540:	0800e58d 	.word	0x0800e58d
 800e544:	0800e58d 	.word	0x0800e58d
 800e548:	0800e58d 	.word	0x0800e58d
 800e54c:	0800e58d 	.word	0x0800e58d
 800e550:	0800e58d 	.word	0x0800e58d
 800e554:	0800e58d 	.word	0x0800e58d
 800e558:	0800e58d 	.word	0x0800e58d
 800e55c:	0800e58d 	.word	0x0800e58d
 800e560:	0800e58d 	.word	0x0800e58d
 800e564:	0800e58d 	.word	0x0800e58d
 800e568:	0800e58d 	.word	0x0800e58d
 800e56c:	0800e58d 	.word	0x0800e58d
 800e570:	0800e58d 	.word	0x0800e58d
 800e574:	0800e58d 	.word	0x0800e58d
 800e578:	0800e58d 	.word	0x0800e58d
 800e57c:	0800e58d 	.word	0x0800e58d
 800e580:	0800e58d 	.word	0x0800e58d
 800e584:	0800e58d 	.word	0x0800e58d
 800e588:	0800e58d 	.word	0x0800e58d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e58c:	bf00      	nop
  }

  return (USBD_OK);
 800e58e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e590:	4618      	mov	r0, r3
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e5a6:	6879      	ldr	r1, [r7, #4]
 800e5a8:	4805      	ldr	r0, [pc, #20]	; (800e5c0 <CDC_Receive_FS+0x24>)
 800e5aa:	f7fb fff3 	bl	800a594 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e5ae:	4804      	ldr	r0, [pc, #16]	; (800e5c0 <CDC_Receive_FS+0x24>)
 800e5b0:	f7fc f854 	bl	800a65c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e5b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20002438 	.word	0x20002438

0800e5c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e5d4:	4b0d      	ldr	r3, [pc, #52]	; (800e60c <CDC_Transmit_FS+0x48>)
 800e5d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d001      	beq.n	800e5ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e00b      	b.n	800e602 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e5ea:	887b      	ldrh	r3, [r7, #2]
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	6879      	ldr	r1, [r7, #4]
 800e5f0:	4806      	ldr	r0, [pc, #24]	; (800e60c <CDC_Transmit_FS+0x48>)
 800e5f2:	f7fb ffad 	bl	800a550 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e5f6:	4805      	ldr	r0, [pc, #20]	; (800e60c <CDC_Transmit_FS+0x48>)
 800e5f8:	f7fb ffea 	bl	800a5d0 <USBD_CDC_TransmitPacket>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e600:	7bfb      	ldrb	r3, [r7, #15]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20002438 	.word	0x20002438

0800e610 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e61e:	2300      	movs	r3, #0
 800e620:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e626:	4618      	mov	r0, r3
 800e628:	371c      	adds	r7, #28
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
	...

0800e634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	6039      	str	r1, [r7, #0]
 800e63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2212      	movs	r2, #18
 800e644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e646:	4b03      	ldr	r3, [pc, #12]	; (800e654 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	200000cc 	.word	0x200000cc

0800e658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	6039      	str	r1, [r7, #0]
 800e662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2204      	movs	r2, #4
 800e668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e66a:	4b03      	ldr	r3, [pc, #12]	; (800e678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	200000e0 	.word	0x200000e0

0800e67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	6039      	str	r1, [r7, #0]
 800e686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	4907      	ldr	r1, [pc, #28]	; (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e692:	4808      	ldr	r0, [pc, #32]	; (800e6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e694:	f7fd fa2a 	bl	800baec <USBD_GetString>
 800e698:	e004      	b.n	800e6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	4904      	ldr	r1, [pc, #16]	; (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e69e:	4805      	ldr	r0, [pc, #20]	; (800e6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6a0:	f7fd fa24 	bl	800baec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6a4:	4b02      	ldr	r3, [pc, #8]	; (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20003714 	.word	0x20003714
 800e6b4:	0800efe0 	.word	0x0800efe0

0800e6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	4904      	ldr	r1, [pc, #16]	; (800e6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e6c8:	4804      	ldr	r0, [pc, #16]	; (800e6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e6ca:	f7fd fa0f 	bl	800baec <USBD_GetString>
  return USBD_StrDesc;
 800e6ce:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	20003714 	.word	0x20003714
 800e6dc:	0800eff8 	.word	0x0800eff8

0800e6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	221a      	movs	r2, #26
 800e6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e6f2:	f000 f843 	bl	800e77c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e6f6:	4b02      	ldr	r3, [pc, #8]	; (800e700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	200000e4 	.word	0x200000e4

0800e704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e716:	683a      	ldr	r2, [r7, #0]
 800e718:	4907      	ldr	r1, [pc, #28]	; (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e71a:	4808      	ldr	r0, [pc, #32]	; (800e73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e71c:	f7fd f9e6 	bl	800baec <USBD_GetString>
 800e720:	e004      	b.n	800e72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	4904      	ldr	r1, [pc, #16]	; (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e726:	4805      	ldr	r0, [pc, #20]	; (800e73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e728:	f7fd f9e0 	bl	800baec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e72c:	4b02      	ldr	r3, [pc, #8]	; (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20003714 	.word	0x20003714
 800e73c:	0800f00c 	.word	0x0800f00c

0800e740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	6039      	str	r1, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	4907      	ldr	r1, [pc, #28]	; (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e756:	4808      	ldr	r0, [pc, #32]	; (800e778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e758:	f7fd f9c8 	bl	800baec <USBD_GetString>
 800e75c:	e004      	b.n	800e768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	4904      	ldr	r1, [pc, #16]	; (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e762:	4805      	ldr	r0, [pc, #20]	; (800e778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e764:	f7fd f9c2 	bl	800baec <USBD_GetString>
  }
  return USBD_StrDesc;
 800e768:	4b02      	ldr	r3, [pc, #8]	; (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20003714 	.word	0x20003714
 800e778:	0800f018 	.word	0x0800f018

0800e77c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e782:	4b0f      	ldr	r3, [pc, #60]	; (800e7c0 <Get_SerialNum+0x44>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e788:	4b0e      	ldr	r3, [pc, #56]	; (800e7c4 <Get_SerialNum+0x48>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e78e:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <Get_SerialNum+0x4c>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4413      	add	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7a2:	2208      	movs	r2, #8
 800e7a4:	4909      	ldr	r1, [pc, #36]	; (800e7cc <Get_SerialNum+0x50>)
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f000 f814 	bl	800e7d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7ac:	2204      	movs	r2, #4
 800e7ae:	4908      	ldr	r1, [pc, #32]	; (800e7d0 <Get_SerialNum+0x54>)
 800e7b0:	68b8      	ldr	r0, [r7, #8]
 800e7b2:	f000 f80f 	bl	800e7d4 <IntToUnicode>
  }
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	1fff7a10 	.word	0x1fff7a10
 800e7c4:	1fff7a14 	.word	0x1fff7a14
 800e7c8:	1fff7a18 	.word	0x1fff7a18
 800e7cc:	200000e6 	.word	0x200000e6
 800e7d0:	200000f6 	.word	0x200000f6

0800e7d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	75fb      	strb	r3, [r7, #23]
 800e7ea:	e027      	b.n	800e83c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	0f1b      	lsrs	r3, r3, #28
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	d80b      	bhi.n	800e80c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	0f1b      	lsrs	r3, r3, #28
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	4619      	mov	r1, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	440b      	add	r3, r1
 800e804:	3230      	adds	r2, #48	; 0x30
 800e806:	b2d2      	uxtb	r2, r2
 800e808:	701a      	strb	r2, [r3, #0]
 800e80a:	e00a      	b.n	800e822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	0f1b      	lsrs	r3, r3, #28
 800e810:	b2da      	uxtb	r2, r3
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4619      	mov	r1, r3
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	440b      	add	r3, r1
 800e81c:	3237      	adds	r2, #55	; 0x37
 800e81e:	b2d2      	uxtb	r2, r2
 800e820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	011b      	lsls	r3, r3, #4
 800e826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e828:	7dfb      	ldrb	r3, [r7, #23]
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	3301      	adds	r3, #1
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	4413      	add	r3, r2
 800e832:	2200      	movs	r2, #0
 800e834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	3301      	adds	r3, #1
 800e83a:	75fb      	strb	r3, [r7, #23]
 800e83c:	7dfa      	ldrb	r2, [r7, #23]
 800e83e:	79fb      	ldrb	r3, [r7, #7]
 800e840:	429a      	cmp	r2, r3
 800e842:	d3d3      	bcc.n	800e7ec <IntToUnicode+0x18>
  }
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	371c      	adds	r7, #28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
	...

0800e854 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08a      	sub	sp, #40	; 0x28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e85c:	f107 0314 	add.w	r3, r7, #20
 800e860:	2200      	movs	r2, #0
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	605a      	str	r2, [r3, #4]
 800e866:	609a      	str	r2, [r3, #8]
 800e868:	60da      	str	r2, [r3, #12]
 800e86a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e874:	d13a      	bne.n	800e8ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e876:	2300      	movs	r3, #0
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	4b1e      	ldr	r3, [pc, #120]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87e:	4a1d      	ldr	r2, [pc, #116]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e880:	f043 0301 	orr.w	r3, r3, #1
 800e884:	6313      	str	r3, [r2, #48]	; 0x30
 800e886:	4b1b      	ldr	r3, [pc, #108]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	613b      	str	r3, [r7, #16]
 800e890:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e892:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e898:	2302      	movs	r3, #2
 800e89a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e8a4:	230a      	movs	r3, #10
 800e8a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8a8:	f107 0314 	add.w	r3, r7, #20
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4812      	ldr	r0, [pc, #72]	; (800e8f8 <HAL_PCD_MspInit+0xa4>)
 800e8b0:	f7f4 f886 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e8b4:	4b0f      	ldr	r3, [pc, #60]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b8:	4a0e      	ldr	r2, [pc, #56]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8be:	6353      	str	r3, [r2, #52]	; 0x34
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	4b0b      	ldr	r3, [pc, #44]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c8:	4a0a      	ldr	r2, [pc, #40]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e8ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e8ce:	6453      	str	r3, [r2, #68]	; 0x44
 800e8d0:	4b08      	ldr	r3, [pc, #32]	; (800e8f4 <HAL_PCD_MspInit+0xa0>)
 800e8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e8dc:	2200      	movs	r2, #0
 800e8de:	2100      	movs	r1, #0
 800e8e0:	2043      	movs	r0, #67	; 0x43
 800e8e2:	f7f3 fcba 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e8e6:	2043      	movs	r0, #67	; 0x43
 800e8e8:	f7f3 fcd3 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8ec:	bf00      	nop
 800e8ee:	3728      	adds	r7, #40	; 0x28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	40023800 	.word	0x40023800
 800e8f8:	40020000 	.word	0x40020000

0800e8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	f7fb ff8b 	bl	800a82e <USBD_LL_SetupStage>
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	460b      	mov	r3, r1
 800e92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e932:	78fa      	ldrb	r2, [r7, #3]
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	4613      	mov	r3, r2
 800e938:	00db      	lsls	r3, r3, #3
 800e93a:	4413      	add	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	440b      	add	r3, r1
 800e940:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	78fb      	ldrb	r3, [r7, #3]
 800e948:	4619      	mov	r1, r3
 800e94a:	f7fb ffc5 	bl	800a8d8 <USBD_LL_DataOutStage>
}
 800e94e:	bf00      	nop
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b082      	sub	sp, #8
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e968:	78fa      	ldrb	r2, [r7, #3]
 800e96a:	6879      	ldr	r1, [r7, #4]
 800e96c:	4613      	mov	r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	4413      	add	r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	440b      	add	r3, r1
 800e976:	334c      	adds	r3, #76	; 0x4c
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	4619      	mov	r1, r3
 800e97e:	f7fc f85e 	bl	800aa3e <USBD_LL_DataInStage>
}
 800e982:	bf00      	nop
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fc f992 	bl	800acc2 <USBD_LL_SOF>
}
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d102      	bne.n	800e9c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73fb      	strb	r3, [r7, #15]
 800e9be:	e008      	b.n	800e9d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d102      	bne.n	800e9ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	73fb      	strb	r3, [r7, #15]
 800e9cc:	e001      	b.n	800e9d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e9ce:	f7f3 f8b1 	bl	8001b34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9d8:	7bfa      	ldrb	r2, [r7, #15]
 800e9da:	4611      	mov	r1, r2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fc f932 	bl	800ac46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fc f8da 	bl	800aba2 <USBD_LL_Reset>
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fc f92d 	bl	800ac66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	6812      	ldr	r2, [r2, #0]
 800ea1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea1e:	f043 0301 	orr.w	r3, r3, #1
 800ea22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a1b      	ldr	r3, [r3, #32]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d005      	beq.n	800ea38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea2c:	4b04      	ldr	r3, [pc, #16]	; (800ea40 <HAL_PCD_SuspendCallback+0x48>)
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	4a03      	ldr	r2, [pc, #12]	; (800ea40 <HAL_PCD_SuspendCallback+0x48>)
 800ea32:	f043 0306 	orr.w	r3, r3, #6
 800ea36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	e000ed00 	.word	0xe000ed00

0800ea44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fc f91d 	bl	800ac92 <USBD_LL_Resume>
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea72:	78fa      	ldrb	r2, [r7, #3]
 800ea74:	4611      	mov	r1, r2
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fc f975 	bl	800ad66 <USBD_LL_IsoOUTIncomplete>
}
 800ea7c:	bf00      	nop
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea96:	78fa      	ldrb	r2, [r7, #3]
 800ea98:	4611      	mov	r1, r2
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fc f931 	bl	800ad02 <USBD_LL_IsoINIncomplete>
}
 800eaa0:	bf00      	nop
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fc f987 	bl	800adca <USBD_LL_DevConnected>
}
 800eabc:	bf00      	nop
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fc f984 	bl	800ade0 <USBD_LL_DevDisconnected>
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d13c      	bne.n	800eb6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eaf0:	4a20      	ldr	r2, [pc, #128]	; (800eb74 <USBD_LL_Init+0x94>)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4a1e      	ldr	r2, [pc, #120]	; (800eb74 <USBD_LL_Init+0x94>)
 800eafc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb00:	4b1c      	ldr	r3, [pc, #112]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eb06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eb08:	4b1a      	ldr	r3, [pc, #104]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb0a:	2204      	movs	r2, #4
 800eb0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb0e:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb10:	2202      	movs	r2, #2
 800eb12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb14:	4b17      	ldr	r3, [pc, #92]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb1a:	4b16      	ldr	r3, [pc, #88]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb20:	4b14      	ldr	r3, [pc, #80]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eb26:	4b13      	ldr	r3, [pc, #76]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eb2c:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb32:	4b10      	ldr	r3, [pc, #64]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb38:	4b0e      	ldr	r3, [pc, #56]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb3e:	480d      	ldr	r0, [pc, #52]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb40:	f7f5 fb61 	bl	8004206 <HAL_PCD_Init>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d001      	beq.n	800eb4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eb4a:	f7f2 fff3 	bl	8001b34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb4e:	2180      	movs	r1, #128	; 0x80
 800eb50:	4808      	ldr	r0, [pc, #32]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb52:	f7f6 fdb8 	bl	80056c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb56:	2240      	movs	r2, #64	; 0x40
 800eb58:	2100      	movs	r1, #0
 800eb5a:	4806      	ldr	r0, [pc, #24]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb5c:	f7f6 fd6c 	bl	8005638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb60:	2280      	movs	r2, #128	; 0x80
 800eb62:	2101      	movs	r1, #1
 800eb64:	4803      	ldr	r0, [pc, #12]	; (800eb74 <USBD_LL_Init+0x94>)
 800eb66:	f7f6 fd67 	bl	8005638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20003914 	.word	0x20003914

0800eb78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7f5 fc56 	bl	8004440 <HAL_PCD_Start>
 800eb94:	4603      	mov	r3, r0
 800eb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 f942 	bl	800ee24 <USBD_Get_USB_Status>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b084      	sub	sp, #16
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4611      	mov	r1, r2
 800ebba:	461a      	mov	r2, r3
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	70fb      	strb	r3, [r7, #3]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70bb      	strb	r3, [r7, #2]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebd6:	78bb      	ldrb	r3, [r7, #2]
 800ebd8:	883a      	ldrh	r2, [r7, #0]
 800ebda:	78f9      	ldrb	r1, [r7, #3]
 800ebdc:	f7f6 f927 	bl	8004e2e <HAL_PCD_EP_Open>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f91c 	bl	800ee24 <USBD_Get_USB_Status>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b084      	sub	sp, #16
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	460b      	mov	r3, r1
 800ec04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec14:	78fa      	ldrb	r2, [r7, #3]
 800ec16:	4611      	mov	r1, r2
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f6 f970 	bl	8004efe <HAL_PCD_EP_Close>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 f8fd 	bl	800ee24 <USBD_Get_USB_Status>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	460b      	mov	r3, r1
 800ec42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec52:	78fa      	ldrb	r2, [r7, #3]
 800ec54:	4611      	mov	r1, r2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f6 fa48 	bl	80050ec <HAL_PCD_EP_SetStall>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 f8de 	bl	800ee24 <USBD_Get_USB_Status>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b084      	sub	sp, #16
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	460b      	mov	r3, r1
 800ec80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec82:	2300      	movs	r3, #0
 800ec84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec90:	78fa      	ldrb	r2, [r7, #3]
 800ec92:	4611      	mov	r1, r2
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7f6 fa8d 	bl	80051b4 <HAL_PCD_EP_ClrStall>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec9e:	7bfb      	ldrb	r3, [r7, #15]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 f8bf 	bl	800ee24 <USBD_Get_USB_Status>
 800eca6:	4603      	mov	r3, r0
 800eca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ecc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da0b      	bge.n	800ece8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecd6:	68f9      	ldr	r1, [r7, #12]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	00db      	lsls	r3, r3, #3
 800ecdc:	4413      	add	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	440b      	add	r3, r1
 800ece2:	333e      	adds	r3, #62	; 0x3e
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	e00b      	b.n	800ed00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecee:	68f9      	ldr	r1, [r7, #12]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	440b      	add	r3, r1
 800ecfa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ecfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3714      	adds	r7, #20
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed26:	78fa      	ldrb	r2, [r7, #3]
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7f6 f85a 	bl	8004de4 <HAL_PCD_SetAddress>
 800ed30:	4603      	mov	r3, r0
 800ed32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed34:	7bfb      	ldrb	r3, [r7, #15]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 f874 	bl	800ee24 <USBD_Get_USB_Status>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b086      	sub	sp, #24
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	60f8      	str	r0, [r7, #12]
 800ed52:	607a      	str	r2, [r7, #4]
 800ed54:	603b      	str	r3, [r7, #0]
 800ed56:	460b      	mov	r3, r1
 800ed58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed68:	7af9      	ldrb	r1, [r7, #11]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	f7f6 f973 	bl	8005058 <HAL_PCD_EP_Transmit>
 800ed72:	4603      	mov	r3, r0
 800ed74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed76:	7dfb      	ldrb	r3, [r7, #23]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 f853 	bl	800ee24 <USBD_Get_USB_Status>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed82:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	607a      	str	r2, [r7, #4]
 800ed96:	603b      	str	r3, [r7, #0]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edaa:	7af9      	ldrb	r1, [r7, #11]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	f7f6 f8ef 	bl	8004f92 <HAL_PCD_EP_Receive>
 800edb4:	4603      	mov	r3, r0
 800edb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	4618      	mov	r0, r3
 800edbc:	f000 f832 	bl	800ee24 <USBD_Get_USB_Status>
 800edc0:	4603      	mov	r3, r0
 800edc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	460b      	mov	r3, r1
 800edd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ede0:	78fa      	ldrb	r2, [r7, #3]
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7f6 f91f 	bl	8005028 <HAL_PCD_EP_GetRxCount>
 800edea:	4603      	mov	r3, r0
}
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800edfc:	4b03      	ldr	r3, [pc, #12]	; (800ee0c <USBD_static_malloc+0x18>)
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	20003e20 	.word	0x20003e20

0800ee10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]

}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee32:	79fb      	ldrb	r3, [r7, #7]
 800ee34:	2b03      	cmp	r3, #3
 800ee36:	d817      	bhi.n	800ee68 <USBD_Get_USB_Status+0x44>
 800ee38:	a201      	add	r2, pc, #4	; (adr r2, 800ee40 <USBD_Get_USB_Status+0x1c>)
 800ee3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3e:	bf00      	nop
 800ee40:	0800ee51 	.word	0x0800ee51
 800ee44:	0800ee57 	.word	0x0800ee57
 800ee48:	0800ee5d 	.word	0x0800ee5d
 800ee4c:	0800ee63 	.word	0x0800ee63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	73fb      	strb	r3, [r7, #15]
    break;
 800ee54:	e00b      	b.n	800ee6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee56:	2303      	movs	r3, #3
 800ee58:	73fb      	strb	r3, [r7, #15]
    break;
 800ee5a:	e008      	b.n	800ee6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee60:	e005      	b.n	800ee6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee62:	2303      	movs	r3, #3
 800ee64:	73fb      	strb	r3, [r7, #15]
    break;
 800ee66:	e002      	b.n	800ee6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6c:	bf00      	nop
  }
  return usb_status;
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <__libc_init_array>:
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	4d0d      	ldr	r5, [pc, #52]	; (800eeb4 <__libc_init_array+0x38>)
 800ee80:	4c0d      	ldr	r4, [pc, #52]	; (800eeb8 <__libc_init_array+0x3c>)
 800ee82:	1b64      	subs	r4, r4, r5
 800ee84:	10a4      	asrs	r4, r4, #2
 800ee86:	2600      	movs	r6, #0
 800ee88:	42a6      	cmp	r6, r4
 800ee8a:	d109      	bne.n	800eea0 <__libc_init_array+0x24>
 800ee8c:	4d0b      	ldr	r5, [pc, #44]	; (800eebc <__libc_init_array+0x40>)
 800ee8e:	4c0c      	ldr	r4, [pc, #48]	; (800eec0 <__libc_init_array+0x44>)
 800ee90:	f000 f820 	bl	800eed4 <_init>
 800ee94:	1b64      	subs	r4, r4, r5
 800ee96:	10a4      	asrs	r4, r4, #2
 800ee98:	2600      	movs	r6, #0
 800ee9a:	42a6      	cmp	r6, r4
 800ee9c:	d105      	bne.n	800eeaa <__libc_init_array+0x2e>
 800ee9e:	bd70      	pop	{r4, r5, r6, pc}
 800eea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea4:	4798      	blx	r3
 800eea6:	3601      	adds	r6, #1
 800eea8:	e7ee      	b.n	800ee88 <__libc_init_array+0xc>
 800eeaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeae:	4798      	blx	r3
 800eeb0:	3601      	adds	r6, #1
 800eeb2:	e7f2      	b.n	800ee9a <__libc_init_array+0x1e>
 800eeb4:	0800f0e4 	.word	0x0800f0e4
 800eeb8:	0800f0e4 	.word	0x0800f0e4
 800eebc:	0800f0e4 	.word	0x0800f0e4
 800eec0:	0800f0e8 	.word	0x0800f0e8

0800eec4 <memset>:
 800eec4:	4402      	add	r2, r0
 800eec6:	4603      	mov	r3, r0
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d100      	bne.n	800eece <memset+0xa>
 800eecc:	4770      	bx	lr
 800eece:	f803 1b01 	strb.w	r1, [r3], #1
 800eed2:	e7f9      	b.n	800eec8 <memset+0x4>

0800eed4 <_init>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	bf00      	nop
 800eed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeda:	bc08      	pop	{r3}
 800eedc:	469e      	mov	lr, r3
 800eede:	4770      	bx	lr

0800eee0 <_fini>:
 800eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee2:	bf00      	nop
 800eee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eee6:	bc08      	pop	{r3}
 800eee8:	469e      	mov	lr, r3
 800eeea:	4770      	bx	lr
